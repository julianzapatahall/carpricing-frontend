declare class Account {
    private readonly fetcher;
    constructor(fetcher: Function);
    profile(): any;
    email(): any;
    preferences(): any;
    kidMode({ enable }?: {
        enable?: boolean;
    }): any;
    challenges(): any;
    ongoing({ limit }?: {
        limit?: number;
    }): any;
}

declare class Board {
    private readonly fetcher;
    constructor(fetcher: Function);
    events(): any;
    stream({ gameId }: {
        gameId: string;
    }): any;
    move({ gameId, move }: {
        gameId: string;
        move: string;
    }): any;
    chat({ gameId, room, text, }: {
        gameId: string;
        room?: 'player' | 'spectator';
        text?: string;
    }): any;
    abort({ gameId }: {
        gameId: string;
    }): any;
    resign({ gameId }: {
        gameId: string;
    }): any;
    draw({ gameId, accept }: {
        gameId: string;
        accept: boolean;
    }): any;
    takeback({ gameId, accept }: {
        gameId: string;
        accept: boolean;
    }): any;
    victory({ gameId }: {
        gameId: string;
    }): any;
    berserk({ gameId }: {
        gameId: string;
    }): any;
}

type GameVariant = 'standard' | 'chess960' | 'crazyhouse' | 'antichess' | 'atomic' | 'horde' | 'kingOfTheHill' | 'racingKings' | 'threeCheck' | 'fromPosition';
type GetUsers = {
    ids: string | string[];
};
type GetUser = {
    username?: string;
    perfType?: string;
    text?: string;
    term?: string;
    details?: boolean;
    friendPrior?: boolean;
};
type ChallengeAI = {
    level?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    clockLimit?: number;
    clockIncrement?: number;
    days?: 1 | 2 | 3 | 5 | 7 | 10 | 14;
    color?: 'white' | 'black' | 'random';
    variant?: GameVariant;
    fen?: string;
};
type ChallengeOpen = {
    rated?: boolean;
    name?: string;
    rules?: string;
    users?: string | string[];
    expiresAt?: number;
} & Omit<ChallengeAI, 'level'>;

declare class Challenge {
    private readonly fetcher;
    constructor(fetcher: Function);
    create({ username }: {
        username: string;
    }): any;
    accept({ challengeId }: {
        challengeId: string;
    }): any;
    decline({ challengeId }: {
        challengeId: string;
    }): any;
    cancel({ challengeId }: {
        challengeId: string;
    }): any;
    ai({ level, clockLimit, clockIncrement, days, color, variant, fen, }: ChallengeAI): any;
    open({ rated, clockLimit, clockIncrement, days, color, variant, fen, name, rules, users, expiresAt, }: ChallengeOpen): any;
    start({ gameId, token1, token2, }: {
        gameId: string;
        token1: string;
        token2: string;
    }): any;
    grant({ gameId, seconds }: {
        gameId: string;
        seconds: number;
    }): any;
    admin({ users, description, }: {
        users: string | string[];
        description: string;
    }): any;
}

declare class LeaderBoard {
    private readonly fetcher;
    constructor(fetcher: Function);
    info({ nb, perfType }: {
        nb: number;
        perfType: string;
    }): any;
    topTens(): any;
}
declare class Users {
    private readonly fetcher;
    leaderboard: LeaderBoard;
    constructor(fetcher: Function);
    info({ ids }: GetUsers): any;
    status({ ids }: GetUsers): any;
    crosstable({ user1, user2, matchup, }: {
        user1: string;
        user2: string;
        matchup?: boolean;
    }): any;
    streaming(): any;
}
declare class User {
    private readonly fetcher;
    constructor(fetcher: Function);
    info({ username }: {
        username: string;
    }): any;
    history({ username }: {
        username: string;
    }): any;
    performance({ username, perfType, }: {
        username: string;
        perfType: string;
    }): any;
    activity({ username }: {
        username: string;
    }): any;
    autocomplete({ term, details, friendPrior }: GetUser): any;
    note({ username, text }: {
        username: string;
        text?: string;
    }): any;
    follow({ username }: {
        username: string;
    }): any;
    unfollow({ username }: {
        username: string;
    }): any;
}

declare class Equine {
    private readonly token;
    private fetcher;
    account: Account;
    board: Board;
    challenge: Challenge;
    user: User;
    users: Users;
    constructor(token: string);
}

export { Equine };
