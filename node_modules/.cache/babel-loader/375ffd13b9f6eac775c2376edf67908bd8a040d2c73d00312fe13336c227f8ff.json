{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n  const [processing, setProcessing] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState(null);\n  const [inputMethod, setInputMethod] = useState('pgn'); // Default to pgn\n\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const fetchLichessGames = async (username, maxGames = 1000) => {\n    const fetchGamesBatch = async (username, offset) => {\n      try {\n        const response = await fetch(`https://lichess.org/api/games/user/${username}?max=100&offset=${offset}&moves=true&pgnInJson=true`, {\n          headers: {\n            'Accept': 'application/x-ndjson'\n          }\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n        }\n        const text = await response.text();\n        return text.split('\\n').filter(Boolean).map(line => JSON.parse(line));\n      } catch (error) {\n        console.error('Error fetching games batch:', error.message);\n        throw error;\n      }\n    };\n    try {\n      const promises = [];\n      for (let i = 0; i < maxGames; i += 100) {\n        promises.push(fetchGamesBatch(username, i));\n      }\n      const results = await Promise.all(promises);\n      return results.flat();\n    } catch (error) {\n      console.error('Error fetching games from Lichess:', error.message);\n      throw error;\n    }\n  };\n  const handleStart = async () => {\n    setProcessing(true);\n    let games = [];\n    if (inputMethod === 'lichess') {\n      const data = await fetchLichessGames(opponentName);\n      let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n      games = rawGames.map(game => '[Event' + game.trim());\n    } else {\n      games = importedGames;\n    }\n    processGames(games);\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      chess.deleteComments();\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n    console.log(\"filteredLongDFUnsorted\");\n    console.log(filteredLongDFUnsorted);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const sortedByLengthDF = filteredLongDFUnsorted.sort((a, b) => b.Line.length - a.Line.length);\n    console.log(\"sortedByLengthDF\");\n    console.log(sortedByLengthDF);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = sortedByLengthDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line)) {\n        uniqueLinesStr += row.Line;\n        uniqueLinesStr += \"//\";\n        return false;\n      } else {\n        uniqueLinesStr += row.Line;\n        uniqueLinesStr += \"//\";\n        return true;\n      }\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameID: row.GameID,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n  };\n  const evaluatePosition = fen => {\n    return new Promise(resolve => {\n      stockfish.postMessage(`position fen ${fen}`);\n      stockfish.postMessage(\"go depth 16\");\n      stockfish.onmessage = event => {\n        const line = event.data;\n        const depthMatch = line.match(/depth (\\d+)/);\n        const evalMatch = line.match(/score cp (-?\\d+)/);\n        if (depthMatch && evalMatch) {\n          const depth = parseInt(depthMatch[1], 10);\n          if (depth === 15) {\n            const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n            resolve(evaluation);\n          }\n        }\n      };\n    });\n  };\n  const createPgnFromGameIDs = (gameIDs, pgnList) => {\n    return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n  };\n  const handleLineClick = gameIDs => {\n    const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n\n    // Store the combined PGN in localStorage\n    localStorage.setItem('combinedPgn', combinedPgn);\n\n    // Clear imported games\n    localStorage.removeItem('importedGames');\n\n    // Redirect to analysis board\n    window.location.href = '/analysis-board';\n  };\n  const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n    const chess = new Chess();\n    const evaluatedGames = [];\n    const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n    console.log(\"maxPly\");\n    console.log(maxPly);\n    const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n    console.log(uniqueGameIDs);\n    for (let gameID = 0; gameID < pgnList.length; gameID++) {\n      if (uniqueGameIDs.includes(gameID)) {\n        const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n        chess.loadPgn(pgn);\n        const chess2 = new Chess();\n        chess2.loadPgn(pgn);\n        chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", {\n          preserveHeaders: true\n        });\n        const moves = chess.history();\n        for (let i = 0; i < maxPly && i < moves.length; i++) {\n          chess2.move(moves[i]);\n          const fen = chess2.fen();\n          const origevaluation = await evaluatePosition(fen);\n          const evaluation = i % 2 == 0 ? String(parseFloat(origevaluation) * -1) : String(parseFloat(origevaluation));\n          chess2.setComment(evaluation);\n        }\n        evaluatedGames.push(chess2.pgn());\n      } else {\n        evaluatedGames.push(pgnList[gameID]);\n      }\n    }\n    processEvaluatedGames(evaluatedGames, maxPly);\n  };\n  const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    chess.loadPgn(evaluatedPGNs[0]);\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const commentsWithFens = chess.getComments();\n      const comments = commentsWithFens.map(item => item.comment);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      valList.push(parseFloat(comments[0]));\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < maxPly && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n        valList.push(parseFloat(comments[i]));\n      }\n      fullValList.push(valList);\n    });\n    console.log(\"fullValList\");\n    console.log(fullValList);\n    for (let j = 1; j <= maxPly; j++) {\n      initialColnames.push(\"Line\" + String(j));\n      initialColnames.push(\"EVAL\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < maxPly; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= maxPly; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= maxPly; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n    console.log(\"filteredLongDFUnsorted\");\n    console.log(filteredLongDFUnsorted);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const groupedByLine = filteredLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n    console.log(definedDF);\n    let fullLinesStr = \"//\";\n    let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n      const subsets = [];\n      const lineMoves = row.Line.split(\"*\").filter(Boolean);\n\n      // SUBSET CHECK\n      // Check if value already in partialLinesStr\n      if (partialLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      }\n\n      // SUPERSET CHECK\n      // Check if any subset is already in fullLinesStr\n\n      // Generate all possible subsets of the current line\n      for (let i = 1; i <= lineMoves.length; i++) {\n        const subset = lineMoves.slice(0, i).join(\"*\") + \"*\";\n        if (fullLinesStr.includes(\"//\" + subset + \"//\")) {\n          return false;\n        }\n        partialLinesStr += subset + \"//\";\n      }\n      ;\n      fullLinesStr += row.Line + \"//\";\n      return true;\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const categorizedLines = categorizeLines(nonSubsetLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    setProcessing(false); // Stop processing\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = \"EVAL\";\n      const evaluation = row[evalColumn];\n      if (opponentColor === \"Black\") {\n        if (evaluation >= 2) {\n          row.MistakeType = \"Fatal Blunder\";\n        } else if (evaluation >= 1.0) {\n          row.MistakeType = \"Major Mistake\";\n        } else if (evaluation >= 0.6) {\n          row.MistakeType = \"Slight Inaccuracy\";\n        } else {\n          row.MistakeType = \"None\";\n        }\n      } else {\n        if (evaluation <= -2) {\n          row.MistakeType = \"Fatal Blunder\";\n        } else if (evaluation <= -1.0) {\n          row.MistakeType = \"Major Mistake\";\n        } else if (evaluation <= -0.6) {\n          row.MistakeType = \"Slight Inaccuracy\";\n        } else {\n          row.MistakeType = \"None\";\n        }\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  const toggleDropdown = dropdown => {\n    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n  };\n  const formatMovesWithNumbers = line => {\n    const moves = line.Line.split(\"*\").filter(Boolean);\n    return moves.map((move, index) => {\n      const moveNumber = Math.floor(index / 2) + 1;\n      return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n    }).join(\" \");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 777,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/our-team\",\n              children: \"Our Team\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Blunder Punisher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setInputMethod(inputMethod === 'pgn' ? 'lichess' : 'pgn'),\n              children: inputMethod === 'pgn' ? 'Switch to Lichess.org' : 'Switch to Game List (.pgn)'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 21\n          }, this), inputMethod === 'pgn' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: handleFileSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentName\",\n              children: \"Opponent Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 794,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"opponentName\",\n              value: opponentName,\n              onChange: e => setOpponentName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 5\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"lichessUsername\",\n              children: \"Opponent Username:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"lichessUsername\",\n              value: opponentName,\n              onChange: e => setOpponentName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentColor\",\n              children: \"Opponent Color:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"opponentColor\",\n              value: opponentColor,\n              onChange: e => setOpponentColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 822,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"precisionLevel\",\n              children: \"Precision Level:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"precisionLevel\",\n              value: precisionLevel,\n              onChange: e => setPrecisionLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Amateur/SemiPro\",\n                children: \"Amateur/SemiPro (5s-1min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Professional\",\n                children: \"Professional (1min-10min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 834,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"GM\",\n                children: \"GM (1min-30min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 835,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 25\n          }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please wait, do not refresh or close the tab...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of games in the file: \", gamesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 21\n        }, this), processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"common-lines\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Most Common Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 844,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [line, \" - \", count]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 847,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Fatal Blunders'),\n              children: [\"Fatal Blunders: (\", filteredData.filter(line => line.MistakeType === 'Fatal Blunder').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 29\n            }, this), activeDropdown === 'Fatal Blunders' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Fatal Blunder').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLineClick(line.GameIDs),\n                  children: formatMovesWithNumbers(line)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 861,\n                  columnNumber: 45\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 860,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 858,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Major Mistakes'),\n              children: [\"Major Mistakes: (\", filteredData.filter(line => line.MistakeType === 'Major Mistake').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 870,\n              columnNumber: 29\n            }, this), activeDropdown === 'Major Mistakes' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Major Mistake').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLineClick(line.GameIDs),\n                  children: formatMovesWithNumbers(line)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 877,\n                  columnNumber: 45\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 876,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Slight Inaccuracies'),\n              children: [\"Slight Inaccuracies: (\", filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 886,\n              columnNumber: 29\n            }, this), activeDropdown === 'Slight Inaccuracies' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLineClick(line.GameIDs),\n                  children: formatMovesWithNumbers(line)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 893,\n                  columnNumber: 45\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 892,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 905,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 765,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"vNHr1tY9fvYY+AsBcntQsEOunV8=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","logo","logoWhite","jsxDEV","_jsxDEV","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","thePgnList","setThePgnList","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","activeDropdown","setActiveDropdown","inputMethod","setInputMethod","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","readAsText","fetchLichessGames","username","maxGames","fetchGamesBatch","offset","response","fetch","headers","ok","errorText","text","Error","statusText","line","JSON","parse","error","console","message","promises","i","push","results","Promise","all","flat","handleStart","data","processGames","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","forEach","index","loadPgn","deleteComments","moves","history","valList","triangle","String","pgn","header","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","log","filteredDF","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","Math","ceil","filteredLongDFUnsorted","undefined","filteredLongDF","sort","a","b","sortedByLengthDF","uniqueLinesStr","nonSubsetLongDF","includes","groupedByLine","isNaN","Infinity","GameIDs","max","Object","values","NaN","groupedLongDF","sortedLongDF","LineProbability","categorizedLines","categorizeLines","findCommonLines","evaluateAndAnnotateGames","evaluatePosition","fen","resolve","onmessage","depthMatch","match","evalMatch","depth","parseInt","toFixed","createPgnFromGameIDs","gameIDs","id","join","handleLineClick","combinedPgn","localStorage","setItem","removeItem","location","href","minimalGroupedDF","evaluatedGames","maxPly","uniqueGameIDs","Set","gameID","chess2","load","preserveHeaders","move","origevaluation","parseFloat","setComment","processEvaluatedGames","evaluatedPGNs","commentsWithFens","getComments","comments","item","comment","definedDF","fullLinesStr","partialLinesStr","subsets","lineMoves","subset","slice","evalColumn","MistakeType","sortedLines","entries","toggleDropdown","dropdown","formatMovesWithNumbers","moveNumber","floor","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","htmlFor","value","count","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n    const [processing, setProcessing] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(null);\n    const [inputMethod, setInputMethod] = useState('pgn'); // Default to pgn\n\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n    \n    const fetchLichessGames = async (username, maxGames = 1000) => {\n        const fetchGamesBatch = async (username, offset) => {\n            try {\n                const response = await fetch(`https://lichess.org/api/games/user/${username}?max=100&offset=${offset}&moves=true&pgnInJson=true`, {\n                    headers: {\n                        'Accept': 'application/x-ndjson'\n                    }\n                });\n    \n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n                }\n    \n                const text = await response.text();\n                return text.split('\\n').filter(Boolean).map(line => JSON.parse(line));\n            } catch (error) {\n                console.error('Error fetching games batch:', error.message);\n                throw error;\n            }\n        };\n    \n        try {\n            const promises = [];\n            for (let i = 0; i < maxGames; i += 100) {\n                promises.push(fetchGamesBatch(username, i));\n            }\n    \n            const results = await Promise.all(promises);\n            return results.flat();\n        } catch (error) {\n            console.error('Error fetching games from Lichess:', error.message);\n            throw error;\n        }\n    };\n    \n    \n\n    const handleStart = async () => {\n        setProcessing(true);\n        let games = [];\n    \n        if (inputMethod === 'lichess') {\n            const data = await fetchLichessGames(opponentName);\n            let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n            games = rawGames.map(game => '[Event' + game.trim());\n        } else {\n            games = importedGames;\n        }\n    \n        processGames(games);\n    };\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            chess.deleteComments();\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n        console.log(\"minGames\");\n        console.log(minGames);\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n        console.log(\"filteredLongDFUnsorted\");\n        console.log(filteredLongDFUnsorted);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const sortedByLengthDF = filteredLongDFUnsorted.sort((a, b) => b.Line.length - a.Line.length);\n        console.log(\"sortedByLengthDF\");\n        console.log(sortedByLengthDF);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = sortedByLengthDF.filter(row => {\n            if(uniqueLinesStr.includes( \"//\"+row.Line)){\n                uniqueLinesStr += row.Line;\n                uniqueLinesStr += \"//\";\n                return false;}\n            else{\n                uniqueLinesStr += row.Line;\n                uniqueLinesStr += \"//\";\n                return true;\n            }\n        });\n\n        console.log(\"nonSubsetLongDF\");\n        console.log(nonSubsetLongDF);\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameID: row.GameID,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n        \n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n        \n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n        \n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n\n        evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n    };\n\n    const evaluatePosition = (fen) => {\n        return new Promise((resolve) => {\n            stockfish.postMessage(`position fen ${fen}`);\n            stockfish.postMessage(\"go depth 16\");\n\n            stockfish.onmessage = (event) => {\n                const line = event.data;\n                const depthMatch = line.match(/depth (\\d+)/);\n                const evalMatch = line.match(/score cp (-?\\d+)/);\n\n                if (depthMatch && evalMatch) {\n                    const depth = parseInt(depthMatch[1], 10);\n                    if (depth === 15) {\n                        const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n                        resolve(evaluation);\n                    }\n                }\n            };\n        });\n    };\n    const createPgnFromGameIDs = (gameIDs, pgnList) => {\n        return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n    };\n    \n    const handleLineClick = (gameIDs) => {\n        const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n    \n        // Store the combined PGN in localStorage\n        localStorage.setItem('combinedPgn', combinedPgn);\n    \n        // Clear imported games\n        localStorage.removeItem('importedGames');\n    \n        // Redirect to analysis board\n        window.location.href = '/analysis-board';\n    };\n    \n    \n    \n    \n    \n\n    const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n        const chess = new Chess();\n        const evaluatedGames = [];\n        const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n        console.log(\"maxPly\");\n        console.log(maxPly);\n\n        const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n        console.log(uniqueGameIDs);\n        for (let gameID = 0; gameID < pgnList.length; gameID++) {\n            if (uniqueGameIDs.includes(gameID)) {\n                const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n                chess.loadPgn(pgn);\n                const chess2 = new Chess();\n                chess2.loadPgn(pgn);\n                chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", { preserveHeaders: true });\n                const moves = chess.history();\n\n                for (let i = 0; i < maxPly && i < moves.length; i++) {\n                    chess2.move(moves[i]);\n                    const fen = chess2.fen();\n                    const origevaluation = await evaluatePosition(fen);\n                    const evaluation = i%2==0?String(parseFloat(origevaluation)*(-1)):String(parseFloat(origevaluation));\n\n                    chess2.setComment(evaluation);\n                }\n\n                evaluatedGames.push(chess2.pgn());\n            } else {\n                evaluatedGames.push(pgnList[gameID]);\n            }\n        }\n\n        processEvaluatedGames(evaluatedGames, maxPly);\n    };\n\n    const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n        chess.loadPgn(evaluatedPGNs[0]);\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n            const commentsWithFens = chess.getComments();\n            const comments = commentsWithFens.map(item => item.comment);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n            valList.push(parseFloat(comments[0]));\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < maxPly && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n                valList.push(parseFloat(comments[i]));\n            }\n            fullValList.push(valList);\n        });\n        console.log(\"fullValList\");\n        console.log(fullValList);\n\n        for (let j = 1; j <= maxPly; j++) {\n            initialColnames.push(\"Line\" + String(j));\n            initialColnames.push(\"EVAL\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < maxPly; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= maxPly; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= maxPly; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n        console.log(\"minGames\");\n        console.log(minGames);\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n        console.log(\"filteredLongDFUnsorted\");\n        console.log(filteredLongDFUnsorted);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const groupedByLine = filteredLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        \n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n        console.log(definedDF);\n \n        let fullLinesStr = \"//\";\n        let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n        const subsets = [];\n        const lineMoves = row.Line.split(\"*\").filter(Boolean);\n        \n// SUBSET CHECK\n        // Check if value already in partialLinesStr\n        if (partialLinesStr.includes(\"//\" + row.Line +\"//\")) {\n                return false;\n            }\n        \n\n\n        // SUPERSET CHECK\n        // Check if any subset is already in fullLinesStr\n\n        // Generate all possible subsets of the current line\n        for (let i = 1; i <= lineMoves.length; i++) {\n            const subset = lineMoves.slice(0, i).join(\"*\") + \"*\"; \n            if (fullLinesStr.includes(\"//\" + subset+ \"//\")) {\n                return false;\n            }\n            partialLinesStr += subset + \"//\";\n    };\n        fullLinesStr += row.Line+ \"//\";\n        return true;\n    });\n\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    \n        const categorizedLines = categorizeLines(nonSubsetLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n        setProcessing(false); // Stop processing\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = \"EVAL\";\n            const evaluation = row[evalColumn];\n    \n            if (opponentColor === \"Black\") {\n                if (evaluation >= 2) {\n                    row.MistakeType = \"Fatal Blunder\";\n                } else if (evaluation >= 1.0) {\n                    row.MistakeType = \"Major Mistake\";\n                } else if (evaluation >= 0.6) {\n                    row.MistakeType = \"Slight Inaccuracy\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            } else {\n                if (evaluation <= -2) {\n                    row.MistakeType = \"Fatal Blunder\";\n                } else if (evaluation <= -1.0) {\n                    row.MistakeType = \"Major Mistake\";\n                } else if (evaluation <= -0.6) {\n                    row.MistakeType = \"Slight Inaccuracy\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            }\n            \n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n    \n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    const toggleDropdown = (dropdown) => {\n        setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n    };\n    \n    const formatMovesWithNumbers = (line) => {\n        const moves = line.Line.split(\"*\").filter(Boolean);\n        return moves.map((move, index) => {\n            const moveNumber = Math.floor(index / 2) + 1;\n            return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n        }).join(\" \");\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/our-team\">Our Team</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <section className=\"hero3\">\n                    <h1 className=\"title\">Blunder Punisher</h1>\n                    <div className=\"form-container\">\n                    <div className=\"form-group\">\n    <button onClick={() => setInputMethod(inputMethod === 'pgn' ? 'lichess' : 'pgn')}>\n        {inputMethod === 'pgn' ? 'Switch to Lichess.org' : 'Switch to Game List (.pgn)'}\n    </button>\n</div>\n{inputMethod === 'pgn' ? (\n    <div className=\"form-group\">\n    <input type=\"file\" onChange={handleFileSelect} />\n    <label htmlFor=\"opponentName\">Opponent Name:</label>\n    <input \n        type=\"text\" \n        id=\"opponentName\" \n        value={opponentName} \n        onChange={(e) => setOpponentName(e.target.value)} \n    />\n</div>\n    \n) : (\n    <div className=\"form-group\">\n        <label htmlFor=\"lichessUsername\">Opponent Username:</label>\n        <input \n            type=\"text\" \n            id=\"lichessUsername\" \n            value={opponentName} \n            onChange={(e) => setOpponentName(e.target.value)} \n        />\n    </div>\n)}\n                        \n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentColor\">Opponent Color:</label>\n                            <select \n                                id=\"opponentColor\" \n                                value={opponentColor} \n                                onChange={(e) => setOpponentColor(e.target.value)}\n                            >\n                                <option value=\"White\">White</option>\n                                <option value=\"Black\">Black</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"precisionLevel\">Precision Level:</label>\n                            <select \n                                id=\"precisionLevel\" \n                                value={precisionLevel} \n                                onChange={(e) => setPrecisionLevel(e.target.value)}\n                            >\n                                <option value=\"Amateur/SemiPro\">Amateur/SemiPro (5s-1min)</option>\n                                <option value=\"Professional\">Professional (1min-10min)</option>\n                                <option value=\"GM\">GM (1min-30min)</option>\n                            </select>\n                        </div>\n                        <button onClick={handleStart}>Start</button>\n                        {processing && <p>Please wait, do not refresh or close the tab...</p>}\n                    </div>\n                    <p>Number of games in the file: {gamesCount}</p>\n                {processing ? (\n                    <div className=\"common-lines\">\n                        <h2>Most Common Lines</h2>\n                        <ul>\n                            {commonLines.map(([line, count], index) => (\n                                <li key={index}>{line} - {count}</li>\n                            ))}\n                        </ul>\n                    </div>\n                ) : (\n                    <div className=\"dropdown-container\">\n                        <div className=\"dropdown\">\n                            <button onClick={() => toggleDropdown('Fatal Blunders')}>\n                                Fatal Blunders: ({filteredData.filter(line => line.MistakeType === 'Fatal Blunder').length})\n                            </button>\n                            {activeDropdown === 'Fatal Blunders' && (\n                                <ul>\n                                    {filteredData.filter(line => line.MistakeType === 'Fatal Blunder').map((line, index) => (\n                                        <li key={index}>\n                                            <button onClick={() => handleLineClick(line.GameIDs)}>\n                                                {formatMovesWithNumbers(line)}\n                                            </button>\n                                        </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                        <div className=\"dropdown\">\n                            <button onClick={() => toggleDropdown('Major Mistakes')}>\n                                Major Mistakes: ({filteredData.filter(line => line.MistakeType === 'Major Mistake').length})\n                            </button>\n                            {activeDropdown === 'Major Mistakes' && (\n                                <ul>\n                                    {filteredData.filter(line => line.MistakeType === 'Major Mistake').map((line, index) => (\n                                        <li key={index}>\n                                            <button onClick={() => handleLineClick(line.GameIDs)}>\n                                                {formatMovesWithNumbers(line)}\n                                            </button>\n                                        </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                        <div className=\"dropdown\">\n                            <button onClick={() => toggleDropdown('Slight Inaccuracies')}>\n                                Slight Inaccuracies: ({filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').length})\n                            </button>\n                            {activeDropdown === 'Slight Inaccuracies' && (\n                                <ul>\n                                    {filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').map((line, index) => (\n                                        <li key={index}>\n                                            <button onClick={() => handleLineClick(line.GameIDs)}>\n                                                {formatMovesWithNumbers(line)}\n                                            </button>\n                                        </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                        </div>\n                    )}\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,cAAc;;AAErB;AACA,OAAOC,IAAI,MAAM,2BAA2B,CAAC,CAAC;AAC9C,OAAOC,SAAS,MAAM,gCAAgC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,SAAS,GAAGC,MAAM,CAACD,SAAS;AAElC,MAAME,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,OAAO,CAAC;EAC3D,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,iBAAiB,CAAC;EACvE,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACwC,cAAc,EAAEC,iBAAiB,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC0C,WAAW,EAAEC,cAAc,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAGvD,IAAI4C,SAAS,GAAG,OAAOpC,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC,CAAC,GAAG,IAAIqC,MAAM,CAAC,cAAc,CAAC;EAC1FD,SAAS,CAACE,WAAW,CAAC,KAAK,CAAC;EAE5B7C,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAACqB,UAAU,CAAC,CAAC;EAEjC,MAAMyB,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACF,IAAI,EAAE;IAEX,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACnB,MAAMC,OAAO,GAAGD,CAAC,CAACL,MAAM,CAACO,MAAM;MAC/B,IAAIC,QAAQ,GAAGF,OAAO,CAACG,KAAK,CAAC,WAAW,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;MACzD,IAAIC,KAAK,GAAGJ,QAAQ,CAACK,GAAG,CAACC,IAAI,IAAI,QAAQ,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MAExDpD,gBAAgB,CAACiD,KAAK,CAAC;MACvB/C,aAAa,CAAC+C,KAAK,CAACI,MAAM,CAAC;IAC/B,CAAC;IACDd,MAAM,CAACe,UAAU,CAAClB,IAAI,CAAC;EAC3B,CAAC;EAED,MAAMmB,iBAAiB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,GAAG,IAAI,KAAK;IAC3D,MAAMC,eAAe,GAAG,MAAAA,CAAOF,QAAQ,EAAEG,MAAM,KAAK;MAChD,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCL,QAAS,mBAAkBG,MAAO,4BAA2B,EAAE;UAC9HG,OAAO,EAAE;YACL,QAAQ,EAAE;UACd;QACJ,CAAC,CAAC;QAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UACd,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UACvC,MAAM,IAAIC,KAAK,CAAE,wBAAuBN,QAAQ,CAACO,UAAW,MAAKH,SAAU,EAAC,CAAC;QACjF;QAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,OAAOA,IAAI,CAACnB,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACE,GAAG,CAACkB,IAAI,IAAIC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC;MACzE,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACE,OAAO,CAAC;QAC3D,MAAMF,KAAK;MACf;IACJ,CAAC;IAED,IAAI;MACA,MAAMG,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,QAAQ,EAAEkB,CAAC,IAAI,GAAG,EAAE;QACpCD,QAAQ,CAACE,IAAI,CAAClB,eAAe,CAACF,QAAQ,EAAEmB,CAAC,CAAC,CAAC;MAC/C;MAEA,MAAME,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;MAC3C,OAAOG,OAAO,CAACG,IAAI,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACE,OAAO,CAAC;MAClE,MAAMF,KAAK;IACf;EACJ,CAAC;EAID,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5BvD,aAAa,CAAC,IAAI,CAAC;IACnB,IAAIuB,KAAK,GAAG,EAAE;IAEd,IAAIpB,WAAW,KAAK,SAAS,EAAE;MAC3B,MAAMqD,IAAI,GAAG,MAAM3B,iBAAiB,CAACpC,YAAY,CAAC;MAClD,IAAI0B,QAAQ,GAAGqC,IAAI,CAACpC,KAAK,CAAC,WAAW,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;MACtDC,KAAK,GAAGJ,QAAQ,CAACK,GAAG,CAACC,IAAI,IAAI,QAAQ,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IACxD,CAAC,MAAM;MACHH,KAAK,GAAGlD,aAAa;IACzB;IAEAoF,YAAY,CAAClC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMkC,YAAY,GAAIlC,KAAK,IAAK;IAC5B,MAAMmC,SAAS,GAAG,EAAE;IACpB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,eAAe,GAAG,EAAE;IAC1B,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,KAAK,GAAG,IAAI1G,KAAK,CAAC,CAAC;IAEzB2D,KAAK,CAACgD,OAAO,CAAC,CAAC9C,IAAI,EAAE+C,KAAK,KAAK;MAC3BF,KAAK,CAACG,OAAO,CAAChD,IAAI,CAAC;MACnB6C,KAAK,CAACI,cAAc,CAAC,CAAC;MACtB,IAAIC,KAAK,GAAGL,KAAK,CAACM,OAAO,CAAC,CAAC;MAC3BR,SAAS,CAAClB,IAAI,CAACyB,KAAK,CAAC;MAErB,MAAME,OAAO,GAAG,EAAE;MAClB,IAAIC,QAAQ,GAAGC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;MACrCE,OAAO,CAAC3B,IAAI,CAAC4B,QAAQ,CAAC;MAEtBT,OAAO,CAACnB,IAAI,CAACoB,KAAK,CAACU,GAAG,CAAC,CAAC,CAAC;MACzBtB,SAAS,CAACR,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MACvCtB,QAAQ,CAACT,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;MACrCrB,SAAS,CAACV,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MACvCpB,SAAS,CAACX,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MACvCnB,UAAU,CAACZ,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;MACzClB,QAAQ,CAACb,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;MACrCjB,YAAY,CAACd,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;MAC7ChB,YAAY,CAACf,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;MAE7C,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,IAAIA,CAAC,GAAG0B,KAAK,CAAChD,MAAM,EAAEsB,CAAC,EAAE,EAAE;QAC7C6B,QAAQ,IAAIC,MAAM,CAACJ,KAAK,CAAC1B,CAAC,CAAC,CAAC,GAAG,GAAG;QAClC4B,OAAO,CAAC3B,IAAI,CAAC4B,QAAQ,CAAC;MAC1B;MACAZ,WAAW,CAAChB,IAAI,CAAC2B,OAAO,CAAC;IAC7B,CAAC,CAAC;IAEF7F,aAAa,CAACqF,OAAO,CAAC,CAAC,CAAC;;IAExB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC1Bf,eAAe,CAACjB,IAAI,CAAC,MAAM,GAAG6B,MAAM,CAACG,CAAC,CAAC,CAAC;IAC5C;IAEA,MAAMC,SAAS,GAAGjB,WAAW,CAAC1C,GAAG,CAAC,CAAC4D,GAAG,EAAEZ,KAAK,MAAM;MAC/C,GAAGY,GAAG,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,EAAEtC,CAAC,MAAM;QAAE,GAAGqC,GAAG;QAAE,CAACnB,eAAe,CAAClB,CAAC,CAAC,GAAGsC;MAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC3EC,KAAK,EAAE9B,SAAS,CAACc,KAAK,CAAC;MACvBiB,IAAI,EAAE9B,QAAQ,CAACa,KAAK,CAAC;MACrBkB,KAAK,EAAE9B,SAAS,CAACY,KAAK,CAAC;MACvBmB,KAAK,EAAE9B,SAAS,CAACW,KAAK,CAAC;MACvBoB,YAAY,EAAE9B,UAAU,CAACU,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC;MACjDqB,IAAI,EAAE9B,QAAQ,CAACS,KAAK,CAAC;MACrBsB,QAAQ,EAAE9B,YAAY,CAACQ,KAAK,CAAC;MAC7BuB,QAAQ,EAAE9B,YAAY,CAACO,KAAK,CAAC;MAC7BwB,GAAG,EAAE3B,OAAO,CAACG,KAAK,CAAC;MACnByB,MAAM,EAAEzB;IACZ,CAAC,CAAC,CAAC;IACH1B,OAAO,CAACoD,GAAG,CAAC,WAAW,CAAC;IACxBpD,OAAO,CAACoD,GAAG,CAACf,SAAS,CAAC;IAEtB,MAAMgB,UAAU,GAAGhB,SAAS,CAAC9D,MAAM,CAAC+D,GAAG,IAAIA,GAAG,CAACzF,aAAa,CAAC,KAAKF,YAAY,CAAC;IAE/E,MAAM2G,SAAS,GAAGD,UAAU,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;MAC9CE,GAAG,CAACF,GAAG,CAACiB,KAAK,CAAC,GAAG,CAACf,GAAG,CAACF,GAAG,CAACiB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;MAC1C,OAAOf,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,MAAMgB,UAAU,GAAGH,UAAU,CAACxE,MAAM;IAEpCwE,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;MACtBA,GAAG,CAACmB,gBAAgB,GAAGH,SAAS,CAAChB,GAAG,CAACiB,KAAK,CAAC,GAAGC,UAAU;IAC5D,CAAC,CAAC;IAEF,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzBkD,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;QACtBA,GAAG,CAAE,cAAanC,CAAC,GAAG,CAAE,EAAC,CAAC,GAAGmC,GAAG,CAACQ,YAAY;MACjD,CAAC,CAAC;MAEF,MAAMY,QAAQ,GAAGL,UAAU,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;QAC7C,MAAMqB,GAAG,GAAI,GAAErB,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAE,IAAGmC,GAAG,CAAE,OAAMnC,CAAC,GAAG,CAAE,EAAC,CAAE,EAAC;QACvDqC,GAAG,CAACmB,GAAG,CAAC,GAAG,CAACnB,GAAG,CAACmB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9B,OAAOnB,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,MAAMoB,SAAS,GAAGP,UAAU,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;QAC9CE,GAAG,CAACF,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC,CAAC,GAAG,CAACqC,GAAG,CAACF,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QACtD,OAAOqC,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MAENa,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;QACtB,MAAMqB,GAAG,GAAI,GAAErB,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAE,IAAGmC,GAAG,CAAE,OAAMnC,CAAC,GAAG,CAAE,EAAC,CAAE,EAAC;QACvDmC,GAAG,CAAE,kBAAiBnC,CAAC,GAAG,CAAE,EAAC,CAAC,GAAGuD,QAAQ,CAACC,GAAG,CAAC,GAAGC,SAAS,CAACtB,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC,CAAC;MAC/E,CAAC,CAAC;IACN;IACAH,OAAO,CAACoD,GAAG,CAAC,YAAY,CAAC;IACzBpD,OAAO,CAACoD,GAAG,CAACC,UAAU,CAAC;IAEvBA,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;MACtB,IAAIuB,EAAE,GAAG,CAAC;MACV,IAAIC,EAAE,GAAG,CAAC;MACV,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACb0D,EAAE,IAAIvB,GAAG,CAAE,kBAAiBnC,CAAE,EAAC,CAAC,IAAI,CAAC;QACzC,CAAC,MAAM;UACH2D,EAAE,IAAIxB,GAAG,CAAE,kBAAiBnC,CAAE,EAAC,CAAC,IAAI,CAAC;QACzC;QACAmC,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC,GAAG0D,EAAE;QAClCvB,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC,GAAG2D,EAAE;MACtC;IACJ,CAAC,CAAC;IACF9D,OAAO,CAACoD,GAAG,CAAC,YAAY,CAAC;IACzBpD,OAAO,CAACoD,GAAG,CAACC,UAAU,CAAC;IAEvB,MAAMU,MAAM,GAAG,EAAE;IACjBV,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;MACtB,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC1B4D,MAAM,CAAC3D,IAAI,CAAC;UACR+C,MAAM,EAAEb,GAAG,CAACa,MAAM;UAClBa,GAAG,EAAE7D,CAAC;UACN8D,IAAI,EAAE3B,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC;UACrB+D,IAAI,EAAE5B,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC;UACrBgE,WAAW,EAAE7B,GAAG,CAAE,cAAanC,CAAE,EAAC,CAAC;UACnCiE,eAAe,EAAE9B,GAAG,CAAE,kBAAiBnC,CAAE,EAAC,CAAC;UAC3CkE,gBAAgB,EAAE/B,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC;UAC/CmE,gBAAgB,EAAEhC,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC;UAC/C+C,GAAG,EAAEZ,GAAG,CAACY;QACb,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACFlD,OAAO,CAACoD,GAAG,CAAC,QAAQ,CAAC;IACrBpD,OAAO,CAACoD,GAAG,CAACW,MAAM,CAAC;;IAEnB;IACA,MAAMQ,UAAU,GAAGR,MAAM,CAACxB,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;MAC3CE,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,GAAG,CAACzB,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MACxC,OAAOzB,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IAENuB,MAAM,CAACtC,OAAO,CAACa,GAAG,IAAI;MAClBA,GAAG,CAAC,QAAQ,CAAC,GAAGiC,UAAU,CAACjC,GAAG,CAAC2B,IAAI,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,IAAIO,QAAQ,GAAG,CAAC,CAAC,CAAC;IAClB,IAAIzH,cAAc,KAAK,iBAAiB,EAAE;MACtCyH,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAClB,UAAU,GAAG,EAAE,CAAC;IACzC,CAAC,MAAM,IAAIzG,cAAc,KAAK,cAAc,EAAE;MAC1CyH,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAClB,UAAU,GAAG,EAAE,CAAC;IACzC;IACAxD,OAAO,CAACoD,GAAG,CAAC,UAAU,CAAC;IACvBpD,OAAO,CAACoD,GAAG,CAACoB,QAAQ,CAAC;;IAErB;IACA,MAAMG,sBAAsB,GAAGZ,MAAM,CAACxF,MAAM,CAAC+D,GAAG,IAAIA,GAAG,CAAC2B,IAAI,KAAKW,SAAS,IAAItC,GAAG,CAAC,QAAQ,CAAC,GAAGkC,QAAQ,CAAC;IACvGxE,OAAO,CAACoD,GAAG,CAAC,wBAAwB,CAAC;IACrCpD,OAAO,CAACoD,GAAG,CAACuB,sBAAsB,CAAC;IACnC,MAAME,cAAc,GAAGF,sBAAsB,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChB,GAAG,GAAGe,CAAC,CAACf,GAAG,CAAC;IAC3EhE,OAAO,CAACoD,GAAG,CAAC,gBAAgB,CAAC;IAC7BpD,OAAO,CAACoD,GAAG,CAACyB,cAAc,CAAC;IAE3B,MAAMI,gBAAgB,GAAGN,sBAAsB,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACf,IAAI,CAACpF,MAAM,GAAGkG,CAAC,CAACd,IAAI,CAACpF,MAAM,CAAC;IAC7FmB,OAAO,CAACoD,GAAG,CAAC,kBAAkB,CAAC;IAC/BpD,OAAO,CAACoD,GAAG,CAAC6B,gBAAgB,CAAC;;IAE7B;IACA,IAAIC,cAAc,GAAG,IAAI;;IAEzB;IACA,MAAMC,eAAe,GAAGF,gBAAgB,CAAC1G,MAAM,CAAC+D,GAAG,IAAI;MACnD,IAAG4C,cAAc,CAACE,QAAQ,CAAE,IAAI,GAAC9C,GAAG,CAAC2B,IAAI,CAAC,EAAC;QACvCiB,cAAc,IAAI5C,GAAG,CAAC2B,IAAI;QAC1BiB,cAAc,IAAI,IAAI;QACtB,OAAO,KAAK;MAAC,CAAC,MACd;QACAA,cAAc,IAAI5C,GAAG,CAAC2B,IAAI;QAC1BiB,cAAc,IAAI,IAAI;QACtB,OAAO,IAAI;MACf;IACJ,CAAC,CAAC;IAEFlF,OAAO,CAACoD,GAAG,CAAC,iBAAiB,CAAC;IAC9BpD,OAAO,CAACoD,GAAG,CAAC+B,eAAe,CAAC;IAE5B,MAAME,aAAa,GAAGF,eAAe,CAAC5C,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;MACvD,IAAI,CAACE,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,EAAE;QAChBzB,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,GAAG;UACZA,IAAI,EAAE3B,GAAG,CAAC2B,IAAI;UACdC,IAAI,EAAE,CAACoB,KAAK,CAAChD,GAAG,CAAC4B,IAAI,CAAC,GAAG5B,GAAG,CAAC4B,IAAI,GAAG,CAACqB,QAAQ;UAC7CvB,GAAG,EAAE1B,GAAG,CAAC0B,GAAG;UACZG,WAAW,EAAE7B,GAAG,CAAC6B,WAAW;UAC5BG,gBAAgB,EAAEhC,GAAG,CAACgC,gBAAgB;UACtCD,gBAAgB,EAAE/B,GAAG,CAAC+B,gBAAgB;UACtClB,MAAM,EAAEb,GAAG,CAACa,MAAM;UAClBqC,OAAO,EAAE,CAAClD,GAAG,CAACa,MAAM;QACxB,CAAC;MACL,CAAC,MAAM;QACHX,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACC,IAAI,GAAGO,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACC,IAAI,EAAE,CAACoB,KAAK,CAAChD,GAAG,CAAC4B,IAAI,CAAC,GAAG5B,GAAG,CAAC4B,IAAI,GAAG,CAACqB,QAAQ,CAAC;QAC1F/C,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACD,GAAG,GAAGS,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACD,GAAG,EAAE1B,GAAG,CAAC0B,GAAG,CAAC;QACxDxB,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACE,WAAW,GAAGM,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACE,WAAW,EAAE7B,GAAG,CAAC6B,WAAW,CAAC;QAChF3B,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACK,gBAAgB,GAAGG,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACK,gBAAgB,EAAEhC,GAAG,CAACgC,gBAAgB,CAAC;QAC/F9B,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACI,gBAAgB,GAAGI,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACI,gBAAgB,EAAE/B,GAAG,CAAC+B,gBAAgB,CAAC;QAC/F7B,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACd,MAAM,GAAGsB,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACd,MAAM,EAAEb,GAAG,CAACa,MAAM,CAAC;QACjEX,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACuB,OAAO,CAACpF,IAAI,CAACkC,GAAG,CAACa,MAAM,CAAC;MAC1C;MACA,OAAOX,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEN;IACAkD,MAAM,CAACC,MAAM,CAACN,aAAa,CAAC,CAAC5D,OAAO,CAACa,GAAG,IAAI;MACxC,IAAIA,GAAG,CAAC4B,IAAI,KAAK,CAACqB,QAAQ,EAAE;QACxBjD,GAAG,CAAC4B,IAAI,GAAG0B,GAAG;MAClB;IACJ,CAAC,CAAC;IACF5F,OAAO,CAACoD,GAAG,CAAC,eAAe,CAAC;IAC5BpD,OAAO,CAACoD,GAAG,CAACiC,aAAa,CAAC;;IAE1B;IACA,MAAMQ,aAAa,GAAGH,MAAM,CAACC,MAAM,CAACN,aAAa,CAAC;IAClD,MAAMS,YAAY,GAAGD,aAAa,CAACf,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC9C,IAAInI,aAAa,KAAK,OAAO,EAAE;QAC3B,OAAOmI,CAAC,CAACd,IAAI,GAAGa,CAAC,CAACb,IAAI;MAC1B,CAAC,MAAM;QACH,OAAOa,CAAC,CAACb,IAAI,GAAGc,CAAC,CAACd,IAAI;MAC1B;IACJ,CAAC,CAAC;;IAEF;IACA4B,YAAY,CAACrE,OAAO,CAACa,GAAG,IAAI;MACxB,IAAIzF,aAAa,KAAK,OAAO,EAAE;QAC3ByF,GAAG,CAACyD,eAAe,GAAGzD,GAAG,CAACgC,gBAAgB;QAC1C,OAAOhC,GAAG,CAAC+B,gBAAgB;QAC3B,OAAO/B,GAAG,CAACgC,gBAAgB;MAC/B,CAAC,MAAM;QACHhC,GAAG,CAACyD,eAAe,GAAGzD,GAAG,CAAC+B,gBAAgB;QAC1C,OAAO/B,GAAG,CAACgC,gBAAgB;QAC3B,OAAOhC,GAAG,CAAC+B,gBAAgB;MAC/B;IACJ,CAAC,CAAC;IAEFrE,OAAO,CAACoD,GAAG,CAAC,cAAc,CAAC;IAC3BpD,OAAO,CAACoD,GAAG,CAAC0C,YAAY,CAAC;IAEzB,MAAME,gBAAgB,GAAGC,eAAe,CAACH,YAAY,EAAEjJ,aAAa,CAAC;IACrEf,eAAe,CAACkK,gBAAgB,CAAC;IAEjC,MAAMrK,WAAW,GAAGuK,eAAe,CAAC5E,SAAS,CAAC;IAC9C1F,cAAc,CAACD,WAAW,CAAC;IAE3BwK,wBAAwB,CAACL,YAAY,EAAEvE,OAAO,CAAC,CAAC,CAAC;EACrD,CAAC;EAED,MAAM6E,gBAAgB,GAAIC,GAAG,IAAK;IAC9B,OAAO,IAAI/F,OAAO,CAAEgG,OAAO,IAAK;MAC5B/I,SAAS,CAACE,WAAW,CAAE,gBAAe4I,GAAI,EAAC,CAAC;MAC5C9I,SAAS,CAACE,WAAW,CAAC,aAAa,CAAC;MAEpCF,SAAS,CAACgJ,SAAS,GAAI5I,KAAK,IAAK;QAC7B,MAAMiC,IAAI,GAAGjC,KAAK,CAAC+C,IAAI;QACvB,MAAM8F,UAAU,GAAG5G,IAAI,CAAC6G,KAAK,CAAC,aAAa,CAAC;QAC5C,MAAMC,SAAS,GAAG9G,IAAI,CAAC6G,KAAK,CAAC,kBAAkB,CAAC;QAEhD,IAAID,UAAU,IAAIE,SAAS,EAAE;UACzB,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UACzC,IAAIG,KAAK,KAAK,EAAE,EAAE;YACd,MAAMxK,UAAU,GAAG,CAACyK,QAAQ,CAACF,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,EAAEG,OAAO,CAAC,CAAC,CAAC;YAChEP,OAAO,CAACnK,UAAU,CAAC;UACvB;QACJ;MACJ,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EACD,MAAM2K,oBAAoB,GAAGA,CAACC,OAAO,EAAExF,OAAO,KAAK;IAC/C,OAAOwF,OAAO,CAACrI,GAAG,CAACsI,EAAE,IAAIzF,OAAO,CAACyF,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;EACtD,CAAC;EAED,MAAMC,eAAe,GAAIH,OAAO,IAAK;IACjC,MAAMI,WAAW,GAAGL,oBAAoB,CAACC,OAAO,EAAE9K,UAAU,CAAC;;IAE7D;IACAmL,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;;IAEhD;IACAC,YAAY,CAACE,UAAU,CAAC,eAAe,CAAC;;IAExC;IACAlM,MAAM,CAACmM,QAAQ,CAACC,IAAI,GAAG,iBAAiB;EAC5C,CAAC;EAOD,MAAMrB,wBAAwB,GAAG,MAAAA,CAAOsB,gBAAgB,EAAElG,OAAO,KAAK;IAClE,MAAMC,KAAK,GAAG,IAAI1G,KAAK,CAAC,CAAC;IACzB,MAAM4M,cAAc,GAAG,EAAE;IACzB,MAAMC,MAAM,GAAGlD,IAAI,CAACgB,GAAG,CAAC,GAAGgC,gBAAgB,CAAC/I,GAAG,CAAC4D,GAAG,IAAIA,GAAG,CAAC0B,GAAG,CAAC,CAAC;IAChEhE,OAAO,CAACoD,GAAG,CAAC,QAAQ,CAAC;IACrBpD,OAAO,CAACoD,GAAG,CAACuE,MAAM,CAAC;IAEnB,MAAMC,aAAa,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACJ,gBAAgB,CAAC/I,GAAG,CAAC4D,GAAG,IAAIA,GAAG,CAACa,MAAM,CAAC,CAAC,CAAC;IAC3EnD,OAAO,CAACoD,GAAG,CAACwE,aAAa,CAAC;IAC1B,KAAK,IAAIE,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGvG,OAAO,CAAC1C,MAAM,EAAEiJ,MAAM,EAAE,EAAE;MACpD,IAAIF,aAAa,CAACxC,QAAQ,CAAC0C,MAAM,CAAC,EAAE;QAChC,MAAM5F,GAAG,GAAGX,OAAO,CAACuG,MAAM,CAAC,CAAC,CAAC;QAC7BtG,KAAK,CAACG,OAAO,CAACO,GAAG,CAAC;QAClB,MAAM6F,MAAM,GAAG,IAAIjN,KAAK,CAAC,CAAC;QAC1BiN,MAAM,CAACpG,OAAO,CAACO,GAAG,CAAC;QACnB6F,MAAM,CAACC,IAAI,CAAC,0DAA0D,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAC,CAAC;QAClG,MAAMpG,KAAK,GAAGL,KAAK,CAACM,OAAO,CAAC,CAAC;QAE7B,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwH,MAAM,IAAIxH,CAAC,GAAG0B,KAAK,CAAChD,MAAM,EAAEsB,CAAC,EAAE,EAAE;UACjD4H,MAAM,CAACG,IAAI,CAACrG,KAAK,CAAC1B,CAAC,CAAC,CAAC;UACrB,MAAMkG,GAAG,GAAG0B,MAAM,CAAC1B,GAAG,CAAC,CAAC;UACxB,MAAM8B,cAAc,GAAG,MAAM/B,gBAAgB,CAACC,GAAG,CAAC;UAClD,MAAMlK,UAAU,GAAGgE,CAAC,GAAC,CAAC,IAAE,CAAC,GAAC8B,MAAM,CAACmG,UAAU,CAACD,cAAc,CAAC,GAAE,CAAC,CAAE,CAAC,GAAClG,MAAM,CAACmG,UAAU,CAACD,cAAc,CAAC,CAAC;UAEpGJ,MAAM,CAACM,UAAU,CAAClM,UAAU,CAAC;QACjC;QAEAuL,cAAc,CAACtH,IAAI,CAAC2H,MAAM,CAAC7F,GAAG,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACHwF,cAAc,CAACtH,IAAI,CAACmB,OAAO,CAACuG,MAAM,CAAC,CAAC;MACxC;IACJ;IAEAQ,qBAAqB,CAACZ,cAAc,EAAEC,MAAM,CAAC;EACjD,CAAC;EAED,MAAMW,qBAAqB,GAAGA,CAACC,aAAa,EAAEZ,MAAM,KAAK;IACrD,MAAMnG,KAAK,GAAG,IAAI1G,KAAK,CAAC,CAAC;IACzB,MAAMwG,SAAS,GAAG,EAAE;IACpB,MAAMF,WAAW,GAAG,EAAE;IACtB,MAAMR,SAAS,GAAG,EAAE;IACpB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAME,eAAe,GAAG,EAAE;IAC1BG,KAAK,CAACG,OAAO,CAAC4G,aAAa,CAAC,CAAC,CAAC,CAAC;IAE/BA,aAAa,CAAC9G,OAAO,CAAC,CAACS,GAAG,EAAER,KAAK,KAAK;MAClCF,KAAK,CAACG,OAAO,CAACO,GAAG,CAAC;MAClB,IAAIL,KAAK,GAAGL,KAAK,CAACM,OAAO,CAAC,CAAC;MAC3BR,SAAS,CAAClB,IAAI,CAACyB,KAAK,CAAC;MACrB,MAAM2G,gBAAgB,GAAGhH,KAAK,CAACiH,WAAW,CAAC,CAAC;MAC5C,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC9J,GAAG,CAACiK,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC;MAE3D,MAAM7G,OAAO,GAAG,EAAE;MAClB,IAAIC,QAAQ,GAAGC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;MACrCE,OAAO,CAAC3B,IAAI,CAAC4B,QAAQ,CAAC;MACtBD,OAAO,CAAC3B,IAAI,CAACgI,UAAU,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MAErC9H,SAAS,CAACR,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MACvCtB,QAAQ,CAACT,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;MACrCrB,SAAS,CAACV,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MACvCpB,SAAS,CAACX,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;MACvCnB,UAAU,CAACZ,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;MACzClB,QAAQ,CAACb,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;MACrCjB,YAAY,CAACd,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;MAC7ChB,YAAY,CAACf,IAAI,CAACoB,KAAK,CAACW,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;MAE7C,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwH,MAAM,IAAIxH,CAAC,GAAG0B,KAAK,CAAChD,MAAM,EAAEsB,CAAC,EAAE,EAAE;QACjD6B,QAAQ,IAAIC,MAAM,CAACJ,KAAK,CAAC1B,CAAC,CAAC,CAAC,GAAG,GAAG;QAClC4B,OAAO,CAAC3B,IAAI,CAAC4B,QAAQ,CAAC;QACtBD,OAAO,CAAC3B,IAAI,CAACgI,UAAU,CAACM,QAAQ,CAACvI,CAAC,CAAC,CAAC,CAAC;MACzC;MACAiB,WAAW,CAAChB,IAAI,CAAC2B,OAAO,CAAC;IAC7B,CAAC,CAAC;IACF/B,OAAO,CAACoD,GAAG,CAAC,aAAa,CAAC;IAC1BpD,OAAO,CAACoD,GAAG,CAAChC,WAAW,CAAC;IAExB,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIuF,MAAM,EAAEvF,CAAC,EAAE,EAAE;MAC9Bf,eAAe,CAACjB,IAAI,CAAC,MAAM,GAAG6B,MAAM,CAACG,CAAC,CAAC,CAAC;MACxCf,eAAe,CAACjB,IAAI,CAAC,MAAM,GAAG6B,MAAM,CAACG,CAAC,CAAC,CAAC;IAC5C;IAEA,MAAMC,SAAS,GAAGjB,WAAW,CAAC1C,GAAG,CAAC,CAAC4D,GAAG,EAAEZ,KAAK,MAAM;MAC/C,GAAGY,GAAG,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,EAAEtC,CAAC,MAAM;QAAE,GAAGqC,GAAG;QAAE,CAACnB,eAAe,CAAClB,CAAC,CAAC,GAAGsC;MAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC3EC,KAAK,EAAE9B,SAAS,CAACc,KAAK,CAAC;MACvBiB,IAAI,EAAE9B,QAAQ,CAACa,KAAK,CAAC;MACrBkB,KAAK,EAAE9B,SAAS,CAACY,KAAK,CAAC;MACvBmB,KAAK,EAAE9B,SAAS,CAACW,KAAK,CAAC;MACvBoB,YAAY,EAAE9B,UAAU,CAACU,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC;MACjDqB,IAAI,EAAE9B,QAAQ,CAACS,KAAK,CAAC;MACrBsB,QAAQ,EAAE9B,YAAY,CAACQ,KAAK,CAAC;MAC7BuB,QAAQ,EAAE9B,YAAY,CAACO,KAAK,CAAC;MAC7ByB,MAAM,EAAEzB;IACZ,CAAC,CAAC,CAAC;IAEH1B,OAAO,CAACoD,GAAG,CAAC,WAAW,CAAC;IACxBpD,OAAO,CAACoD,GAAG,CAACf,SAAS,CAAC;IAEtB,MAAMgB,UAAU,GAAGhB,SAAS,CAAC9D,MAAM,CAAC+D,GAAG,IAAIA,GAAG,CAACzF,aAAa,CAAC,KAAKF,YAAY,CAAC;IAE/E,MAAM2G,SAAS,GAAGD,UAAU,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;MAC9CE,GAAG,CAACF,GAAG,CAACiB,KAAK,CAAC,GAAG,CAACf,GAAG,CAACF,GAAG,CAACiB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;MAC1C,OAAOf,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,MAAMgB,UAAU,GAAGH,UAAU,CAACxE,MAAM;IAEpCwE,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;MACtBA,GAAG,CAACmB,gBAAgB,GAAGH,SAAS,CAAChB,GAAG,CAACiB,KAAK,CAAC,GAAGC,UAAU;IAC5D,CAAC,CAAC;IAEF,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwH,MAAM,EAAExH,CAAC,EAAE,EAAE;MAC7BkD,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;QACtBA,GAAG,CAAE,cAAanC,CAAC,GAAG,CAAE,EAAC,CAAC,GAAGmC,GAAG,CAACQ,YAAY;MACjD,CAAC,CAAC;MAEF,MAAMY,QAAQ,GAAGL,UAAU,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;QAC7C,MAAMqB,GAAG,GAAI,GAAErB,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAE,IAAGmC,GAAG,CAAE,OAAMnC,CAAC,GAAG,CAAE,EAAC,CAAE,EAAC;QACvDqC,GAAG,CAACmB,GAAG,CAAC,GAAG,CAACnB,GAAG,CAACmB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9B,OAAOnB,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,MAAMoB,SAAS,GAAGP,UAAU,CAACd,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;QAC9CE,GAAG,CAACF,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC,CAAC,GAAG,CAACqC,GAAG,CAACF,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QACtD,OAAOqC,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MAENa,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;QACtB,MAAMqB,GAAG,GAAI,GAAErB,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAE,IAAGmC,GAAG,CAAE,OAAMnC,CAAC,GAAG,CAAE,EAAC,CAAE,EAAC;QACvDmC,GAAG,CAAE,kBAAiBnC,CAAC,GAAG,CAAE,EAAC,CAAC,GAAGuD,QAAQ,CAACC,GAAG,CAAC,GAAGC,SAAS,CAACtB,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC,CAAC;MAC/E,CAAC,CAAC;IACN;IAEAkD,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;MACtB,IAAIuB,EAAE,GAAG,CAAC;MACV,IAAIC,EAAE,GAAG,CAAC;MACV,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIwH,MAAM,EAAExH,CAAC,EAAE,EAAE;QAC9B,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACb0D,EAAE,IAAIvB,GAAG,CAAE,kBAAiBnC,CAAE,EAAC,CAAC,IAAI,CAAC;QACzC,CAAC,MAAM;UACH2D,EAAE,IAAIxB,GAAG,CAAE,kBAAiBnC,CAAE,EAAC,CAAC,IAAI,CAAC;QACzC;QACAmC,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC,GAAG0D,EAAE;QAClCvB,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC,GAAG2D,EAAE;MACtC;IACJ,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,EAAE;IACjBV,UAAU,CAAC5B,OAAO,CAACa,GAAG,IAAI;MACtB,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIwH,MAAM,EAAExH,CAAC,EAAE,EAAE;QAC9B4D,MAAM,CAAC3D,IAAI,CAAC;UACR+C,MAAM,EAAEb,GAAG,CAACa,MAAM;UAClBa,GAAG,EAAE7D,CAAC;UACN8D,IAAI,EAAE3B,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC;UACrB+D,IAAI,EAAE5B,GAAG,CAAE,OAAMnC,CAAE,EAAC,CAAC;UACrBgE,WAAW,EAAE7B,GAAG,CAAE,cAAanC,CAAE,EAAC,CAAC;UACnCiE,eAAe,EAAE9B,GAAG,CAAE,kBAAiBnC,CAAE,EAAC,CAAC;UAC3CkE,gBAAgB,EAAE/B,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC;UAC/CmE,gBAAgB,EAAEhC,GAAG,CAAE,qBAAoBnC,CAAE,EAAC,CAAC;UAC/C+C,GAAG,EAAEZ,GAAG,CAACY;QACb,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IAEFlD,OAAO,CAACoD,GAAG,CAAC,QAAQ,CAAC;IACrBpD,OAAO,CAACoD,GAAG,CAACW,MAAM,CAAC;;IAEnB;IACA,MAAMQ,UAAU,GAAGR,MAAM,CAACxB,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;MAC3CE,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,GAAG,CAACzB,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MACxC,OAAOzB,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IAENuB,MAAM,CAACtC,OAAO,CAACa,GAAG,IAAI;MAClBA,GAAG,CAAC,QAAQ,CAAC,GAAGiC,UAAU,CAACjC,GAAG,CAAC2B,IAAI,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,IAAIO,QAAQ,GAAG,CAAC,CAAC,CAAC;IAClB,IAAIzH,cAAc,KAAK,iBAAiB,EAAE;MACtCyH,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAClB,UAAU,GAAG,EAAE,CAAC;IACzC,CAAC,MAAM,IAAIzG,cAAc,KAAK,cAAc,EAAE;MAC1CyH,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAClB,UAAU,GAAG,EAAE,CAAC;IACzC;IACAxD,OAAO,CAACoD,GAAG,CAAC,UAAU,CAAC;IACvBpD,OAAO,CAACoD,GAAG,CAACoB,QAAQ,CAAC;;IAErB;IACA,MAAMG,sBAAsB,GAAGZ,MAAM,CAACxF,MAAM,CAAC+D,GAAG,IAAIA,GAAG,CAAC,QAAQ,CAAC,GAAGkC,QAAQ,CAAC;IAC7ExE,OAAO,CAACoD,GAAG,CAAC,wBAAwB,CAAC;IACrCpD,OAAO,CAACoD,GAAG,CAACuB,sBAAsB,CAAC;IACnC,MAAME,cAAc,GAAGF,sBAAsB,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChB,GAAG,GAAGe,CAAC,CAACf,GAAG,CAAC;IAC3EhE,OAAO,CAACoD,GAAG,CAAC,gBAAgB,CAAC;IAC7BpD,OAAO,CAACoD,GAAG,CAACyB,cAAc,CAAC;IAE3B,MAAMQ,aAAa,GAAGR,cAAc,CAACtC,MAAM,CAAC,CAACC,GAAG,EAAEF,GAAG,KAAK;MACtD,IAAI,CAACE,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,EAAE;QAChBzB,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,GAAG;UACZA,IAAI,EAAE3B,GAAG,CAAC2B,IAAI;UACdC,IAAI,EAAE,CAACoB,KAAK,CAAChD,GAAG,CAAC4B,IAAI,CAAC,GAAG5B,GAAG,CAAC4B,IAAI,GAAG,CAACqB,QAAQ;UAC7CvB,GAAG,EAAE1B,GAAG,CAAC0B,GAAG;UACZG,WAAW,EAAE7B,GAAG,CAAC6B,WAAW;UAC5BG,gBAAgB,EAAEhC,GAAG,CAACgC,gBAAgB;UACtCD,gBAAgB,EAAE/B,GAAG,CAAC+B,gBAAgB;UACtCmB,OAAO,EAAE,CAAClD,GAAG,CAACa,MAAM;QACxB,CAAC;MACL,CAAC,MAAM;QACHX,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACC,IAAI,GAAGO,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACC,IAAI,EAAE,CAACoB,KAAK,CAAChD,GAAG,CAAC4B,IAAI,CAAC,GAAG5B,GAAG,CAAC4B,IAAI,GAAG,CAACqB,QAAQ,CAAC;QAC1F/C,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACD,GAAG,GAAGS,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACD,GAAG,EAAE1B,GAAG,CAAC0B,GAAG,CAAC;QACxDxB,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACE,WAAW,GAAGM,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACE,WAAW,EAAE7B,GAAG,CAAC6B,WAAW,CAAC;QAChF3B,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACK,gBAAgB,GAAGG,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACK,gBAAgB,EAAEhC,GAAG,CAACgC,gBAAgB,CAAC;QAC/F9B,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACI,gBAAgB,GAAGI,IAAI,CAACgB,GAAG,CAACjD,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACI,gBAAgB,EAAE/B,GAAG,CAAC+B,gBAAgB,CAAC;QAC/F7B,GAAG,CAACF,GAAG,CAAC2B,IAAI,CAAC,CAACuB,OAAO,CAACpF,IAAI,CAACkC,GAAG,CAACa,MAAM,CAAC;MAC1C;MACA,OAAOX,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEN;IACAkD,MAAM,CAACC,MAAM,CAACN,aAAa,CAAC,CAAC5D,OAAO,CAACa,GAAG,IAAI;MACxC,IAAIA,GAAG,CAAC4B,IAAI,KAAK,CAACqB,QAAQ,EAAE;QACxBjD,GAAG,CAAC4B,IAAI,GAAG0B,GAAG;MAClB;IACJ,CAAC,CAAC;IAEF5F,OAAO,CAACoD,GAAG,CAAC,eAAe,CAAC;IAC5BpD,OAAO,CAACoD,GAAG,CAACiC,aAAa,CAAC;;IAE1B;IACA,MAAMQ,aAAa,GAAGH,MAAM,CAACC,MAAM,CAACN,aAAa,CAAC;IAClD,MAAMS,YAAY,GAAGD,aAAa,CAACf,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC9C,IAAInI,aAAa,KAAK,OAAO,EAAE;QAC3B,OAAOmI,CAAC,CAACd,IAAI,GAAGa,CAAC,CAACb,IAAI;MAC1B,CAAC,MAAM;QACH,OAAOa,CAAC,CAACb,IAAI,GAAGc,CAAC,CAACd,IAAI;MAC1B;IACJ,CAAC,CAAC;;IAEF;IACA4B,YAAY,CAACrE,OAAO,CAACa,GAAG,IAAI;MACxB,IAAIzF,aAAa,KAAK,OAAO,EAAE;QAC3ByF,GAAG,CAACyD,eAAe,GAAGzD,GAAG,CAACgC,gBAAgB;QAC1C,OAAOhC,GAAG,CAAC+B,gBAAgB;QAC3B,OAAO/B,GAAG,CAACgC,gBAAgB;MAC/B,CAAC,MAAM;QACHhC,GAAG,CAACyD,eAAe,GAAGzD,GAAG,CAAC+B,gBAAgB;QAC1C,OAAO/B,GAAG,CAACgC,gBAAgB;QAC3B,OAAOhC,GAAG,CAAC+B,gBAAgB;MAC/B;IACJ,CAAC,CAAC;IAEFrE,OAAO,CAACoD,GAAG,CAAC,cAAc,CAAC;IAC3BpD,OAAO,CAACoD,GAAG,CAAC0C,YAAY,CAAC;IAG7B,MAAM+C,SAAS,GAAG/C,YAAY,CAACvH,MAAM,CAAC+D,GAAG,IAAIA,GAAG,CAAC2B,IAAI,KAAKW,SAAS,CAAC;IACpE5E,OAAO,CAACoD,GAAG,CAAC,WAAW,CAAC;IACpBpD,OAAO,CAACoD,GAAG,CAACyF,SAAS,CAAC;IAEtB,IAAIC,YAAY,GAAG,IAAI;IACvB,IAAIC,eAAe,GAAG,IAAI;IAC9B,MAAM5D,eAAe,GAAG0D,SAAS,CAACtK,MAAM,CAAC+D,GAAG,IAAI;MAC5C,MAAM0G,OAAO,GAAG,EAAE;MAClB,MAAMC,SAAS,GAAG3G,GAAG,CAAC2B,IAAI,CAAC3F,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;;MAE7D;MACQ;MACA,IAAIuK,eAAe,CAAC3D,QAAQ,CAAC,IAAI,GAAG9C,GAAG,CAAC2B,IAAI,GAAE,IAAI,CAAC,EAAE;QAC7C,OAAO,KAAK;MAChB;;MAIJ;MACA;;MAEA;MACA,KAAK,IAAI9D,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI8I,SAAS,CAACpK,MAAM,EAAEsB,CAAC,EAAE,EAAE;QACxC,MAAM+I,MAAM,GAAGD,SAAS,CAACE,KAAK,CAAC,CAAC,EAAEhJ,CAAC,CAAC,CAAC8G,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;QACpD,IAAI6B,YAAY,CAAC1D,QAAQ,CAAC,IAAI,GAAG8D,MAAM,GAAE,IAAI,CAAC,EAAE;UAC5C,OAAO,KAAK;QAChB;QACAH,eAAe,IAAIG,MAAM,GAAG,IAAI;MACxC;MAAC;MACGJ,YAAY,IAAIxG,GAAG,CAAC2B,IAAI,GAAE,IAAI;MAC9B,OAAO,IAAI;IACf,CAAC,CAAC;IAEFjE,OAAO,CAACoD,GAAG,CAAC,iBAAiB,CAAC;IAC9BpD,OAAO,CAACoD,GAAG,CAAC+B,eAAe,CAAC;IAExB,MAAMa,gBAAgB,GAAGC,eAAe,CAACd,eAAe,EAAEtI,aAAa,CAAC;IACxEf,eAAe,CAACkK,gBAAgB,CAAC;IAEjC,MAAMrK,WAAW,GAAGuK,eAAe,CAAC5E,SAAS,CAAC;IAC9C1F,cAAc,CAACD,WAAW,CAAC;IAC3BuB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,MAAM+I,eAAe,GAAGA,CAAClK,WAAW,EAAEc,aAAa,KAAK;IACpD,OAAOd,WAAW,CAAC2C,GAAG,CAAC4D,GAAG,IAAI;MAC1B,MAAM8G,UAAU,GAAG,MAAM;MACzB,MAAMjN,UAAU,GAAGmG,GAAG,CAAC8G,UAAU,CAAC;MAElC,IAAIvM,aAAa,KAAK,OAAO,EAAE;QAC3B,IAAIV,UAAU,IAAI,CAAC,EAAE;UACjBmG,GAAG,CAAC+G,WAAW,GAAG,eAAe;QACrC,CAAC,MAAM,IAAIlN,UAAU,IAAI,GAAG,EAAE;UAC1BmG,GAAG,CAAC+G,WAAW,GAAG,eAAe;QACrC,CAAC,MAAM,IAAIlN,UAAU,IAAI,GAAG,EAAE;UAC1BmG,GAAG,CAAC+G,WAAW,GAAG,mBAAmB;QACzC,CAAC,MAAM;UACH/G,GAAG,CAAC+G,WAAW,GAAG,MAAM;QAC5B;MACJ,CAAC,MAAM;QACH,IAAIlN,UAAU,IAAI,CAAC,CAAC,EAAE;UAClBmG,GAAG,CAAC+G,WAAW,GAAG,eAAe;QACrC,CAAC,MAAM,IAAIlN,UAAU,IAAI,CAAC,GAAG,EAAE;UAC3BmG,GAAG,CAAC+G,WAAW,GAAG,eAAe;QACrC,CAAC,MAAM,IAAIlN,UAAU,IAAI,CAAC,GAAG,EAAE;UAC3BmG,GAAG,CAAC+G,WAAW,GAAG,mBAAmB;QACzC,CAAC,MAAM;UACH/G,GAAG,CAAC+G,WAAW,GAAG,MAAM;QAC5B;MACJ;MAEA,OAAO/G,GAAG;IACd,CAAC,CAAC,CAAC/D,MAAM,CAAC+D,GAAG,IAAIA,GAAG,CAAC+G,WAAW,KAAK,MAAM,IAAI/G,GAAG,CAACyD,eAAe,GAAG,GAAG,CAAC;EAC7E,CAAC;EAGD,MAAMG,eAAe,GAAI5E,SAAS,IAAK;IACnC,MAAMiD,UAAU,GAAG,CAAC,CAAC;IAErBjD,SAAS,CAACG,OAAO,CAACI,KAAK,IAAI;MACvBA,KAAK,CAACJ,OAAO,CAAC,CAACyG,IAAI,EAAExG,KAAK,KAAK;QAC3B,MAAM9B,IAAI,GAAGiC,KAAK,CAACsH,KAAK,CAAC,CAAC,EAAEzH,KAAK,GAAG,CAAC,CAAC,CAACuF,IAAI,CAAC,GAAG,CAAC;QAChD,IAAI,CAAC1C,UAAU,CAAC3E,IAAI,CAAC,EAAE;UACnB2E,UAAU,CAAC3E,IAAI,CAAC,GAAG,CAAC;QACxB;QACA2E,UAAU,CAAC3E,IAAI,CAAC,EAAE;MACtB,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,MAAM0J,WAAW,GAAG5D,MAAM,CAAC6D,OAAO,CAAChF,UAAU,CAAC,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,OAAOuE,WAAW,CAACH,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAClC,CAAC;EAED,MAAMK,cAAc,GAAIC,QAAQ,IAAK;IACjCrM,iBAAiB,CAACD,cAAc,KAAKsM,QAAQ,GAAG,IAAI,GAAGA,QAAQ,CAAC;EACpE,CAAC;EAED,MAAMC,sBAAsB,GAAI9J,IAAI,IAAK;IACrC,MAAMiC,KAAK,GAAGjC,IAAI,CAACqE,IAAI,CAAC3F,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;IAClD,OAAOqD,KAAK,CAACnD,GAAG,CAAC,CAACwJ,IAAI,EAAExG,KAAK,KAAK;MAC9B,MAAMiI,UAAU,GAAGlF,IAAI,CAACmF,KAAK,CAAClI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5C,OAAOA,KAAK,GAAG,CAAC,KAAK,CAAC,GAAI,GAAEiI,UAAW,KAAIzB,IAAK,EAAC,GAAI,GAAEyB,UAAW,MAAKzB,IAAK,EAAC;IACjF,CAAC,CAAC,CAACjB,IAAI,CAAC,GAAG,CAAC;EAChB,CAAC;EAED,oBACI/L,OAAA;IAAK2O,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7B5O,OAAA;MAAA4O,QAAA,eACI5O,OAAA;QAAA4O,QAAA,eACI5O,OAAA;UAAA4O,QAAA,gBACI5O,OAAA;YAAI6O,YAAY,EAAEA,CAAA,KAAMrN,gBAAgB,CAAC,IAAI,CAAE;YAC3CsN,YAAY,EAAEA,CAAA,KAAMtN,gBAAgB,CAAC,KAAK,CAAE;YAAAoN,QAAA,eAC5C5O,OAAA,CAACL,IAAI;cAACoP,EAAE,EAAC,GAAG;cAAAH,QAAA,eACR5O,OAAA;gBAAKgP,GAAG,EAAEzN,aAAa,GAAGzB,SAAS,GAAGD,IAAK;gBAACoP,GAAG,EAAC,MAAM;gBAACC,KAAK,EAAE;kBAAEC,MAAM,EAAE;gBAAO;cAAE;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC,eACLvP,OAAA;YAAA4O,QAAA,eAAI5O,OAAA,CAACL,IAAI;cAACoP,EAAE,EAAC,mBAAmB;cAACJ,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAgB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtFvP,OAAA;YAAA4O,QAAA,eAAI5O,OAAA,CAACL,IAAI;cAACoP,EAAE,EAAC,kBAAkB;cAAAH,QAAA,EAAC;YAAe;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3DvP,OAAA;YAAA4O,QAAA,eAAI5O,OAAA,CAACL,IAAI;cAACoP,EAAE,EAAC,iBAAiB;cAAAH,QAAA,EAAC;YAAc;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzDvP,OAAA;YAAA4O,QAAA,eAAI5O,OAAA,CAACL,IAAI;cAACoP,EAAE,EAAC,WAAW;cAAAH,QAAA,EAAC;YAAQ;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACTvP,OAAA;MAAA4O,QAAA,eACI5O,OAAA;QAAS2O,SAAS,EAAC,OAAO;QAAAC,QAAA,gBACtB5O,OAAA;UAAI2O,SAAS,EAAC,OAAO;UAAAC,QAAA,EAAC;QAAgB;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3CvP,OAAA;UAAK2O,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC/B5O,OAAA;YAAK2O,SAAS,EAAC,YAAY;YAAAC,QAAA,eAC3C5O,OAAA;cAAQwP,OAAO,EAAEA,CAAA,KAAMpN,cAAc,CAACD,WAAW,KAAK,KAAK,GAAG,SAAS,GAAG,KAAK,CAAE;cAAAyM,QAAA,EAC5EzM,WAAW,KAAK,KAAK,GAAG,uBAAuB,GAAG;YAA4B;cAAAiN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,EACLpN,WAAW,KAAK,KAAK,gBAClBnC,OAAA;YAAK2O,SAAS,EAAC,YAAY;YAAAC,QAAA,gBAC3B5O,OAAA;cAAOyP,IAAI,EAAC,MAAM;cAACC,QAAQ,EAAElN;YAAiB;cAAA4M,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACjDvP,OAAA;cAAO2P,OAAO,EAAC,cAAc;cAAAf,QAAA,EAAC;YAAc;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpDvP,OAAA;cACIyP,IAAI,EAAC,MAAM;cACX3D,EAAE,EAAC,cAAc;cACjB8D,KAAK,EAAEnO,YAAa;cACpBiO,QAAQ,EAAG1M,CAAC,IAAKtB,eAAe,CAACsB,CAAC,CAACL,MAAM,CAACiN,KAAK;YAAE;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,gBAGFvP,OAAA;YAAK2O,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACvB5O,OAAA;cAAO2P,OAAO,EAAC,iBAAiB;cAAAf,QAAA,EAAC;YAAkB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC3DvP,OAAA;cACIyP,IAAI,EAAC,MAAM;cACX3D,EAAE,EAAC,iBAAiB;cACpB8D,KAAK,EAAEnO,YAAa;cACpBiO,QAAQ,EAAG1M,CAAC,IAAKtB,eAAe,CAACsB,CAAC,CAACL,MAAM,CAACiN,KAAK;YAAE;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CACR,eAEuBvP,OAAA;YAAK2O,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACvB5O,OAAA;cAAO2P,OAAO,EAAC,eAAe;cAAAf,QAAA,EAAC;YAAe;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtDvP,OAAA;cACI8L,EAAE,EAAC,eAAe;cAClB8D,KAAK,EAAEjO,aAAc;cACrB+N,QAAQ,EAAG1M,CAAC,IAAKpB,gBAAgB,CAACoB,CAAC,CAACL,MAAM,CAACiN,KAAK,CAAE;cAAAhB,QAAA,gBAElD5O,OAAA;gBAAQ4P,KAAK,EAAC,OAAO;gBAAAhB,QAAA,EAAC;cAAK;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpCvP,OAAA;gBAAQ4P,KAAK,EAAC,OAAO;gBAAAhB,QAAA,EAAC;cAAK;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,eACNvP,OAAA;YAAK2O,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACvB5O,OAAA;cAAO2P,OAAO,EAAC,gBAAgB;cAAAf,QAAA,EAAC;YAAgB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxDvP,OAAA;cACI8L,EAAE,EAAC,gBAAgB;cACnB8D,KAAK,EAAE/N,cAAe;cACtB6N,QAAQ,EAAG1M,CAAC,IAAKlB,iBAAiB,CAACkB,CAAC,CAACL,MAAM,CAACiN,KAAK,CAAE;cAAAhB,QAAA,gBAEnD5O,OAAA;gBAAQ4P,KAAK,EAAC,iBAAiB;gBAAAhB,QAAA,EAAC;cAAyB;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAClEvP,OAAA;gBAAQ4P,KAAK,EAAC,cAAc;gBAAAhB,QAAA,EAAC;cAAyB;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC/DvP,OAAA;gBAAQ4P,KAAK,EAAC,IAAI;gBAAAhB,QAAA,EAAC;cAAe;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,eACNvP,OAAA;YAAQwP,OAAO,EAAEjK,WAAY;YAAAqJ,QAAA,EAAC;UAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC3CxN,UAAU,iBAAI/B,OAAA;YAAA4O,QAAA,EAAG;UAA+C;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpE,CAAC,eACNvP,OAAA;UAAA4O,QAAA,GAAG,+BAA6B,EAACrO,UAAU;QAAA;UAAA6O,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACnDxN,UAAU,gBACP/B,OAAA;UAAK2O,SAAS,EAAC,cAAc;UAAAC,QAAA,gBACzB5O,OAAA;YAAA4O,QAAA,EAAI;UAAiB;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BvP,OAAA;YAAA4O,QAAA,EACKnO,WAAW,CAAC+C,GAAG,CAAC,CAAC,CAACkB,IAAI,EAAEmL,KAAK,CAAC,EAAErJ,KAAK,kBAClCxG,OAAA;cAAA4O,QAAA,GAAiBlK,IAAI,EAAC,KAAG,EAACmL,KAAK;YAAA,GAAtBrJ,KAAK;cAAA4I,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAsB,CACvC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,gBAENvP,OAAA;UAAK2O,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBAC/B5O,OAAA;YAAK2O,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACrB5O,OAAA;cAAQwP,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAAC,gBAAgB,CAAE;cAAAM,QAAA,GAAC,mBACpC,EAACjO,YAAY,CAAC0C,MAAM,CAACqB,IAAI,IAAIA,IAAI,CAACyJ,WAAW,KAAK,eAAe,CAAC,CAACxK,MAAM,EAAC,GAC/F;YAAA;cAAAyL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACRtN,cAAc,KAAK,gBAAgB,iBAChCjC,OAAA;cAAA4O,QAAA,EACKjO,YAAY,CAAC0C,MAAM,CAACqB,IAAI,IAAIA,IAAI,CAACyJ,WAAW,KAAK,eAAe,CAAC,CAAC3K,GAAG,CAAC,CAACkB,IAAI,EAAE8B,KAAK,kBAC/ExG,OAAA;gBAAA4O,QAAA,eACI5O,OAAA;kBAAQwP,OAAO,EAAEA,CAAA,KAAMxD,eAAe,CAACtH,IAAI,CAAC4F,OAAO,CAAE;kBAAAsE,QAAA,EAChDJ,sBAAsB,CAAC9J,IAAI;gBAAC;kBAAA0K,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzB;cAAC,GAHJ/I,KAAK;gBAAA4I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAIV,CACP;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CACP;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACNvP,OAAA;YAAK2O,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACrB5O,OAAA;cAAQwP,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAAC,gBAAgB,CAAE;cAAAM,QAAA,GAAC,mBACpC,EAACjO,YAAY,CAAC0C,MAAM,CAACqB,IAAI,IAAIA,IAAI,CAACyJ,WAAW,KAAK,eAAe,CAAC,CAACxK,MAAM,EAAC,GAC/F;YAAA;cAAAyL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACRtN,cAAc,KAAK,gBAAgB,iBAChCjC,OAAA;cAAA4O,QAAA,EACKjO,YAAY,CAAC0C,MAAM,CAACqB,IAAI,IAAIA,IAAI,CAACyJ,WAAW,KAAK,eAAe,CAAC,CAAC3K,GAAG,CAAC,CAACkB,IAAI,EAAE8B,KAAK,kBAC/ExG,OAAA;gBAAA4O,QAAA,eACI5O,OAAA;kBAAQwP,OAAO,EAAEA,CAAA,KAAMxD,eAAe,CAACtH,IAAI,CAAC4F,OAAO,CAAE;kBAAAsE,QAAA,EAChDJ,sBAAsB,CAAC9J,IAAI;gBAAC;kBAAA0K,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzB;cAAC,GAHJ/I,KAAK;gBAAA4I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAIV,CACP;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CACP;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACNvP,OAAA;YAAK2O,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACrB5O,OAAA;cAAQwP,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAAC,qBAAqB,CAAE;cAAAM,QAAA,GAAC,wBACpC,EAACjO,YAAY,CAAC0C,MAAM,CAACqB,IAAI,IAAIA,IAAI,CAACyJ,WAAW,KAAK,mBAAmB,CAAC,CAACxK,MAAM,EAAC,GACxG;YAAA;cAAAyL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACRtN,cAAc,KAAK,qBAAqB,iBACrCjC,OAAA;cAAA4O,QAAA,EACKjO,YAAY,CAAC0C,MAAM,CAACqB,IAAI,IAAIA,IAAI,CAACyJ,WAAW,KAAK,mBAAmB,CAAC,CAAC3K,GAAG,CAAC,CAACkB,IAAI,EAAE8B,KAAK,kBACnFxG,OAAA;gBAAA4O,QAAA,eACI5O,OAAA;kBAAQwP,OAAO,EAAEA,CAAA,KAAMxD,eAAe,CAACtH,IAAI,CAAC4F,OAAO,CAAE;kBAAAsE,QAAA,EAChDJ,sBAAsB,CAAC9J,IAAI;gBAAC;kBAAA0K,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzB;cAAC,GAHJ/I,KAAK;gBAAA4I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAIV,CACP;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CACP;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACPvP,OAAA;MAAA4O,QAAA,eACI5O,OAAA;QAAA4O,QAAA,EAAG;MAAgD;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACnP,EAAA,CAl4BID,eAAe;AAAA2P,EAAA,GAAf3P,eAAe;AAo4BrB,eAAeA,eAAe;AAAC,IAAA2P,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}