{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/EditBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditBoard = ({\n  in_fen\n}) => {\n  _s();\n  const [fen, setFen] = useState(in_fen);\n  const [orientation, setOrientation] = useState('white');\n\n  //console.log('Received fen:', in_fen);\n  //console.log('Current fen:', fen);\n\n  // Update the fen state when the in_fen prop changes\n  useEffect(() => {\n    setFen(in_fen);\n  }, [in_fen]);\n\n  // Ensure that fen is properly initialized and updated\n  useEffect(() => {\n    console.log('Updated fen:', fen);\n  }, [fen]);\n  const handleFlipBoard = () => {\n    setOrientation(orientation === 'white' ? 'black' : 'white');\n  };\n  function myFunction(p1) {\n    if (p1 == 0) {\n      return \"\";\n    }\n    return p1;\n  }\n  function isNumeric(str) {\n    if (typeof str != \"string\") return false; // we only process strings!  \n    return !isNaN(str) &&\n    // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n    !isNaN(parseFloat(str)); // ...and ensure strings of whitespace fail\n  } //stackoverflow answered Oct 6, 2008 at 19:24 by Dan\n\n  const handleDrop = ({\n    sourceSquare,\n    targetSquare,\n    piece\n  }) => {\n    console.log(`Dropping piece: ${piece} from ${sourceSquare} to ${targetSquare}`);\n    if (!sourceSquare || !targetSquare || !piece) {\n      console.error('Missing drop data');\n      return;\n    }\n\n    // This function will update the FEN string based on the source and target squares\n    const updateFen = (fen, source, target, piece) => {\n      const rows = fen.split(' ');\n      const position = rows[0].split('/');\n      const pieceCode = piece[0] === 'b' ? piece[1].toLowerCase() : piece[1].toUpperCase(); // convert piece to FEN notation\n\n      const sourceRank = 8 - parseInt(source[1]);\n      const sourceFile = source.charCodeAt(0) - 'a'.charCodeAt(0);\n      const targetRank = 8 - parseInt(target[1]);\n      const targetFile = target.charCodeAt(0) - 'a'.charCodeAt(0);\n      if (source !== \"spare\") {\n        // Remove the piece from the source square\n        position[sourceRank] = replaceCharInRank(position[sourceRank], sourceFile, '1');\n      }\n      // Add the piece to the target square\n      position[targetRank] = replaceCharInRank(position[targetRank], targetFile, pieceCode);\n\n      // Recompose the FEN string\n      rows[0] = position.join('/');\n      return rows.join(' ');\n    };\n\n    // Function to replace character in a rank with piece or empty\n    const replaceCharInRank = (rank, fileIndex, newChar) => {\n      const expandedRank = expandRank(rank); // expand the rank to 8 characters\n      const updatedRank = expandedRank.substring(0, fileIndex) + newChar + expandedRank.substring(fileIndex + 1);\n      return compressRank(updatedRank); // compress the rank back into FEN format\n    };\n\n    // Expands a FEN rank string\n    const expandRank = rank => {\n      return rank.replace(/[1-8]/g, match => ''.padStart(parseInt(match), '1'));\n    };\n\n    // Compresses a FEN rank string\n    const compressRank = rank => {\n      return rank.replace(/1{1,8}/g, match => match.length);\n    };\n    try {\n      const newFen = updateFen(fen, sourceSquare, targetSquare, piece);\n      console.log(`New FEN: ${newFen}`);\n      setFen(newFen);\n    } catch (error) {\n      console.error('Error processing move:', error);\n    }\n  };\n  const handleStartingPosition = () => {\n    setFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'); // Set board position to starting position\n  };\n  const handleClearBoard = () => {\n    setFen('8/8/8/8/8/8/8/8'); // Clear the board by setting position to an empty board FEN\n  };\n  /*\n    const handleFenChange = (event) => {\n      setFen(event.target.value); // Update board position with the entered FEN string\n    };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFlipBoard,\n      children: \"Flip Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onDrop: handleDrop,\n      width: 340,\n      sparePieces: true,\n      orientation: orientation // Adjust orientation as needed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartingPosition,\n        children: \"Starting Position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearBoard,\n        children: \"Clear Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(EditBoard, \"x5nJXoH88BRRHUdyS1nh1Ag+66U=\");\n_c = EditBoard;\nexport default EditBoard;\n\n//        <input type=\"text\" value={fen} onChange={handleFenChange} placeholder=\"Enter FEN string\" />\n// <button><Link to=\"/play-stockfish\">Play From Position</Link></button>\n// <button><Link to=\"/analysis-board\">Close Edit Board</Link></button>\nvar _c;\n$RefreshReg$(_c, \"EditBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Link","jsxDEV","_jsxDEV","EditBoard","in_fen","_s","fen","setFen","orientation","setOrientation","console","log","handleFlipBoard","myFunction","p1","isNumeric","str","isNaN","parseFloat","handleDrop","sourceSquare","targetSquare","piece","error","updateFen","source","target","rows","split","position","pieceCode","toLowerCase","toUpperCase","sourceRank","parseInt","sourceFile","charCodeAt","targetRank","targetFile","replaceCharInRank","join","rank","fileIndex","newChar","expandedRank","expandRank","updatedRank","substring","compressRank","replace","match","padStart","length","newFen","handleStartingPosition","handleClearBoard","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onDrop","width","sparePieces","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/EditBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Link } from 'react-router-dom';\n\nconst EditBoard = ({ in_fen }) => {\n  const [fen, setFen] = useState(in_fen);\n  const [orientation, setOrientation] = useState('white');\n\n  //console.log('Received fen:', in_fen);\n //console.log('Current fen:', fen);\n\n  // Update the fen state when the in_fen prop changes\n  useEffect(() => {\n    setFen(in_fen);\n  }, [in_fen]);\n\n  // Ensure that fen is properly initialized and updated\n  useEffect(() => {\n    console.log('Updated fen:', fen);\n  }, [fen]);\n\n    const handleFlipBoard = () => {\n        setOrientation(orientation === 'white' ? 'black' : 'white');\n    };\n\n  function myFunction(p1) {\n    if(p1==0){\n      return \"\";}\n      return p1;\n    }\n  function isNumeric(str) {\n      if (typeof str != \"string\") return false // we only process strings!  \n      return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n             !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\n    } //stackoverflow answered Oct 6, 2008 at 19:24 by Dan\n    \n\n    const handleDrop = ({ sourceSquare, targetSquare, piece }) => {\n      console.log(`Dropping piece: ${piece} from ${sourceSquare} to ${targetSquare}`);\n    \n      if (!sourceSquare || !targetSquare || !piece) {\n        console.error('Missing drop data');\n        return;\n      }\n    \n      // This function will update the FEN string based on the source and target squares\n      const updateFen = (fen, source, target, piece) => {\n        const rows = fen.split(' ');\n        const position = rows[0].split('/');\n        const pieceCode = piece[0] === 'b' ? piece[1].toLowerCase() : piece[1].toUpperCase(); // convert piece to FEN notation\n    \n        const sourceRank = 8 - parseInt(source[1]);\n        const sourceFile = source.charCodeAt(0) - 'a'.charCodeAt(0);\n        const targetRank = 8 - parseInt(target[1]);\n        const targetFile = target.charCodeAt(0) - 'a'.charCodeAt(0);\n        if (source !== \"spare\"){\n        // Remove the piece from the source square\n        position[sourceRank] = replaceCharInRank(position[sourceRank], sourceFile, '1');\n        }\n        // Add the piece to the target square\n        position[targetRank] = replaceCharInRank(position[targetRank], targetFile, pieceCode);\n    \n        // Recompose the FEN string\n        rows[0] = position.join('/');\n        return rows.join(' ');\n      };\n    \n      // Function to replace character in a rank with piece or empty\n      const replaceCharInRank = (rank, fileIndex, newChar) => {\n        const expandedRank = expandRank(rank); // expand the rank to 8 characters\n        const updatedRank = expandedRank.substring(0, fileIndex) + newChar + expandedRank.substring(fileIndex + 1);\n        return compressRank(updatedRank); // compress the rank back into FEN format\n      };\n    \n      // Expands a FEN rank string\n      const expandRank = (rank) => {\n        return rank.replace(/[1-8]/g, (match) => ''.padStart(parseInt(match), '1'));\n      };\n    \n      // Compresses a FEN rank string\n      const compressRank = (rank) => {\n        return rank.replace(/1{1,8}/g, (match) => match.length);\n      };\n    \n      try {\n        const newFen = updateFen(fen, sourceSquare, targetSquare, piece);\n        console.log(`New FEN: ${newFen}`);\n        setFen(newFen);\n      } catch (error) {\n        console.error('Error processing move:', error);\n      }\n    };\n    \n  \n\n  const handleStartingPosition = () => {\n    setFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'); // Set board position to starting position\n  };\n\n  const handleClearBoard = () => {\n    setFen('8/8/8/8/8/8/8/8'); // Clear the board by setting position to an empty board FEN\n  };\n/*\n  const handleFenChange = (event) => {\n    setFen(event.target.value); // Update board position with the entered FEN string\n  };*/\n\n  return (\n    <div>\n      <button onClick={handleFlipBoard}>Flip Board</button>\n      \n\n      <Chessboard\n        position={fen}\n        onDrop={handleDrop}\n        width={340}\n        sparePieces={true}\n        orientation={orientation} // Adjust orientation as needed\n      />\n      <div>\n        <button onClick={handleStartingPosition}>Starting Position</button>\n        <button onClick={handleClearBoard}>Clear Board</button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditBoard;\n\n//        <input type=\"text\" value={fen} onChange={handleFenChange} placeholder=\"Enter FEN string\" />\n// <button><Link to=\"/play-stockfish\">Play From Position</Link></button>\n// <button><Link to=\"/analysis-board\">Close Edit Board</Link></button>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}