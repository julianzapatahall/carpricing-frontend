{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/WeaknessFinder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst WeaknessFinder = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('10% of Games');\n  const [processing, setProcessing] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState(null);\n  const [inputMethod, setInputMethod] = useState('chesscom'); // Default to pgn\n\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const fetchLichessGames = async username => {\n    const response = await fetch(`https://lichess.org/api/games/user/${username}?max=1000&moves=true&pgnInJson=false`);\n    const data = await response.text(); // Get the response as text (PGN format)\n    return data;\n  };\n  const fetchChessComGames = async (username, maxGames = 1000) => {\n    const fetchGamesBatch = async archiveUrl => {\n      try {\n        const response = await fetch(archiveUrl);\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n        }\n        const data = await response.json();\n        return data.games;\n      } catch (error) {\n        console.error('Error fetching games batch:', error.message);\n        return []; // Return an empty array if there's an error\n      }\n    };\n    try {\n      // Fetch the archives (list of months)\n      const archivesResponse = await fetch(`https://api.chess.com/pub/player/${username}/games/archives`);\n      if (!archivesResponse.ok) {\n        const errorText = await archivesResponse.text();\n        throw new Error(`Error fetching archives: ${archivesResponse.statusText} - ${errorText}`);\n      }\n      const archivesData = await archivesResponse.json();\n      const archives = archivesData.archives.reverse(); // Reverse to start from the most recent\n\n      const results = [];\n      for (let archiveUrl of archives) {\n        if (results.length >= maxGames) break;\n        const games = await fetchGamesBatch(archiveUrl);\n        results.push(...games);\n        if (results.length >= maxGames) {\n          results.length = maxGames; // Trim to the maxGames limit\n          break;\n        }\n      }\n      return results;\n    } catch (error) {\n      console.error('Error fetching games from Chess.com:', error.message);\n      throw error;\n    }\n  };\n  const handleStart = async () => {\n    setProcessing(true);\n    let games = [];\n    if (inputMethod === 'lichess') {\n      const data = await fetchLichessGames(opponentName);\n      let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n      games = rawGames.map(game => '[Event' + game.trim());\n    } else if (inputMethod === 'chesscom') {\n      const data = await fetchChessComGames(opponentName);\n      games = data.map(game => game.pgn);\n    } else {\n      games = importedGames;\n    }\n    processGames(games);\n  };\n  const toggleDropdown = dropdown => {\n    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n  };\n  const createPgnFromGameIDs = (gameIDs, pgnList) => {\n    return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n  };\n  const handleLineClick = gameIDs => {\n    const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n\n    // Store the combined PGN in localStorage\n    localStorage.setItem('combinedPgn', combinedPgn);\n\n    // Clear imported games\n    localStorage.removeItem('importedGames');\n\n    // Redirect to analysis board\n    window.location.href = '/analysis-board';\n  };\n  const formatMovesWithNumbers = line => {\n    const moves = line.Line.split(\"*\").filter(Boolean);\n    return moves.map((move, index) => {\n      const moveNumber = Math.floor(index / 2) + 1;\n      return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n    }).join(\" \");\n  };\n  const categorizeLines = finalLongDF => {\n    return finalLongDF.map(row => {\n      const avgPointsColumn = \"AvgPoints\";\n      const avgPoints = row[avgPointsColumn];\n      if (avgPoints <= 0) {\n        row.MistakeType = \"Fatal Bafflement\";\n      } else if (avgPoints <= 0.2) {\n        row.MistakeType = \"Major Incompetence\";\n      } else if (avgPoints <= 0.4) {\n        row.MistakeType = \"Slight Inconsistency\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\");\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      try {\n        chess.loadPgn(game);\n        chess.deleteComments();\n        let moves = chess.history();\n        movesList.push(moves);\n        const valList = [];\n        let triangle = String(moves[0]) + \"*\";\n        valList.push(triangle);\n        pgnList.push(chess.pgn());\n        eventList.push(chess.header()[\"Event\"]);\n        siteList.push(chess.header()[\"Site\"]);\n        whiteList.push(chess.header()[\"White\"]);\n        blackList.push(chess.header()[\"Black\"]);\n        resultList.push(chess.header()[\"Result\"]);\n        dateList.push(chess.header()[\"Date\"]);\n        whiteEloList.push(chess.header()[\"WhiteElo\"]);\n        blackEloList.push(chess.header()[\"BlackElo\"]);\n        for (let i = 1; i < 25 && i < moves.length; i++) {\n          triangle += String(moves[i]) + \"*\";\n          valList.push(triangle);\n        }\n        fullValList.push(valList);\n      } catch (error) {\n        console.error(`Error processing game at index ${index}:`, error.message);\n        // Skip this game and continue with the next one\n      }\n    });\n    console.log(fullValList);\n    setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : resultList[index] === '1/2-1/2' ? 0.5 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    console.log(1);\n    console.log(filteredDF);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    console.log(2);\n    console.log(filteredDF);\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    console.log(3);\n    console.log(filteredDF);\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    console.log(4);\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on Min Flaw Frequency\n    let minGames = 1; // Default for At Least One Game\n    if (precisionLevel === '10% of Games') {\n      minGames = 4;\n    } else if (precisionLevel === '3% of Games') {\n      minGames = 2;\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines which meet minimum number of games\n    const minGameFilteredDF = longDF.filter(row => row[\"#Games\"] >= minGames);\n    // Filter for lines with probability greater than 0.2\n    const filteredLongDF = minGameFilteredDF.filter(row => opponentColor === 'Black' && row.LineProbabilityB > 0.2 || opponentColor === 'White' && row.LineProbabilityW > 0.2);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const groupedByLine = filteredLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          TotalGames: 0,\n          TotalWhitePoints: 0,\n          TotalLosses: 0,\n          AverageWhitePoints: 0,\n          GameIDs: []\n        };\n      }\n      acc[row.Line].TotalGames += 1;\n      acc[row.Line].TotalWhitePoints += row.WhiteResult;\n      acc[row.Line].TotalLosses += 1 - row.WhiteResult;\n      acc[row.Line].AverageWhitePoints = acc[row.Line].TotalWhitePoints / acc[row.Line].TotalGames;\n      acc[row.Line].GameIDs.push(row.GameID);\n      return acc;\n    }, {});\n    Object.values(groupedByLine).forEach(row => {\n      row['AvgPoints'] = opponentColor === \"White\" ? row.AverageWhitePoints : 1 - row.AverageWhitePoints;\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort by WinPercentage\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      return a.AvgPoints - b.AvgPoints;\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n    console.log(definedDF);\n    let fullLinesStr = \"//\";\n    let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n      const subsets = [];\n      const lineMoves = row.Line.split(\"*\").filter(Boolean);\n\n      // SUBSET CHECK\n      // Check if value already in partialLinesStr\n      if (partialLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      }\n\n      // SUPERSET CHECK\n      // Check if any subset is already in fullLinesStr\n\n      // Generate all possible subsets of the current line\n      for (let i = 1; i <= lineMoves.length; i++) {\n        const subset = lineMoves.slice(0, i).join(\"*\") + \"*\";\n        if (fullLinesStr.includes(\"//\" + subset + \"//\")) {\n          return false;\n        }\n        partialLinesStr += subset + \"//\";\n      }\n      ;\n      fullLinesStr += row.Line + \"//\";\n      return true;\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const categorizedLines = categorizeLines(nonSubsetLongDF);\n    setFilteredData(categorizedLines);\n    console.log(\"filteredData\");\n    console.log(filteredData);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    setProcessing(false); // Stop processing\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weakness-finder\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/about-player\",\n              children: \"About Player\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Weakness Finder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tab-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tab\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: inputMethod === 'chesscom' ? 'tablinks active' : 'tablinks',\n              onClick: () => setInputMethod('chesscom'),\n              children: \"Chess.com\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: inputMethod === 'lichess' ? 'tablinks active' : 'tablinks',\n              onClick: () => setInputMethod('lichess'),\n              children: \"Lichess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: inputMethod === 'pgn' ? 'tablinks active' : 'tablinks',\n              onClick: () => setInputMethod('pgn'),\n              children: \"PGN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tabcontent\",\n            style: {\n              display: inputMethod === 'pgn' ? 'block' : 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                onChange: handleFileSelect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"opponentName\",\n                children: \"Opponent Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"opponentName\",\n                value: opponentName,\n                onChange: e => setOpponentName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tabcontent\",\n            style: {\n              display: inputMethod === 'lichess' ? 'block' : 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"opponentUsername\",\n                children: \"Opponent Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"opponentUsername\",\n                value: opponentName,\n                onChange: e => setOpponentName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tabcontent\",\n            style: {\n              display: inputMethod === 'chesscom' ? 'block' : 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"opponentUsername\",\n                children: \"Opponent Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"opponentUsername\",\n                value: opponentName,\n                onChange: e => setOpponentName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentColor\",\n              children: \"Opponent Color:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"opponentColor\",\n              value: opponentColor,\n              onChange: e => setOpponentColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"precisionLevel\",\n              children: \"Min Flaw Frequency:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"precisionLevel\",\n              value: precisionLevel,\n              onChange: e => setPrecisionLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"10% of Games\",\n                children: \"10% of Games (Instant)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"3% of Games\",\n                children: \"3% of Games (Instant)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"At Least 1 Game\",\n                children: \"At Least 1 Game (Instant)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 25\n          }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please wait, do not refresh or close the tab...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Games: \", gamesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 25\n        }, this), processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"common-lines\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Most Common Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [line, \" - \", count]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Fatal Bafflements'),\n              children: [\"Fatal Bafflements: (\", filteredData.filter(line => line.MistakeType === 'Fatal Bafflement').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 29\n            }, this), activeDropdown === 'Fatal Bafflements' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Fatal Bafflement').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"line-item\",\n                onClick: () => handleLineClick(line.GameIDs),\n                children: formatMovesWithNumbers(line)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Major Incompetencies'),\n              children: [\"Major Incompetencies: (\", filteredData.filter(line => line.MistakeType === 'Major Incompetence').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 29\n            }, this), activeDropdown === 'Major Incompetencies' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Major Incompetence').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"line-item\",\n                onClick: () => handleLineClick(line.GameIDs),\n                children: formatMovesWithNumbers(line)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 40\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Slight Inconsistencies'),\n              children: [\"Slight Inconsistencies: (\", filteredData.filter(line => line.MistakeType === 'Slight Inconsistency').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 29\n            }, this), activeDropdown === 'Slight Inconsistencies' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Slight Inconsistency').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"line-item\",\n                onClick: () => handleLineClick(line.GameIDs),\n                children: formatMovesWithNumbers(line)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 9\n  }, this);\n};\n_s(WeaknessFinder, \"Gemqyp6UtHR6fo+PDti/19kTwDI=\");\n_c = WeaknessFinder;\nexport default WeaknessFinder;\nvar _c;\n$RefreshReg$(_c, \"WeaknessFinder\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","logo","logoWhite","jsxDEV","_jsxDEV","STOCKFISH","window","WeaknessFinder","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","thePgnList","setThePgnList","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","activeDropdown","setActiveDropdown","inputMethod","setInputMethod","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","readAsText","fetchLichessGames","username","response","fetch","data","text","fetchChessComGames","maxGames","fetchGamesBatch","archiveUrl","ok","errorText","Error","statusText","json","error","console","message","archivesResponse","archivesData","archives","reverse","results","push","handleStart","pgn","processGames","toggleDropdown","dropdown","createPgnFromGameIDs","gameIDs","pgnList","id","join","handleLineClick","combinedPgn","localStorage","setItem","removeItem","location","href","formatMovesWithNumbers","line","moves","Line","move","index","moveNumber","Math","floor","categorizeLines","finalLongDF","row","avgPointsColumn","avgPoints","MistakeType","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","chess","forEach","loadPgn","deleteComments","history","valList","triangle","String","header","i","log","j","dataFrame","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","filteredDF","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","minGameFilteredDF","filteredLongDF","groupedByLine","TotalGames","TotalWhitePoints","TotalLosses","AverageWhitePoints","GameIDs","Object","values","groupedLongDF","sortedLongDF","sort","a","b","AvgPoints","definedDF","undefined","fullLinesStr","partialLinesStr","nonSubsetLongDF","subsets","lineMoves","includes","subset","slice","categorizedLines","findCommonLines","sortedLines","entries","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","display","type","onChange","htmlFor","value","count","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/WeaknessFinder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst WeaknessFinder = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('10% of Games');\n    const [processing, setProcessing] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(null);\n    const [inputMethod, setInputMethod] = useState('chesscom'); // Default to pgn\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n\n    const fetchLichessGames = async (username) => {\n        const response = await fetch(`https://lichess.org/api/games/user/${username}?max=1000&moves=true&pgnInJson=false`);\n        const data = await response.text(); // Get the response as text (PGN format)\n        return data;\n    };\n\n    const fetchChessComGames = async (username, maxGames = 1000) => {\n        const fetchGamesBatch = async (archiveUrl) => {\n            try {\n                const response = await fetch(archiveUrl);\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n                }\n    \n                const data = await response.json();\n                return data.games;\n            } catch (error) {\n                console.error('Error fetching games batch:', error.message);\n                return []; // Return an empty array if there's an error\n            }\n        };\n    \n        try {\n            // Fetch the archives (list of months)\n            const archivesResponse = await fetch(`https://api.chess.com/pub/player/${username}/games/archives`);\n            if (!archivesResponse.ok) {\n                const errorText = await archivesResponse.text();\n                throw new Error(`Error fetching archives: ${archivesResponse.statusText} - ${errorText}`);\n            }\n            const archivesData = await archivesResponse.json();\n            const archives = archivesData.archives.reverse(); // Reverse to start from the most recent\n    \n            const results = [];\n            for (let archiveUrl of archives) {\n                if (results.length >= maxGames) break;\n    \n                const games = await fetchGamesBatch(archiveUrl);\n                results.push(...games);\n    \n                if (results.length >= maxGames) {\n                    results.length = maxGames; // Trim to the maxGames limit\n                    break;\n                }\n            }\n    \n            return results;\n        } catch (error) {\n            console.error('Error fetching games from Chess.com:', error.message);\n            throw error;\n        }\n    };\n    \n    \n    \n\n    const handleStart = async () => {\n        setProcessing(true);\n        let games = [];\n    \n        if (inputMethod === 'lichess') {\n            const data = await fetchLichessGames(opponentName);\n            let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n            games = rawGames.map(game => '[Event' + game.trim());\n        } else if (inputMethod === 'chesscom') {\n            const data = await fetchChessComGames(opponentName);\n            games = data.map(game => game.pgn);\n        } else{\n            games = importedGames;\n        }\n    \n        processGames(games);\n    };\n\n    const toggleDropdown = (dropdown) => {\n        setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n    };\n\n    const createPgnFromGameIDs = (gameIDs, pgnList) => {\n        return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n    };\n    \n    const handleLineClick = (gameIDs) => {\n        const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n    \n        // Store the combined PGN in localStorage\n        localStorage.setItem('combinedPgn', combinedPgn);\n    \n        // Clear imported games\n        localStorage.removeItem('importedGames');\n    \n        // Redirect to analysis board\n        window.location.href = '/analysis-board';\n    };\n    \n    \n    \n    const formatMovesWithNumbers = (line) => {\n        const moves = line.Line.split(\"*\").filter(Boolean);\n        return moves.map((move, index) => {\n            const moveNumber = Math.floor(index / 2) + 1;\n            return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n        }).join(\" \");\n    };\n\n    const categorizeLines = (finalLongDF) => {\n        return finalLongDF.map(row => {\n            const avgPointsColumn = \"AvgPoints\";\n            const avgPoints = row[avgPointsColumn];\n    \n                if (avgPoints <= 0) {\n                    row.MistakeType = \"Fatal Bafflement\";\n                } else if (avgPoints <= 0.2) {\n                    row.MistakeType = \"Major Incompetence\";\n                } else if (avgPoints <= 0.4) {\n                    row.MistakeType = \"Slight Inconsistency\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            \n            return row;\n        }).filter(row => row.MistakeType !== \"None\");\n    };\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n    \n        games.forEach((game, index) => {\n            try {\n                chess.loadPgn(game);\n                chess.deleteComments();\n                let moves = chess.history();\n                movesList.push(moves);\n    \n                const valList = [];\n                let triangle = String(moves[0]) + \"*\";\n                valList.push(triangle);\n    \n                pgnList.push(chess.pgn());\n                eventList.push(chess.header()[\"Event\"]);\n                siteList.push(chess.header()[\"Site\"]);\n                whiteList.push(chess.header()[\"White\"]);\n                blackList.push(chess.header()[\"Black\"]);\n                resultList.push(chess.header()[\"Result\"]);\n                dateList.push(chess.header()[\"Date\"]);\n                whiteEloList.push(chess.header()[\"WhiteElo\"]);\n                blackEloList.push(chess.header()[\"BlackElo\"]);\n    \n                for (let i = 1; i < 25 && i < moves.length; i++) {\n                    triangle += String(moves[i]) + \"*\";\n                    valList.push(triangle);\n                }\n                fullValList.push(valList);\n            } catch (error) {\n                console.error(`Error processing game at index ${index}:`, error.message);\n                // Skip this game and continue with the next one\n            }\n        });\n        console.log(fullValList);\n\n        setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : (resultList[index] === '1/2-1/2' ? 0.5 : 0),\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n        console.log(1);\n        console.log(filteredDF);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n        console.log(2);\n        console.log(filteredDF);\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n        console.log(3);\n        console.log(filteredDF);\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n        console.log(4);\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on Min Flaw Frequency\n        let minGames = 1; // Default for At Least One Game\n        if (precisionLevel === '10% of Games') {\n            minGames = 4;\n        } else if (precisionLevel === '3% of Games') {\n            minGames = 2;\n        }\n\n        console.log(\"minGames\");\n        console.log(minGames);\n\n         // Filter for lines which meet minimum number of games\n         const minGameFilteredDF = longDF.filter(row => \n            (row[\"#Games\"] >= minGames)\n        );\n        // Filter for lines with probability greater than 0.2\n        const filteredLongDF = minGameFilteredDF.filter(row => \n            (opponentColor === 'Black' && row.LineProbabilityB > 0.2) ||\n            (opponentColor === 'White' && row.LineProbabilityW > 0.2)\n        );\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const groupedByLine = filteredLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    TotalGames: 0,\n                    TotalWhitePoints: 0,\n                    TotalLosses: 0,\n                    AverageWhitePoints: 0,\n                    GameIDs: []\n                };\n            }\n            acc[row.Line].TotalGames += 1;\n            acc[row.Line].TotalWhitePoints += row.WhiteResult;\n            acc[row.Line].TotalLosses += (1 - row.WhiteResult);\n            acc[row.Line].AverageWhitePoints = acc[row.Line].TotalWhitePoints / acc[row.Line].TotalGames;\n            acc[row.Line].GameIDs.push(row.GameID);\n            return acc;\n        }, {});\n\n      \n\n        Object.values(groupedByLine).forEach(row => {\n            row['AvgPoints'] = opponentColor === \"White\" ? row.AverageWhitePoints : 1 - row.AverageWhitePoints;\n        });\n\n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n        \n\n\n        // Convert groupedByLine to an array and sort by WinPercentage\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n        return a.AvgPoints - b.AvgPoints;\n    });\n        \n\n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n        console.log(definedDF);\n \n        let fullLinesStr = \"//\";\n        let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n        const subsets = [];\n        const lineMoves = row.Line.split(\"*\").filter(Boolean);\n        \n// SUBSET CHECK\n        // Check if value already in partialLinesStr\n        if (partialLinesStr.includes(\"//\" + row.Line +\"//\")) {\n                return false;\n            }\n        \n\n\n        // SUPERSET CHECK\n        // Check if any subset is already in fullLinesStr\n\n        // Generate all possible subsets of the current line\n        for (let i = 1; i <= lineMoves.length; i++) {\n            const subset = lineMoves.slice(0, i).join(\"*\") + \"*\"; \n            if (fullLinesStr.includes(\"//\" + subset+ \"//\")) {\n                return false;\n            }\n            partialLinesStr += subset + \"//\";\n    };\n        fullLinesStr += row.Line+ \"//\";\n        return true;\n    });\n\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n        const categorizedLines = categorizeLines(nonSubsetLongDF);\n        setFilteredData(categorizedLines);\n        console.log(\"filteredData\");\n    console.log(filteredData);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n\n        setProcessing(false); // Stop processing\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"weakness-finder\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/about-player\">About Player</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <section className=\"hero3\">\n                    <h1>Weakness Finder</h1>\n                    <div className=\"tab-container\">\n                        <div className=\"tab\">\n                        <button className={inputMethod === 'chesscom' ? 'tablinks active' : 'tablinks'} onClick={() => setInputMethod('chesscom')}>Chess.com</button>\n                        <button className={inputMethod === 'lichess' ? 'tablinks active' : 'tablinks'} onClick={() => setInputMethod('lichess')}>Lichess</button>\n                        <button className={inputMethod === 'pgn' ? 'tablinks active' : 'tablinks'} onClick={() => setInputMethod('pgn')}>PGN</button>\n                        </div><div className=\"tabcontent\" style={{ display: inputMethod === 'pgn' ? 'block' : 'none' }}>\n                            <div className=\"form-group\">\n                                <input type=\"file\" onChange={handleFileSelect} />\n                                <label htmlFor=\"opponentName\">Opponent Name:</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"opponentName\" \n                                    value={opponentName} \n                                    onChange={(e) => setOpponentName(e.target.value)} \n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"tabcontent\" style={{ display: inputMethod === 'lichess' ? 'block' : 'none' }}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"opponentUsername\">Opponent Username:</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"opponentUsername\" \n                                    value={opponentName} \n                                    onChange={(e) => setOpponentName(e.target.value)} \n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"tabcontent\" style={{ display: inputMethod === 'chesscom' ? 'block' : 'none' }}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"opponentUsername\">Opponent Username:</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"opponentUsername\" \n                                    value={opponentName} \n                                    onChange={(e) => setOpponentName(e.target.value)} \n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentColor\">Opponent Color:</label>\n                            <select \n                                id=\"opponentColor\" \n                                value={opponentColor} \n                                onChange={(e) => setOpponentColor(e.target.value)}\n                            >\n                                <option value=\"White\">White</option>\n                                <option value=\"Black\">Black</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"precisionLevel\">Min Flaw Frequency:</label>\n                            <select \n                                id=\"precisionLevel\" \n                                value={precisionLevel} \n                                onChange={(e) => setPrecisionLevel(e.target.value)}\n                            >\n                                <option value=\"10% of Games\">10% of Games (Instant)</option>\n                                <option value=\"3% of Games\">3% of Games (Instant)</option>\n                                <option value=\"At Least 1 Game\">At Least 1 Game (Instant)</option>\n                            </select>\n                        </div>\n                        <button onClick={handleStart}>Start</button>\n                        {processing && <p>Please wait, do not refresh or close the tab...</p>}\n                        </div>\n                        <p>Total Games: {gamesCount}</p>\n                {processing ? (\n                    <div className=\"common-lines\">\n                        <h2>Most Common Lines</h2>\n                        <ul>\n                            {commonLines.map(([line, count], index) => (\n                                <li key={index}>{line} - {count}</li>\n                            ))}\n                        </ul>\n                    </div>\n                ) : (\n                    <div className=\"dropdown-container\">\n                        <div className=\"dropdown\">\n                            <button onClick={() => toggleDropdown('Fatal Bafflements')}>\n                                Fatal Bafflements: ({filteredData.filter(line => line.MistakeType === 'Fatal Bafflement').length})\n                            </button>\n                            {activeDropdown === 'Fatal Bafflements' && (\n                                <ul>\n                                    {filteredData.filter(line => line.MistakeType === 'Fatal Bafflement').map((line, index) => (\n                                        <li key={index} className='line-item' onClick={() => handleLineClick(line.GameIDs)}>\n                                        {formatMovesWithNumbers(line)}\n                                </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                        <div className=\"dropdown\">\n                            <button onClick={() => toggleDropdown('Major Incompetencies')}>\n                            Major Incompetencies: ({filteredData.filter(line => line.MistakeType === 'Major Incompetence').length})\n                            </button>\n                            {activeDropdown === 'Major Incompetencies' && (\n                                <ul>\n                                    {filteredData.filter(line => line.MistakeType === 'Major Incompetence').map((line, index) => (\n                                       <li key={index} className='line-item' onClick={() => handleLineClick(line.GameIDs)}>\n                                       {formatMovesWithNumbers(line)}\n                               </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                        <div className=\"dropdown\">\n                            <button onClick={() => toggleDropdown('Slight Inconsistencies')}>\n                            Slight Inconsistencies: ({filteredData.filter(line => line.MistakeType === 'Slight Inconsistency').length})\n                            </button>\n                            {activeDropdown === 'Slight Inconsistencies' && (\n                                <ul>\n                                    {filteredData.filter(line => line.MistakeType === 'Slight Inconsistency').map((line, index) => (\n                                        <li key={index} className='line-item' onClick={() => handleLineClick(line.GameIDs)}>\n                                                {formatMovesWithNumbers(line)}\n                                        </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                        </div>\n                    )}\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default WeaknessFinder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}