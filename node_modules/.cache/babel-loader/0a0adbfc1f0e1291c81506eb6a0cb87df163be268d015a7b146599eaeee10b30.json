{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport axios from 'axios';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n  const [processing, setProcessing] = useState(false);\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const handleStart = () => {\n    setProcessing(true);\n    const games = importedGames;\n    processGames(games);\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      chess.deleteComments();\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    console.log(fullValList);\n    setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    console.log(1);\n    console.log(filteredDF);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    console.log(2);\n    console.log(filteredDF);\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    console.log(3);\n    console.log(filteredDF);\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    console.log(4);\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 2; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 25);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    const groupedByLine = filteredLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    setProcessing(false); // Stop processing\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = \"EVAL\";\n      const evaluation = row[evalColumn];\n      if (evaluation >= 2.5) {\n        row.MistakeType = \"Fatal Blunder\";\n      } else if (evaluation >= 1.0) {\n        row.MistakeType = \"Major Mistake\";\n      } else if (evaluation >= 0.6) {\n        row.MistakeType = \"Slight Inaccuracy\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/our-team\",\n              children: \"Our Team\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Blunder Punisher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"blunder-punisher-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"file-input\",\n              children: \"Import PGN:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"file-input\",\n              onChange: handleFileSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponent-name\",\n              children: \"Opponent Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"opponent-name\",\n              value: opponentName,\n              onChange: e => setOpponentName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponent-color\",\n              children: \"Opponent Color:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"opponent-color\",\n              value: opponentColor,\n              onChange: e => setOpponentColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"precision-level\",\n              children: \"Precision Level:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"precision-level\",\n              min: \"0\",\n              max: \"2\",\n              value: precisionLevel,\n              onChange: e => setPrecisionLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Amateur/SemiPro\",\n                children: \"Amateur/SemiPro\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Professional\",\n                children: \"Professional\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"GM\",\n                children: \"GM\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"precision-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Amateur/SemiPro: 5s-1min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Professional: 1min-10min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"GM: 1min-1hour\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please wait, do not refresh or close the tab. Processing time depends on your chosen precision level.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of games in the file: \", gamesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"common-lines\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Most Common Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [line, \" - \", count]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Filtered Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(filteredData, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"FkORljqJnOK2RGJ65VYqEm4WWN4=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","axios","logo","logoWhite","jsxDEV","_jsxDEV","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","thePgnList","setThePgnList","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","readAsText","handleStart","processGames","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","forEach","index","loadPgn","deleteComments","moves","history","push","valList","triangle","String","pgn","header","i","console","log","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","filteredDF","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","Math","ceil","filteredLongDFUnsorted","filteredLongDF","sort","a","b","groupedByLine","isNaN","Infinity","GameIDs","max","Object","values","NaN","groupedLongDF","sortedLongDF","LineProbability","categorizedLines","categorizeLines","findCommonLines","evalColumn","MistakeType","move","line","slice","join","sortedLines","entries","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","value","min","onClick","count","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport axios from 'axios';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n    const [processing, setProcessing] = useState(false);\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n\n    const handleStart = () => {\n        setProcessing(true);\n        const games = importedGames;\n        processGames(games);\n    };\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            chess.deleteComments();\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n        console.log(fullValList);\n\n        setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n        console.log(1);\n        console.log(filteredDF);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n        console.log(2);\n        console.log(filteredDF);\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n        console.log(3);\n        console.log(filteredDF);\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n        console.log(4);\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 2; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 25);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        const groupedByLine = filteredLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n\n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n        setProcessing(false); // Stop processing\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = \"EVAL\";\n            const evaluation = row[evalColumn];\n\n            if (evaluation >= 2.5) {\n                row.MistakeType = \"Fatal Blunder\";\n            } else if (evaluation >= 1.0) {\n                row.MistakeType = \"Major Mistake\";\n            } else if (evaluation >= 0.6) {\n                row.MistakeType = \"Slight Inaccuracy\";\n            } else {\n                row.MistakeType = \"None\";\n            }\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/our-team\">Our Team</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <section className=\"hero\">\n                    <h1>Blunder Punisher</h1>\n                    <form className=\"blunder-punisher-form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"file-input\">Import PGN:</label>\n                            <input type=\"file\" id=\"file-input\" onChange={handleFileSelect} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponent-name\">Opponent Name:</label>\n                            <input type=\"text\" id=\"opponent-name\" value={opponentName} onChange={(e) => setOpponentName(e.target.value)} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponent-color\">Opponent Color:</label>\n                            <select id=\"opponent-color\" value={opponentColor} onChange={(e) => setOpponentColor(e.target.value)}>\n                                <option value=\"White\">White</option>\n                                <option value=\"Black\">Black</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"precision-level\">Precision Level:</label>\n                            <input type=\"range\" id=\"precision-level\" min=\"0\" max=\"2\" value={precisionLevel} onChange={(e) => setPrecisionLevel(e.target.value)}>\n                                <option value=\"Amateur/SemiPro\">Amateur/SemiPro</option>\n                                <option value=\"Professional\">Professional</option>\n                                <option value=\"GM\">GM</option>\n                            </input>\n                            <div className=\"precision-info\">\n                                <p>Amateur/SemiPro: 5s-1min</p>\n                                <p>Professional: 1min-10min</p>\n                                <p>GM: 1min-1hour</p>\n                            </div>\n                        </div>\n                        <button type=\"button\" onClick={handleStart}>Start</button>\n                    </form>\n                    {processing && <p>Please wait, do not refresh or close the tab. Processing time depends on your chosen precision level.</p>}\n                    <p>Number of games in the file: {gamesCount}</p>\n                    <div className=\"common-lines\">\n                        <h2>Most Common Lines</h2>\n                        <ul>\n                            {commonLines.map(([line, count], index) => (\n                                <li key={index}>{line} - {count}</li>\n                            ))}\n                        </ul>\n                        <h2>Filtered Data</h2>\n                        <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                    </div>\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}