{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/ImportGames.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js'; // Ensure chess.js is available client-side\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportGames = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [gamesList, setGamesList] = useState([]);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      setUploadStatus('Please select a file to upload.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const text = e.target.result;\n      const chess = new Chess();\n      console.log(1);\n      chess.loadPgn(text);\n      console.log(2);\n      if (!chess.pgn()) {\n        console.log(text);\n        setUploadStatus('Invalid PGN file. Please upload a valid PGN file.');\n        return;\n      }\n\n      // Optionally extract moves or any other data from the PGN here\n      const moves = chess.history({\n        verbose: true\n      });\n      console.log(moves);\n      try {\n        // Inside handleUpload, after successful upload\n        // Assuming the server returns an array of games\n        // Send the extracted data to your server instead of the file itself\n        const response = await axios.post('http://localhost:3001/api/games/process', {\n          moves\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        setGamesList(response.data);\n        setUploadStatus('File processed successfully!');\n      } catch (error) {\n        if (error.response) {\n          console.log(error.response.data); // Detailed error from server\n          setUploadStatus(error.response.data || 'An error occurred during file processing.');\n        } else {\n          setUploadStatus('An error occurred during file upload.');\n        }\n      }\n    };\n    reader.readAsText(file); // Read the file as text\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleSelectGame,\n        children: gamesList.map((game, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: `Game ${index + 1}: ${game.playerWhite} vs ${game.playerBlack}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ImportGames, \"ljHhYKi8ddz1przRFk1j0ve8VqY=\");\n_c = ImportGames;\nexport default ImportGames;\nvar _c;\n$RefreshReg$(_c, \"ImportGames\");","map":{"version":3,"names":["React","useState","axios","Chess","jsxDEV","_jsxDEV","ImportGames","_s","file","setFile","uploadStatus","setUploadStatus","gamesList","setGamesList","handleFileChange","e","target","files","handleUpload","preventDefault","reader","FileReader","onload","text","result","chess","console","log","loadPgn","pgn","moves","history","verbose","response","post","headers","data","error","readAsText","children","onSubmit","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","handleSelectGame","map","game","index","value","playerWhite","playerBlack","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/ImportGames.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js'; // Ensure chess.js is available client-side\n\nconst ImportGames = () => {\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [gamesList, setGamesList] = useState([]);\n\n\n\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    if (!file) {\n      setUploadStatus('Please select a file to upload.');\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const text = e.target.result;\n      const chess = new Chess();\n      console.log(1);\n      chess.loadPgn(text);\n      console.log(2);\n      \n      if (!chess.pgn()) {\n        console.log(text);\n        setUploadStatus('Invalid PGN file. Please upload a valid PGN file.');\n        return;\n      }\n\n      // Optionally extract moves or any other data from the PGN here\n      const moves = chess.history({ verbose: true });\n      console.log(moves);\n      try {\n        // Inside handleUpload, after successful upload\n// Assuming the server returns an array of games\n        // Send the extracted data to your server instead of the file itself\n        const response = await axios.post('http://localhost:3001/api/games/process', { moves }, {\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\nsetGamesList(response.data); \n        setUploadStatus('File processed successfully!');\n      }  catch (error) {\n        if (error.response) {\n          console.log(error.response.data); // Detailed error from server\n          setUploadStatus(error.response.data || 'An error occurred during file processing.');\n        } else {\n          setUploadStatus('An error occurred during file upload.');\n        }\n      }\n      \n      \n    };\n    reader.readAsText(file); // Read the file as text\n  };\n\n  return (\n    <div>\n    <form onSubmit={handleUpload}>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button type=\"submit\">Upload</button>\n      {uploadStatus && <p>{uploadStatus}</p>}\n    </form>\n    <div>\n    <select onChange={handleSelectGame}>\n      {gamesList.map((game, index) => (\n        <option value={index}>{`Game ${index + 1}: ${game.playerWhite} vs ${game.playerBlack}`}</option>\n      ))}\n    </select>\n  </div>\n  </div>\n  \n  );\n};\n\nexport default ImportGames;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAK9C,MAAMa,gBAAgB,GAAIC,CAAC,IAAK;IAC9BN,OAAO,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,IAAI,CAACX,IAAI,EAAE;MACTG,eAAe,CAAC,iCAAiC,CAAC;MAClD;IACF;IAEA,MAAMS,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAOP,CAAC,IAAK;MAC3B,MAAMQ,IAAI,GAAGR,CAAC,CAACC,MAAM,CAACQ,MAAM;MAC5B,MAAMC,KAAK,GAAG,IAAItB,KAAK,CAAC,CAAC;MACzBuB,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;MACdF,KAAK,CAACG,OAAO,CAACL,IAAI,CAAC;MACnBG,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;MAEd,IAAI,CAACF,KAAK,CAACI,GAAG,CAAC,CAAC,EAAE;QAChBH,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;QACjBZ,eAAe,CAAC,mDAAmD,CAAC;QACpE;MACF;;MAEA;MACA,MAAMmB,KAAK,GAAGL,KAAK,CAACM,OAAO,CAAC;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAC9CN,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MAClB,IAAI;QACF;QACR;QACQ;QACA,MAAMG,QAAQ,GAAG,MAAM/B,KAAK,CAACgC,IAAI,CAAC,yCAAyC,EAAE;UAAEJ;QAAM,CAAC,EAAE;UAC9FK,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACFtB,YAAY,CAACoB,QAAQ,CAACG,IAAI,CAAC;QACnBzB,eAAe,CAAC,8BAA8B,CAAC;MACjD,CAAC,CAAE,OAAO0B,KAAK,EAAE;QACf,IAAIA,KAAK,CAACJ,QAAQ,EAAE;UAClBP,OAAO,CAACC,GAAG,CAACU,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;UAClCzB,eAAe,CAAC0B,KAAK,CAACJ,QAAQ,CAACG,IAAI,IAAI,2CAA2C,CAAC;QACrF,CAAC,MAAM;UACLzB,eAAe,CAAC,uCAAuC,CAAC;QAC1D;MACF;IAGF,CAAC;IACDS,MAAM,CAACkB,UAAU,CAAC9B,IAAI,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,oBACEH,OAAA;IAAAkC,QAAA,gBACAlC,OAAA;MAAMmC,QAAQ,EAAEtB,YAAa;MAAAqB,QAAA,gBAC3BlC,OAAA;QAAOoC,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAE5B;MAAiB;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDzC,OAAA;QAAQoC,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACpCpC,YAAY,iBAAIL,OAAA;QAAAkC,QAAA,EAAI7B;MAAY;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACPzC,OAAA;MAAAkC,QAAA,eACAlC,OAAA;QAAQqC,QAAQ,EAAEK,gBAAiB;QAAAR,QAAA,EAChC3B,SAAS,CAACoC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzB7C,OAAA;UAAQ8C,KAAK,EAAED,KAAM;UAAAX,QAAA,EAAG,QAAOW,KAAK,GAAG,CAAE,KAAID,IAAI,CAACG,WAAY,OAAMH,IAAI,CAACI,WAAY;QAAC;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAChG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGR,CAAC;AAACvC,EAAA,CA9EID,WAAW;AAAAgD,EAAA,GAAXhD,WAAW;AAgFjB,eAAeA,WAAW;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}