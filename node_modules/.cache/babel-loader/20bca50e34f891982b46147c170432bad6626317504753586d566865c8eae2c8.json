{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/AnalysisBoard.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport EditBoard from \"./EditBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\nclass AnalysisBoard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orientation: \"white\",\n      evaluation: \"\",\n      bestLine: \"\",\n      currentPly: 1,\n      future: []\n    };\n    this.goToEnd = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous = moves.length + this.future.length - 1;\n      if (previous >= 0) {\n        if (moves.length > 0) {\n          for (var i = 0; i < moves.length; i += 1) {\n            tmp.move(moves[i]);\n          }\n        }\n        if (this.future.length - 1 >= 0) {\n          for (var i = 0; i < this.future.length; i += 1) {\n            tmp.move(this.future[i]);\n          }\n          const previous_fen = tmp.fen();\n          const previous_pgn = tmp.pgn();\n          this.future = [];\n          game.load(previous_fen);\n          game.loadPgn(previous_pgn);\n          this.setState({\n            fen: previous_fen\n          });\n          if (!game.isGameOver()) {\n            this.engineGame().prepareMove();\n          }\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n    };\n    this.goToNextMove = () => {\n      if (this.future.length > 0) {\n        game.move(this.future[0]);\n        this.setState({\n          fen: game.fen()\n        });\n        this.future.shift();\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToPreviousMove = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous = moves.length - 1;\n      if (previous >= 0) {\n        for (var i = 0; i < previous; i += 1) {\n          tmp.move(moves[i]);\n        }\n        const previous_fen = tmp.fen();\n        const previous_pgn = tmp.pgn();\n        this.future.unshift(moves[previous]);\n        tmp.move(moves[previous]);\n        game.load(previous_fen);\n        game.loadPgn(previous_pgn);\n        this.setState({\n          fen: previous_fen\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToStart = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous_fen = tmp.fen();\n      const previous_pgn = tmp.pgn();\n      const previous = moves.length - 1;\n      if (previous >= 0) {\n        for (var i = 0; i < previous; i += 1) {\n          tmp.move(moves[i]);\n        }\n        this.future.unshift(...moves);\n        game.load(previous_fen);\n        game.loadPgn(previous_pgn);\n        this.setState({\n          fen: previous_fen\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    /*  componentDidUpdate(prevProps) {\n        // Check if game position has changed\n        if (prevProps.fen !== this.props.fen) {\n          this.setState({ fen: this.props.fen});\n          game.load(this.props.fen);\n          this.engineGame().prepareMove();\n        }\n      }*/\n    this.engineGame = options => {\n      options = options || {};\n      let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n      engine.postMessage(\"uci\");\n      engine.onmessage = event => {\n        const {\n          currentPly\n        } = this.state;\n        let line;\n        if (event && typeof event === \"object\") {\n          line = event.data;\n          // Extract evaluation and best continuation line from the Stockfish response\n          const evaluation = this.extractEvaluation(line);\n          const bestLine = this.extractBestLine(line);\n          // Update state with evaluation and best continuation line\n          this.setState({\n            evaluation,\n            bestLine\n          });\n        } else {\n          line = event;\n        }\n\n        // Process Stockfish analysis here\n        const bestLine = this.extractBestLine(line);\n        this.setState({\n          previousOutput: bestLine\n        });\n      };\n      return {\n        prepareMove: function () {\n          // Send current position to Stockfish for analysis\n          engine.postMessage(\"position fen \" + game.fen());\n          engine.postMessage(\"go depth 15\");\n        }\n      };\n    };\n    this.handleEditBoard = () => {\n      var T1 = document.getElementById(\"EditingOn\");\n      T1.style.display = T1.style.display === \"none\" ? \"block\" : \"none\";\n      var T2 = document.getElementById(\"EditingOff\");\n      T2.style.display = T2.style.display === \"block\" ? \"none\" : \"block\";\n    };\n    this.onDrop = ({\n      sourceSquare,\n      targetSquare\n    }) => {\n      const legalMoves = game.moves({\n        verbose: true\n      });\n      const move = legalMoves.find(move => move.from === sourceSquare && move.to === targetSquare);\n      if (!move) {\n        console.log(\"Illegal move\");\n        return;\n      }\n      if (move.san == this.future[0]) {\n        this.future.shift();\n      } else {\n        this.future = [];\n      }\n      game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\"\n      });\n\n      // Update state with new position\n      // Update state with new position and add move to history\n      this.setState(prevState => ({\n        fen: game.fen()\n      }));\n      this.setState(prevState => ({\n        currentPly: prevState.currentPly + 1\n      }));\n\n      // Prepare Stockfish for analysis\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    };\n    // Helper function to extract evaluation from the Stockfish response\n    this.extractEvaluation = line => {\n      // Extract the evaluation from the response\n\n      const evalMatch = line.match(/score cp (-?\\d+)/);\n      if (evalMatch) {\n        const evaluation = Math.round(parseInt(evalMatch[1]) * 0.01 * 100) / 100;\n        if (evaluation >= 0) {\n          if (game.turn() == \"b\") {\n            return -evaluation;\n          }\n          return \"+\" + evaluation;\n        }\n        if (game.turn() == \"w\") {\n          return evaluation;\n        }\n        return \"+\" + -evaluation;\n\n        // Reverse the sign for white's perspective\n      }\n      return null;\n    };\n    // Helper function to extract the best continuation line from the Stockfish response\n    // Helper function to extract the best continuation line from the Stockfish response and convert it into the desired format\n    // Helper function to extract the best continuation line from the Stockfish response in SAN format\n    // Helper function to extract the best continuation line from the Stockfish response in SAN format\n    this.extractBestLine = line => {\n      const currentPly = game.history().length + 1;\n      // Extract the best continuation line from the response\n      const bestLineMatch = line.match(/pvSan (.*) bmc/);\n      if (bestLineMatch) {\n        const moves = bestLineMatch[1].split(\" \");\n        const sanMoves = [];\n        for (let i = 0; i < 2 * Math.floor(moves.length / 2); i += 1) {\n          const moveNumber = i + currentPly; // Adjust move numbering\n          const sanMove = moveNumber % 2 === 1 ? `${Math.floor((moveNumber + 1) / 2)}. ${moves[i]}` : `${Math.floor((moveNumber + 1) / 2)}... ${moves[i]}`; // Use \"...\" for Black's moves\n          sanMoves.push(sanMove);\n        }\n        return sanMoves.join(\" \");\n      }\n      return this.state.previousOutput;\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      fen: game.fen()\n    });\n    this.future = [];\n    this.engineGame().prepareMove();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.pgn !== this.props.pgn) {\n      game.loadPgn(this.props.pgn);\n      this.setState({\n        fen: game.fen()\n      });\n      this.engineGame().prepareMove();\n    }\n  }\n  render() {\n    const {\n      fen,\n      orientation,\n      evaluation,\n      bestLine,\n      currentPly,\n      future\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.children({\n        fen: fen,\n        orientation: orientation,\n        evaluation: evaluation,\n        bestLine: bestLine,\n        currentPly: currentPly,\n        future: future,\n        goToEnd: this.goToEnd,\n        goToNextMove: this.goToNextMove,\n        goToPreviousMove: this.goToPreviousMove,\n        goToStart: this.goToStart,\n        onDrop: this.onDrop,\n        // Pass onDrop function to children\n        handleEditBoard: this.handleEditBoard\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleEditBoard,\n        children: \"Edit Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"EditingOff\",\n        style: {\n          display: \"block\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          width: 540,\n          onDrop: this.onDrop // Pass onDrop function to Chessboard\n          ,\n          orientation: orientation,\n          boardStyle: boardStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"EditingOn\",\n        style: {\n          display: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(EditBoard, {\n          in_fen: fen,\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this);\n  }\n}\nAnalysisBoard.propTypes = {\n  children: PropTypes.func,\n  fen: PropTypes.string,\n  pgn: PropTypes.string // Add this line\n};\nexport default AnalysisBoard;\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};","map":{"version":3,"names":["React","Component","PropTypes","Chess","Chessboard","EditBoard","jsxDEV","_jsxDEV","STOCKFISH","window","game","AnalysisBoard","constructor","args","state","orientation","evaluation","bestLine","currentPly","future","goToEnd","moves","history","tmp","previous","length","i","move","previous_fen","fen","previous_pgn","pgn","load","loadPgn","setState","isGameOver","engineGame","prepareMove","goToNextMove","shift","goToPreviousMove","unshift","goToStart","options","engine","Worker","stockfishjs","postMessage","onmessage","event","line","data","extractEvaluation","extractBestLine","previousOutput","handleEditBoard","T1","document","getElementById","style","display","T2","onDrop","sourceSquare","targetSquare","legalMoves","verbose","find","from","to","console","log","san","promotion","prevState","evalMatch","match","Math","round","parseInt","turn","bestLineMatch","split","sanMoves","floor","moveNumber","sanMove","push","join","componentDidMount","componentDidUpdate","prevProps","props","render","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","position","width","boardStyle","in_fen","propTypes","func","string","borderRadius","boxShadow","boardsContainer","justifyContent","alignItems"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/AnalysisBoard.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport EditBoard from \"./EditBoard\";\n\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\n\nclass AnalysisBoard extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    fen: PropTypes.string,\n    pgn: PropTypes.string, // Add this line\n  };\n  \n    state = {\n      orientation: \"white\",\n      evaluation: \"\",\n      bestLine: \"\",\n      currentPly: 1,\n      future: [],\n    };\n  componentDidMount() {\n    this.setState({ fen: game.fen() });\n    this.future = [];\n    this.engineGame().prepareMove();\n  }\n\n  goToEnd = () => {\n  const moves = game.history();\n  const tmp = new Chess();\n  const previous = moves.length+this.future.length-1;\n  if (previous >= 0){\n    if (moves.length>0){\n  for(var i=0;i<moves.length;i+=1) {\n    tmp.move(moves[i]);\n  }}\n\n  if (this.future.length -1 >= 0){\n    for(var i=0;i<this.future.length;i+=1) {\n      tmp.move(this.future[i]);\n    }\n  const previous_fen = tmp.fen();\n  const previous_pgn = tmp.pgn();\n  this.future=[];\n  game.load(previous_fen);\n  game.loadPgn(previous_pgn);\n  this.setState({ fen:previous_fen});\n  if (!game.isGameOver()) {\n    this.engineGame().prepareMove();\n  }\n}else{\nreturn;}\n}else{return;}\n};\n\n\n  goToNextMove = () => {\n    if (this.future.length > 0){\n      game.move(this.future[0]);\n      this.setState({ fen:game.fen()});\n      this.future.shift();\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    }\n  return;\n  };\n\n  goToPreviousMove = () => {\n    const moves = game.history();\n    const tmp = new Chess();\n    const previous = moves.length-1;\n    if (previous >= 0){\n    for(var i=0;i<previous;i+=1) {\n      tmp.move(moves[i]);\n    }\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    this.future.unshift(moves[previous]);\n    tmp.move(moves[previous]);\n    game.load(previous_fen);\n    game.loadPgn(previous_pgn);\n    this.setState({ fen:previous_fen});\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  }\n  return;\n  };\n\n\n  goToStart = () => {\n    const moves = game.history();\n    const tmp = new Chess();\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    const previous = moves.length-1;\n    if (previous >= 0){\n    for(var i=0;i<previous;i+=1) {\n      tmp.move(moves[i]);\n    }\n    this.future.unshift(...moves);\n    game.load(previous_fen);\n    game.loadPgn(previous_pgn);\n    this.setState({ fen:previous_fen});\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  }\n  return;\n  };\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.pgn !== this.props.pgn) {\n      game.loadPgn(this.props.pgn);\n      this.setState({ fen: game.fen() });\n      this.engineGame().prepareMove();\n    }\n  }\n  \n/*  componentDidUpdate(prevProps) {\n    // Check if game position has changed\n    if (prevProps.fen !== this.props.fen) {\n      this.setState({ fen: this.props.fen});\n      game.load(this.props.fen);\n      this.engineGame().prepareMove();\n    }\n  }*/\n\n  engineGame = (options) => {\n    options = options || {};\n\n    let engine =\n      typeof STOCKFISH === \"function\"\n        ? STOCKFISH()\n        : new Worker(options.stockfishjs || \"stockfish.js\");\n\n    engine.postMessage(\"uci\");\n\n    engine.onmessage = (event) => {\n        const { currentPly } = this.state;\n      let line;\n\n\n      if (event && typeof event === \"object\") {\n        line = event.data;\n        // Extract evaluation and best continuation line from the Stockfish response\n        const evaluation = this.extractEvaluation(line);\n        const bestLine = this.extractBestLine(line);\n        // Update state with evaluation and best continuation line\n        this.setState({ evaluation, bestLine });\n      } else {\n        line = event;\n      }\n\n      // Process Stockfish analysis here\n      const bestLine = this.extractBestLine(line);\n      this.setState({ previousOutput: bestLine });\n      \n    };\n\n    return {\n      prepareMove: function () {\n        // Send current position to Stockfish for analysis\n        engine.postMessage(\"position fen \" + game.fen());\n        engine.postMessage(\"go depth 15\");\n      },\n    };\n  };\n  handleEditBoard = () => {\n    var T1 = document.getElementById(\"EditingOn\");\n    T1.style.display =  T1.style.display===\"none\"? \"block\": \"none\";\n\n    var T2 = document.getElementById(\"EditingOff\");\n    T2.style.display =  T2.style.display===\"block\"? \"none\": \"block\";\n};\n  onDrop = ({ sourceSquare, targetSquare }) => {\n    const legalMoves = game.moves({ verbose: true });\n    const move = legalMoves.find(\n      (move) => move.from === sourceSquare && move.to === targetSquare\n    );\n\n    if (!move) {\n      console.log(\"Illegal move\");\n      return;\n    } \n\n    if (move.san==this.future[0]){\n      this.future.shift();\n  } else{this.future=[];}\n\n\n  game.move({ from: sourceSquare, to: targetSquare, promotion: \"q\" });\n\n    // Update state with new position\n    // Update state with new position and add move to history\n    this.setState((prevState) => ({\n      fen: game.fen()\n    }));\n\n    this.setState(prevState => ({ currentPly: prevState.currentPly + 1 }));\n\n    // Prepare Stockfish for analysis\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  };\n\n  // Helper function to extract evaluation from the Stockfish response\n  extractEvaluation = (line) => {\n    // Extract the evaluation from the response\n    \n    const evalMatch = line.match(/score cp (-?\\d+)/);\n    if (evalMatch) {\n        const evaluation = (Math.round(parseInt(evalMatch[1])*0.01 * 100) )/ 100;\n        if (evaluation>=0){\n          if (game.turn()==\"b\"){\n            return (-evaluation); \n          }\n          return \"+\"+(evaluation); \n        }\n        if (game.turn()==\"w\"){\n          return (evaluation); \n        }\n        return \"+\"+(-evaluation); \n        \n        \n          // Reverse the sign for white's perspective\n    }\n    return null;\n};\n\n  // Helper function to extract the best continuation line from the Stockfish response\n  // Helper function to extract the best continuation line from the Stockfish response and convert it into the desired format\n// Helper function to extract the best continuation line from the Stockfish response in SAN format\n// Helper function to extract the best continuation line from the Stockfish response in SAN format\nextractBestLine = (line) => {\n  const currentPly=game.history().length + 1;\n  // Extract the best continuation line from the response\n  const bestLineMatch = line.match(/pvSan (.*) bmc/);\n  if (bestLineMatch) {\n    const moves = bestLineMatch[1].split(\" \");\n    const sanMoves = [];\n    for (let i = 0; i < 2 * Math.floor(moves.length / 2); i += 1) {\n      const moveNumber = i+currentPly; // Adjust move numbering\n      const sanMove = moveNumber %2 ===1? `${Math.floor((moveNumber+1)/2)}. ${moves[i]}` : `${Math.floor((moveNumber+1)/2)}... ${moves[i]}`; // Use \"...\" for Black's moves\n      sanMoves.push(sanMove);\n    }\n    return sanMoves.join(\" \");\n  }\n  return this.state.previousOutput;\n};\n\n\nrender() {\n    const { fen, orientation, evaluation, bestLine, currentPly, future } = this.state;\n    return (\n      <div>\n        {this.props.children({\n          fen: fen,\n          orientation: orientation,\n          evaluation: evaluation,\n          bestLine: bestLine,\n          currentPly: currentPly,\n          future: future,\n          goToEnd: this.goToEnd,\n          goToNextMove: this.goToNextMove,\n          goToPreviousMove: this.goToPreviousMove,\n          goToStart: this.goToStart,\n          onDrop: this.onDrop, // Pass onDrop function to children\n          handleEditBoard:this.handleEditBoard,\n        })}\n        <button onClick={this.handleEditBoard}>Edit Board</button>\n        <div id=\"EditingOff\" style={{display:\"block\"}}>\n        <Chessboard\n          position={fen}\n          width={540}\n          onDrop={this.onDrop} // Pass onDrop function to Chessboard\n          orientation={orientation}\n          boardStyle={boardStyle}\n        />\n        </div>\n        <div id=\"EditingOn\" style={{display:\"none\"}}>\n        <EditBoard in_fen={fen}> </EditBoard>\n    </div>  \n      </div>\n    );\n  }\n}\nexport default AnalysisBoard;\n\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\n\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}