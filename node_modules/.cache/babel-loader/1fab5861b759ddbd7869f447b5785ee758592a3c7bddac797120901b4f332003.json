{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/AnalysisBoard.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport EditBoard from \"./EditBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\nclass AnalysisBoard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orientation: \"white\",\n      evaluation: \"\",\n      bestLine: \"\",\n      currentPly: 1,\n      future: [],\n      showEvaluation: false,\n      // Add this line\n      moveHistory: [],\n      fullGame: [],\n      importedGames: [],\n      // Holds imported games\n      showDropdown: false,\n      // Toggles dropdown visibility\n      selectedGame: null,\n      // To store the selected game for display\n      gamesDetails: [] // To store detailed metadata of games\n    };\n    // Method to handle file selection and game import\n    this.handleGameSelect = pgn => {\n      game.reset();\n      const tmp = new Chess();\n      tmp.loadPgn(pgn);\n      this.setState({\n        fen: \"start\"\n      });\n      this.future = tmp.history();\n      this.moveHistory = tmp.history();\n      this.fullGame = this.moveHistory;\n      this.engineGame().prepareMove();\n    };\n    this.handleFileSelect = async event => {\n      const file = event.target.files[0];\n      if (!file) {\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = e => {\n        const fullPgn = e.target.result;\n        // Split the full PGN text into individual games based on empty lines\n        const games = fullPgn.split(/\\n\\n+/);\n        const details = games.map(pgn => {\n          const chess = new Chess();\n          chess.loadPgn(pgn);\n          const headers = chess.header();\n          return {\n            pgn: pgn,\n            details: `${headers.White} vs ${headers.Black}, ${headers.Result}, ${headers.Date}`\n          };\n        });\n        this.setState({\n          importedGames: details,\n          selectedGame: null // Reset selected game when new files are loaded\n        });\n      };\n      reader.readAsText(file);\n    };\n    this.displayGameDetails = pgn => {\n      const chess = new Chess();\n      chess.loadPgn(pgn);\n      const headers = chess.header();\n      return `${headers.White} vs ${headers.Black}, ${headers.Result}, ${headers.Date}`;\n    };\n    this.handleFlipBoard = () => {\n      this.setState(({\n        orientation\n      }) => ({\n        orientation: orientation === 'white' ? 'black' : 'white'\n      }));\n    };\n    this.handleResetBoard = () => {\n      game.reset(); // Reset the game state\n      this.setState({\n        fen: game.fen()\n      });\n      this.future = [];\n      this.moveHistory = [];\n      this.fullGame = [];\n      this.engineGame().prepareMove();\n    };\n    this.toggleStockfishEvaluation = () => {\n      this.setState(prevState => ({\n        showEvaluation: !prevState.showEvaluation\n      }));\n    };\n    this.goToEnd = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous = moves.length + this.future.length - 1;\n      if (previous >= 0) {\n        if (moves.length > 0) {\n          for (var i = 0; i < moves.length; i += 1) {\n            tmp.move(moves[i]);\n          }\n        }\n        if (this.future.length - 1 >= 0) {\n          for (var i = 0; i < this.future.length; i += 1) {\n            tmp.move(this.future[i]);\n          }\n          const previous_fen = tmp.fen();\n          const previous_pgn = tmp.pgn();\n          this.future = [];\n          game.load(previous_fen);\n          game.loadPgn(previous_pgn);\n          this.setState({\n            fen: previous_fen\n          });\n          this.moveHistory = game.history();\n          this.setState({\n            currentPly: this.moveHistory.length\n          });\n          if (!game.isGameOver()) {\n            this.engineGame().prepareMove();\n          }\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n    };\n    this.goToNextMove = () => {\n      if (this.future.length > 0) {\n        game.move(this.future[0]);\n        this.setState({\n          fen: game.fen()\n        });\n        this.future.shift();\n        this.moveHistory = game.history();\n        this.setState({\n          currentPly: this.moveHistory.length\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToPreviousMove = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous = moves.length - 1;\n      if (previous >= 0) {\n        for (var i = 0; i < previous; i += 1) {\n          tmp.move(moves[i]);\n        }\n        const previous_fen = tmp.fen();\n        const previous_pgn = tmp.pgn();\n        this.future.unshift(moves[previous]);\n        tmp.move(moves[previous]);\n        game.load(previous_fen);\n        game.loadPgn(previous_pgn);\n        this.setState({\n          fen: previous_fen\n        });\n        this.moveHistory = game.history();\n        this.setState({\n          currentPly: this.moveHistory.length\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToStart = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous_fen = tmp.fen();\n      const previous_pgn = tmp.pgn();\n      const previous = moves.length - 1;\n      if (previous >= 0) {\n        for (var i = 0; i < previous; i += 1) {\n          tmp.move(moves[i]);\n        }\n        this.future.unshift(...moves);\n        game.load(previous_fen);\n        game.loadPgn(previous_pgn);\n        this.setState({\n          fen: previous_fen\n        });\n        this.moveHistory = [];\n        this.setState({\n          currentPly: this.moveHistory.length\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToMove = moveIndex => {\n      const moves = this.fullGame;\n      const tmp = new Chess();\n\n      // Make moves up to the selected move\n      for (let i = 0; i <= moveIndex; i++) {\n        tmp.move(moves[i]);\n      }\n\n      // Update game state\n      const previous_fen = tmp.fen();\n      const previous_pgn = tmp.pgn();\n      game.loadPgn(previous_pgn);\n      this.setState({\n        fen: previous_fen\n      });\n\n      // Update move history and future\n      const newMoveHistory = tmp.history();\n      this.moveHistory = newMoveHistory;\n      this.future = moves.slice(moveIndex + 1);\n      this.setState({\n        currentPly: this.moveHistory.length\n      });\n\n      // Prepare Stockfish for analysis\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    };\n    /*  componentDidUpdate(prevProps) {\n        // Check if game position has changed\n        if (prevProps.fen !== this.props.fen) {\n          this.setState({ fen: this.props.fen});\n          game.load(this.props.fen);\n          this.engineGame().prepareMove();\n        }\n      }*/\n    this.engineGame = options => {\n      options = options || {};\n      let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n      engine.postMessage(\"uci\");\n      //engine.postMessage(`setoption name multipv value 3`);\n\n      engine.onmessage = event => {\n        const {\n          currentPly\n        } = this.state;\n        let line;\n        if (event && typeof event === \"object\") {\n          line = event.data;\n          // Extract evaluation and best continuation line from the Stockfish response\n          const evaluation = this.extractEvaluation(line);\n          const bestLine = this.extractBestLine(line);\n          // Update state with evaluation and best continuation line\n          this.setState({\n            evaluation,\n            bestLine\n          });\n        } else {\n          line = event;\n        }\n\n        // Process Stockfish analysis here\n        const bestLine = this.extractBestLine(line);\n        this.setState({\n          previousOutput: bestLine\n        });\n      };\n      return {\n        prepareMove: function () {\n          // Send current position to Stockfish for analysis\n          engine.postMessage(\"position fen \" + game.fen());\n          engine.postMessage(\"go depth 15\");\n        }\n      };\n    };\n    this.handleEditBoard = () => {\n      var T1 = document.getElementById(\"EditingOn\");\n      T1.style.display = T1.style.display === \"none\" ? \"block\" : \"none\";\n      var T2 = document.getElementById(\"EditingOff\");\n      T2.style.display = T2.style.display === \"block\" ? \"none\" : \"block\";\n    };\n    this.loadGameFromPgn = () => {\n      const {\n        game\n      } = this.state;\n      const {\n        pgn\n      } = this.props;\n      if (pgn) {\n        game.load_pgn(pgn);\n        this.setState({\n          fen: game.fen()\n        });\n      }\n    };\n    this.onDrop = ({\n      sourceSquare,\n      targetSquare\n    }) => {\n      const legalMoves = game.moves({\n        verbose: true\n      });\n      const move = legalMoves.find(move => move.from === sourceSquare && move.to === targetSquare);\n      if (!move) {\n        console.log(\"Illegal move\");\n        return;\n      }\n      if (move.san === this.future[0]) {\n        this.future.shift();\n      } else {\n        this.future = [];\n      }\n      game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\"\n      });\n      this.moveHistory = game.history();\n      this.setState({\n        currentPly: this.moveHistory.length\n      });\n      this.fullGame = this.moveHistory.concat(this.future);\n\n      // Update state with new position\n      // Update state with new position and add move to history\n      this.setState(prevState => ({\n        fen: game.fen()\n      }));\n      // Prepare Stockfish for analysis\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    };\n    // Helper function to extract evaluation from the Stockfish response\n    this.extractEvaluation = line => {\n      const mateEvalMatch = line.match(/score mate (.+)/);\n\n      // Extract the evaluation from the response\n\n      const evalMatch = line.match(/score cp (-?\\d+)/);\n      if (evalMatch) {\n        const evaluation = Math.round(parseInt(evalMatch[1]) * 0.01 * 100) / 100;\n        if (evaluation >= 0) {\n          if (game.turn() === \"b\") {\n            return -evaluation;\n          }\n          return \"+\" + evaluation;\n        }\n        if (game.turn() === \"w\") {\n          return evaluation;\n        }\n        return \"+\" + -evaluation;\n\n        // Reverse the sign for white's perspective\n      } else {\n        if (mateEvalMatch) {\n          const evaluation = parseInt(mateEvalMatch[1]);\n          if (evaluation >= 0) {\n            if (game.turn() === \"b\") {\n              return \"Black Mate in \" + evaluation;\n            }\n            return \"White Mate in \" + evaluation;\n          }\n          if (game.turn() === \"w\") {\n            return \"Black Mate in \" + -evaluation;\n          }\n          return \"White Mate in \" + -evaluation;\n        }\n      }\n      return null;\n    };\n    // Helper function to extract the best continuation line from the Stockfish response\n    // Helper function to extract the best continuation line from the Stockfish response and convert it into the desired format\n    // Helper function to extract the best continuation line from the Stockfish response in SAN format\n    // Helper function to extract the best continuation line from the Stockfish response in SAN format\n    this.extractBestLine = line => {\n      const currentPly = game.history().length + 1;\n      // Extract the best continuation line from the response\n      const bestLineMatch = line.match(/pvSan (.*) bmc/);\n      if (bestLineMatch) {\n        const moves = bestLineMatch[1].split(\" \");\n        const sanMoves = [];\n        if (moves.length !== 1) {\n          for (let i = 0; i < Math.min(2 * Math.floor(moves.length / 2), 14); i += 1) {\n            const moveNumber = i + currentPly; // Adjust move numbering\n            const sanMove = moveNumber % 2 === 1 ? `${Math.floor((moveNumber + 1) / 2)}.${moves[i]}` : `${Math.floor((moveNumber + 1) / 2)}...${moves[i]}`; // Use \"...\" for Black's moves\n            sanMoves.push(sanMove);\n          }\n          return sanMoves.join(\" \");\n        } else {\n          const sanMove = currentPly % 2 === 1 ? `${Math.floor((currentPly + 1) / 2)}.${moves[0]}` : `${Math.floor((currentPly + 1) / 2)}...${moves[0]}`; // Use \"...\" for Black's moves\n          return sanMove;\n        }\n      }\n      return this.state.previousOutput;\n    };\n  }\n  componentDidMount() {\n    if (this.props.pgn) {\n      game.loadPgn(this.props.pgn);\n      this.future = [];\n      this.moveHistory = game.history();\n      this.fullGame = this.moveHistory.concat(this.future);\n      this.importedGames = [];\n    } else {\n      game.reset();\n      this.future = [];\n      this.moveHistory = [];\n      this.fullGame = [];\n      this.importedGames = [];\n      this.setState({\n        fen: \"start\"\n      });\n    }\n    this.engineGame().prepareMove();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.selectedGame !== this.state.selectedGame && this.state.selectedGame) {\n      const chess = new Chess();\n      chess.loadPgn(this.state.selectedGame);\n      this.setState({\n        fen: chess.fen()\n      });\n    }\n    if (prevProps.pgn !== this.props.pgn && this.props.pgn) {\n      game.reset(); // Reset the game state\n      game.loadPgn(this.props.pgn);\n      this.setState({\n        fen: game.fen(),\n        currentPly: 1,\n        future: []\n      });\n      this.moveHistory = game.history();\n      this.engineGame().prepareMove();\n    }\n  }\n  render() {\n    const {\n      fen,\n      orientation,\n      evaluation,\n      bestLine,\n      currentPly,\n      future,\n      showEvaluation,\n      moveHistory,\n      fullGame,\n      importedGames,\n      showDropdown\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-toolkit\",\n        id: \"EditingOff\",\n        style: {\n          display: \"block\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"import-dropdown\",\n          onClick: () => this.setState({\n            showDropdown: !this.state.showDropdown\n          }),\n          children: [\"Games Imported From PGN Databases: \", importedGames.length, showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: importedGames.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Click Below to Import games\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: importedGames.map((pgn, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                onClick: () => this.loadGameFromPgn(pgn),\n                children: [\"Game \", index + 1]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.handleFileSelect,\n          style: {\n            position: 'absolute',\n            bottom: 10,\n            left: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: boardsContainer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-board-container\",\n            style: {\n              display: \"block\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Chessboard, {\n              position: fen,\n              width: 520,\n              onDrop: this.onDrop,\n              orientation: orientation,\n              boardStyle: boardStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"move-history\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Move History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: this.fullGame && this.fullGame.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: index === currentPly - 1 ? 'selected' : '',\n              onClick: () => this.goToMove(index),\n              children: [index % 2 === 0 ? `${index / 2 + 1}. ` : `${(index - 1) / 2 + 1}...`, move]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleEditBoard,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleFlipBoard,\n            children: \"Flip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleResetBoard,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.toggleStockfishEvaluation,\n            children: \"\\uD83D\\uDC1F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.goToStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.goToPreviousMove,\n            children: \"\\u21E6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.goToNextMove,\n            children: \"\\u21E8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.goToEnd,\n            children: \"End\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 29\n          }, this), showEvaluation &&\n          /*#__PURE__*/\n          // Only render this block if showEvaluation is true\n          _jsxDEV(\"div\", {\n            className: \"stockfish-evaluation\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Stockfish Eval: \", evaluation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: bestLine\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-board-container\",\n        id: \"EditingOn\",\n        style: {\n          display: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(EditBoard, {\n          in_fen: fen,\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this);\n  }\n}\nAnalysisBoard.propTypes = {\n  children: PropTypes.func,\n  fen: PropTypes.string,\n  pgn: PropTypes.string // Add this line\n};\nexport default AnalysisBoard;\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};","map":{"version":3,"names":["React","Component","axios","PropTypes","Chess","Chessboard","EditBoard","jsxDEV","_jsxDEV","STOCKFISH","window","game","AnalysisBoard","constructor","args","state","orientation","evaluation","bestLine","currentPly","future","showEvaluation","moveHistory","fullGame","importedGames","showDropdown","selectedGame","gamesDetails","handleGameSelect","pgn","reset","tmp","loadPgn","setState","fen","history","engineGame","prepareMove","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","games","split","details","map","chess","headers","header","White","Black","Result","Date","readAsText","displayGameDetails","handleFlipBoard","handleResetBoard","toggleStockfishEvaluation","prevState","goToEnd","moves","previous","length","i","move","previous_fen","previous_pgn","load","isGameOver","goToNextMove","shift","goToPreviousMove","unshift","goToStart","goToMove","moveIndex","newMoveHistory","slice","options","engine","Worker","stockfishjs","postMessage","onmessage","line","data","extractEvaluation","extractBestLine","previousOutput","handleEditBoard","T1","document","getElementById","style","display","T2","loadGameFromPgn","props","load_pgn","onDrop","sourceSquare","targetSquare","legalMoves","verbose","find","from","to","console","log","san","promotion","concat","mateEvalMatch","match","evalMatch","Math","round","parseInt","turn","bestLineMatch","sanMoves","min","floor","moveNumber","sanMove","push","join","componentDidMount","componentDidUpdate","prevProps","render","children","className","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","index","type","onChange","position","bottom","left","boardsContainer","width","boardStyle","in_fen","propTypes","func","string","borderRadius","boxShadow","justifyContent","alignItems"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/AnalysisBoard.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport EditBoard from \"./EditBoard\";\n\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\n\nclass AnalysisBoard extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    fen: PropTypes.string,\n    pgn: PropTypes.string, // Add this line\n  };\n  \n  state = {\n    orientation: \"white\",\n    evaluation: \"\",\n    bestLine: \"\",\n    currentPly: 1,\n    future: [],\n    showEvaluation: false, // Add this line\n    moveHistory: [],\n    fullGame: [],\n    importedGames: [], // Holds imported games\n    showDropdown: false, // Toggles dropdown visibility\n    selectedGame: null, // To store the selected game for display\n    gamesDetails: [] // To store detailed metadata of games\n  };\n    componentDidMount() {\n      if (this.props.pgn) {\n          game.loadPgn(this.props.pgn);\n          this.future = [];\n          this.moveHistory= game.history();\n          this.fullGame = this.moveHistory.concat(this.future);\n          this.importedGames = [];\n\n      }else{\n        game.reset();\n        this.future=[];\n        this.moveHistory=[];\n        this.fullGame = [];\n        this.importedGames = [];\n        this.setState({ fen: \"start\"});}\n      this.engineGame().prepareMove();\n  }\n  // Method to handle file selection and game import\n  handleGameSelect = (pgn) => {\n    game.reset();\n    const tmp = new Chess();\n    tmp.loadPgn(pgn);\n    this.setState({ fen: \"start\"});\n    this.future = tmp.history();\n    this.moveHistory= tmp.history();\n    this.fullGame = this.moveHistory;\n    this.engineGame().prepareMove();\n  }   \n  handleFileSelect = async (event) => {\n    const file = event.target.files[0];\n    if (!file) {\n      return;\n    }\n  \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const fullPgn = e.target.result;\n      // Split the full PGN text into individual games based on empty lines\n      const games = fullPgn.split(/\\n\\n+/);\n      const details = games.map(pgn => {\n        const chess = new Chess();\n        chess.loadPgn(pgn);\n        const headers = chess.header();\n        return {\n          pgn: pgn,\n          details: `${headers.White} vs ${headers.Black}, ${headers.Result}, ${headers.Date}`\n        };\n      });\n  \n      this.setState({\n        importedGames: details,\n        selectedGame: null  // Reset selected game when new files are loaded\n      });\n    };\n    reader.readAsText(file);\n};\n\n  \n  displayGameDetails = (pgn) => {\n    const chess = new Chess();\n    chess.loadPgn(pgn);\n    const headers = chess.header();\n    return `${headers.White} vs ${headers.Black}, ${headers.Result}, ${headers.Date}`;\n  };\n  \n  handleFlipBoard = () => {\n    this.setState(({ orientation }) => ({\n      orientation: orientation === 'white' ? 'black' : 'white',\n    }));\n  };\n\n  handleResetBoard = () => {\n    game.reset(); // Reset the game state\n    this.setState(({ fen:game.fen() }));\n    this.future=[];\n    this.moveHistory=[];\n    this.fullGame = [];\n    this.engineGame().prepareMove();\n  };\n  \n  toggleStockfishEvaluation = () => {\n    this.setState(prevState => ({\n      showEvaluation: !prevState.showEvaluation\n    }));\n  };\n  \n\n  goToEnd = () => {\n  const moves = game.history();\n  const tmp = new Chess();\n  const previous = moves.length+this.future.length-1;\n  if (previous >= 0){\n    if (moves.length>0){\n  for(var i=0;i<moves.length;i+=1) {\n    tmp.move(moves[i]);\n  }}\n\n  if (this.future.length -1 >= 0){\n    for(var i=0;i<this.future.length;i+=1) {\n      tmp.move(this.future[i]);\n    }\n  const previous_fen = tmp.fen();\n  const previous_pgn = tmp.pgn();\n  this.future=[];\n  game.load(previous_fen);\n  game.loadPgn(previous_pgn);\n  this.setState({ fen:previous_fen});\n  this.moveHistory=game.history();\n  this.setState({ currentPly: this.moveHistory.length});\n  if (!game.isGameOver()) {\n    this.engineGame().prepareMove();\n  }\n}else{\nreturn;}\n}else{return;}\n};\n\n\n  goToNextMove = () => {\n    if (this.future.length > 0){\n      game.move(this.future[0]);\n      this.setState({ fen:game.fen()});\n      this.future.shift();\n      this.moveHistory=game.history();\n      this.setState({ currentPly: this.moveHistory.length});\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    }\n  return;\n  };\n\n  goToPreviousMove = () => {\n    const moves = game.history();\n    const tmp = new Chess();\n    const previous = moves.length-1;\n    if (previous >= 0){\n    for(var i=0;i<previous;i+=1) {\n      tmp.move(moves[i]);\n    }\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    this.future.unshift(moves[previous]);\n    tmp.move(moves[previous]);\n    game.load(previous_fen);\n    game.loadPgn(previous_pgn);\n    this.setState({ fen:previous_fen});\n    this.moveHistory=game.history();\n    this.setState({ currentPly: this.moveHistory.length});\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  }\n  return;\n  };\n\n\n  goToStart = () => {\n    const moves = game.history();\n    const tmp = new Chess();\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    const previous = moves.length-1;\n    if (previous >= 0){\n    for(var i=0;i<previous;i+=1) {\n      tmp.move(moves[i]);\n    }\n    this.future.unshift(...moves);\n    game.load(previous_fen);\n    game.loadPgn(previous_pgn);\n    this.setState({ fen:previous_fen});\n    this.moveHistory=[];\n    this.setState({ currentPly: this.moveHistory.length});\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  }\n  return;\n  };\n\n  goToMove = (moveIndex) => {\n    const moves = this.fullGame;\n    const tmp = new Chess();\n  \n    // Make moves up to the selected move\n    for (let i = 0; i <= moveIndex; i++) {\n      tmp.move(moves[i]);\n    }\n  \n    // Update game state\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    game.loadPgn(previous_pgn);\n    this.setState({ fen: previous_fen});\n  \n    // Update move history and future\n    const newMoveHistory = tmp.history();\n    this.moveHistory = newMoveHistory;\n    this.future = moves.slice(moveIndex + 1);\n    this.setState({ currentPly: this.moveHistory.length});\n  \n    // Prepare Stockfish for analysis\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  };\n\n\n  componentDidUpdate(prevProps, prevState) {\n      if (prevState.selectedGame !== this.state.selectedGame && this.state.selectedGame) {\n        const chess = new Chess();\n        chess.loadPgn(this.state.selectedGame);\n        this.setState({ fen: chess.fen() });\n      }\n    if (prevProps.pgn !== this.props.pgn && this.props.pgn) {\n        game.reset(); // Reset the game state\n        game.loadPgn(this.props.pgn);\n        this.setState({ fen: game.fen(), currentPly: 1, future: [] });\n        this.moveHistory=game.history();\n        this.engineGame().prepareMove();\n    }\n}\n  \n/*  componentDidUpdate(prevProps) {\n    // Check if game position has changed\n    if (prevProps.fen !== this.props.fen) {\n      this.setState({ fen: this.props.fen});\n      game.load(this.props.fen);\n      this.engineGame().prepareMove();\n    }\n  }*/\n\n  engineGame = (options) => {\n    options = options || {};\n\n    let engine =\n      typeof STOCKFISH === \"function\"\n        ? STOCKFISH()\n        : new Worker(options.stockfishjs || \"stockfish.js\");\n\n    engine.postMessage(\"uci\");\n    //engine.postMessage(`setoption name multipv value 3`);\n\n    engine.onmessage = (event) => {\n\n        const { currentPly } = this.state;\n      let line;\n\n\n      if (event && typeof event === \"object\") {\n        line = event.data;\n        // Extract evaluation and best continuation line from the Stockfish response\n        const evaluation = this.extractEvaluation(line);\n        const bestLine = this.extractBestLine(line);\n        // Update state with evaluation and best continuation line\n        this.setState({ evaluation, bestLine });\n      } else {\n        line = event;\n      }\n\n      // Process Stockfish analysis here\n      const bestLine = this.extractBestLine(line);\n      this.setState({ previousOutput: bestLine });\n      \n    };\n\n    return {\n      prepareMove: function () {\n        // Send current position to Stockfish for analysis\n        engine.postMessage(\"position fen \" + game.fen());\n        engine.postMessage(\"go depth 15\");\n      },\n    };\n  };\n  handleEditBoard = () => {\n    var T1 = document.getElementById(\"EditingOn\");\n    T1.style.display =  T1.style.display===\"none\"? \"block\": \"none\";\n\n    var T2 = document.getElementById(\"EditingOff\");\n    T2.style.display =  T2.style.display===\"block\"? \"none\": \"block\";\n};\n\nloadGameFromPgn = () => {\n  const { game } = this.state;\n  const { pgn } = this.props;\n  if (pgn) {\n    game.load_pgn(pgn);\n    this.setState({ fen: game.fen() });\n  }\n};\n  onDrop = ({ sourceSquare, targetSquare }) => {\n    const legalMoves = game.moves({ verbose: true });\n    const move = legalMoves.find(\n      (move) => move.from === sourceSquare && move.to === targetSquare\n    );\n\n    if (!move) {\n      console.log(\"Illegal move\");\n      return;\n    } \n\n    if (move.san===this.future[0]){\n      this.future.shift();\n  } else{this.future=[];}\n\n\n  game.move({ from: sourceSquare, to: targetSquare, promotion: \"q\" });\n  this.moveHistory=game.history();\n  this.setState({ currentPly: this.moveHistory.length});\n  this.fullGame = this.moveHistory.concat(this.future);\n  \n\n    // Update state with new position\n    // Update state with new position and add move to history\n    this.setState((prevState) => ({\n      fen: game.fen()\n    }));\n    // Prepare Stockfish for analysis\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  };\n\n  // Helper function to extract evaluation from the Stockfish response\n  extractEvaluation = (line) => {\n    const mateEvalMatch = line.match(/score mate (.+)/);\n    \n    // Extract the evaluation from the response\n    \n    const evalMatch = line.match(/score cp (-?\\d+)/);\n    if (evalMatch) {\n        const evaluation = (Math.round(parseInt(evalMatch[1])*0.01 * 100) )/ 100;\n        if (evaluation>=0){\n          if (game.turn()===\"b\"){\n            return (-evaluation); \n          }\n          return \"+\"+(evaluation); \n        }\n        if (game.turn()===\"w\"){\n          return (evaluation); \n        }\n        return \"+\"+(-evaluation); \n        \n        \n          // Reverse the sign for white's perspective\n    } else {if (mateEvalMatch){\n      const evaluation = (parseInt(mateEvalMatch[1]));\n      if (evaluation>=0){\n      if (game.turn()===\"b\"){\n      return (\"Black Mate in \" + (evaluation)); \n    }return (\"White Mate in \" + (evaluation)); \n  }\n    if (game.turn()===\"w\"){\n      return (\"Black Mate in \" + (-evaluation)); \n  } return (\"White Mate in \" + (-evaluation)); \n}\n  }  return null;\n};\n\n  // Helper function to extract the best continuation line from the Stockfish response\n  // Helper function to extract the best continuation line from the Stockfish response and convert it into the desired format\n// Helper function to extract the best continuation line from the Stockfish response in SAN format\n// Helper function to extract the best continuation line from the Stockfish response in SAN format\nextractBestLine = (line) => {\n  const currentPly=game.history().length + 1;\n  // Extract the best continuation line from the response\n  const bestLineMatch = line.match(/pvSan (.*) bmc/);\n  if (bestLineMatch) {\n    const moves = bestLineMatch[1].split(\" \");\n    const sanMoves = [];\n    if (moves.length !==1){\n    for (let i = 0; i < Math.min(2 * Math.floor(moves.length / 2),14); i += 1) {\n      const moveNumber = i+currentPly; // Adjust move numbering\n      const sanMove = moveNumber %2 ===1? `${Math.floor((moveNumber+1)/2)}.${moves[i]}` : `${Math.floor((moveNumber+1)/2)}...${moves[i]}`; // Use \"...\" for Black's moves\n      sanMoves.push(sanMove);\n    }\n    return sanMoves.join(\" \");\n  } else{\n    const sanMove = currentPly %2 ===1? `${Math.floor((currentPly+1)/2)}.${moves[0]}` : `${Math.floor((currentPly+1)/2)}...${moves[0]}`; // Use \"...\" for Black's moves\n    return sanMove;\n  }\n    \n  }\n  return this.state.previousOutput;\n};\n\n\nrender() {\n  const { fen, orientation, evaluation, bestLine, currentPly, future, showEvaluation, moveHistory, fullGame, importedGames, showDropdown } = this.state;\n    return (\n      <div>\n        <div className=\"analysis-toolkit\" id=\"EditingOff\" style={{display:\"block\"}}>\n        {/* Dropdown for imported games */}\n        <div className=\"import-dropdown\" onClick={() => this.setState({ showDropdown: !this.state.showDropdown })}>\n          Games Imported From PGN Databases: {importedGames.length}\n          {showDropdown && (\n            <div>\n              {importedGames.length === 0 ? (\n                <p>Click Below to Import games</p>\n              ) : (\n                <ul>\n                  {importedGames.map((pgn, index) => (\n                    <li key={index} onClick={() => this.loadGameFromPgn(pgn)}>\n                      Game {index + 1}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          )}\n        </div>\n          <input type=\"file\" onChange={this.handleFileSelect} style={{ position: 'absolute', bottom: 10, left: 10 }} />\n          \n          <div style={boardsContainer}>\n            <div className=\"analysis-board-container\" style={{display: \"block\"}}>\n              <Chessboard\n                position={fen}\n                width={520}\n                onDrop={this.onDrop}\n                orientation={orientation}\n                boardStyle={boardStyle}\n              />\n            </div>\n          </div>\n   \n        <div className=\"move-history\">\n          <h3>Move History</h3>\n          <ul>\n            {this.fullGame && this.fullGame.map((move, index) => (\n              <li\n                key={index}\n                className={index === currentPly -1  ? 'selected' : ''}\n                onClick={() => this.goToMove(index)}\n              >\n                {index % 2 === 0 ? `${index / 2 + 1}. ` : `${(index-1) / 2 + 1}...` }{move}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"control-panel\" >\n        <button onClick={this.handleEditBoard}>Edit</button>\n        <button onClick={this.handleFlipBoard}>Flip</button>\n        <button onClick={this.handleResetBoard}>Reset</button>\n        <button onClick={this.toggleStockfishEvaluation}>🐟</button>\n        \n                            <button onClick={this.goToStart}>Start</button>\n                            <button onClick={this.goToPreviousMove}>⇦</button>\n                            <button onClick={this.goToNextMove}>⇨</button>\n                            <button onClick={this.goToEnd}>End</button>\n                            {showEvaluation && ( // Only render this block if showEvaluation is true\n          <div className=\"stockfish-evaluation\">\n            <div>Stockfish Eval: {evaluation}</div>\n            <div>{bestLine}</div>\n          </div>\n        )}\n                            </div>\n                            \n        \n      </div> \n        <div className=\"edit-board-container\" id=\"EditingOn\" style={{display:\"none\"}}>\n        <EditBoard in_fen={fen}> </EditBoard>\n     \n    </div>\n\n      </div>\n      \n    );\n  }\n}\nexport default AnalysisBoard;\n\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\n\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}