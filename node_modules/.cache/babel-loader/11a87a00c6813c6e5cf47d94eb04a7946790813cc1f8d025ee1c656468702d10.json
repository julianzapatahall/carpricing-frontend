{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n  const [processing, setProcessing] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState(null);\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const handleStart = () => {\n    setProcessing(true);\n    const games = importedGames;\n    processGames(games);\n  };\n  const processGames = async games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    for (let index = 0; index < games.length; index++) {\n      const game = games[index];\n      chess.loadPgn(game);\n      chess.deleteComments();\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    }\n    setThePgnList(pgnList);\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n    // Filter for lines with probability greater than 0.2\n    const filteredByProbabilityDF = filteredLongDF.filter(row => row.LineProbability >= 0.2);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      } else {\n        uniqueLinesStr += row.Line + \"//\";\n        return true;\n      }\n    });\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameID: row.GameID,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    await evaluateAndAnnotateGames(sortedLongDF, pgnList);\n    setProcessing(false);\n  };\n  const evaluatePosition = fen => {\n    return new Promise(resolve => {\n      stockfish.postMessage(`position fen ${fen}`);\n      stockfish.postMessage(\"go depth 16\");\n      stockfish.onmessage = event => {\n        const line = event.data;\n        const depthMatch = line.match(/depth (\\d+)/);\n        const evalMatch = line.match(/score cp (-?\\d+)/);\n        if (depthMatch && evalMatch) {\n          const depth = parseInt(depthMatch[1], 10);\n          if (depth === 15) {\n            const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n            resolve(evaluation);\n          }\n        }\n      };\n    });\n  };\n  const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n    const chess = new Chess();\n    const evaluatedGames = [];\n    const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n    const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n    for (let gameID = 0; gameID < pgnList.length; gameID++) {\n      if (uniqueGameIDs.includes(gameID)) {\n        const pgn = pgnList[gameID];\n        chess.loadPgn(pgn);\n        const chess2 = new Chess();\n        chess2.loadPgn(pgn);\n        chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", {\n          preserveHeaders: true\n        });\n        const moves = chess.history();\n        for (let i = 0; i < maxPly && i < moves.length; i++) {\n          chess2.move(moves[i]);\n          const fen = chess2.fen();\n          const origevaluation = await evaluatePosition(fen);\n          const evaluation = i % 2 === 0 ? String(parseFloat(origevaluation) * -1) : String(parseFloat(origevaluation));\n          chess2.setComment(evaluation);\n        }\n        evaluatedGames.push(chess2.pgn());\n      } else {\n        evaluatedGames.push(pgnList[gameID]);\n      }\n    }\n    processEvaluatedGames(evaluatedGames, maxPly);\n  };\n  const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    chess.loadPgn(evaluatedPGNs[0]);\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const commentsWithFens = chess.getComments();\n      const comments = commentsWithFens.map(item => item.comment);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      valList.push(parseFloat(comments[0]));\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < maxPly && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n        valList.push(parseFloat(comments[i]));\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= maxPly; j++) {\n      initialColnames.push(\"Line\" + String(j));\n      initialColnames.push(\"EVAL\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < maxPly; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= maxPly; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= maxPly; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n    // Filter for lines with probability greater than 0.2\n    const filteredByProbabilityDF = filteredLongDF.filter(row => row.LineProbability >= 0.2);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      } else {\n        uniqueLinesStr += row.Line + \"//\";\n        return true;\n      }\n    });\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = \"EVAL\";\n      const evaluation = row[evalColumn];\n      if (evaluation >= 2.5) {\n        row.MistakeType = \"Fatal Blunder\";\n      } else if (evaluation >= 1.0) {\n        row.MistakeType = \"Major Mistake\";\n      } else if (evaluation >= 0.6) {\n        row.MistakeType = \"Slight Inaccuracy\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  const toggleDropdown = dropdown => {\n    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/our-team\",\n              children: \"Our Team\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            fontSize: '36px',\n            marginBottom: '20px'\n          },\n          children: \"Blunder Punisher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentName\",\n              children: \"Opponent Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"opponentName\",\n              value: opponentName,\n              onChange: e => setOpponentName(e.target.value),\n              style: {\n                width: '200px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentColor\",\n              children: \"Opponent Color:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"opponentColor\",\n              value: opponentColor,\n              onChange: e => setOpponentColor(e.target.value),\n              style: {\n                width: '200px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"precisionLevel\",\n              children: \"Precision Level:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"precisionLevel\",\n              value: precisionLevel,\n              onChange: e => setPrecisionLevel(e.target.value),\n              style: {\n                width: '200px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Amateur/SemiPro\",\n                children: \"Amateur/SemiPro (5s-1min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Professional\",\n                children: \"Professional (1min-10min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 657,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"GM\",\n                children: \"GM (1min-30min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 25\n          }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please wait, do not refresh or close the tab...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of games in the file: \", gamesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"common-lines\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Most Common Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [line, \" - \", count]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Filtered Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 25\n          }, this), filteredData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No data available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-header\",\n                onClick: () => toggleDropdown('FatalBlunders'),\n                children: [\"Fatal Blunders (\", filteredData.filter(row => row.MistakeType === 'Fatal Blunder').length, \")\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `triangle ${activeDropdown === 'FatalBlunders' ? 'open' : ''}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 680,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 37\n              }, this), activeDropdown === 'FatalBlunders' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-content\",\n                children: filteredData.filter(row => row.MistakeType === 'Fatal Blunder').map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: row.Line.replace(/\\*/g, ' ')\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 685,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 683,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-header\",\n                onClick: () => toggleDropdown('MajorMistakes'),\n                children: [\"Major Mistakes (\", filteredData.filter(row => row.MistakeType === 'Major Mistake').length, \")\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `triangle ${activeDropdown === 'MajorMistakes' ? 'open' : ''}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 695,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 37\n              }, this), activeDropdown === 'MajorMistakes' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-content\",\n                children: filteredData.filter(row => row.MistakeType === 'Major Mistake').map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: row.Line.replace(/\\*/g, ' ')\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-header\",\n                onClick: () => toggleDropdown('SlightInaccuracies'),\n                children: [\"Slight Inaccuracies (\", filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').length, \")\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `triangle ${activeDropdown === 'SlightInaccuracies' ? 'open' : ''}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 710,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 37\n              }, this), activeDropdown === 'SlightInaccuracies' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-content\",\n                children: filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: row.Line.replace(/\\*/g, ' ')\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 715,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 713,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 727,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 604,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"RXMLllYWM/Eab8NraMNiUV5kbfQ=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","logo","logoWhite","jsxDEV","_jsxDEV","Fragment","_Fragment","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","thePgnList","setThePgnList","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","activeDropdown","setActiveDropdown","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","readAsText","handleStart","processGames","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","index","loadPgn","deleteComments","moves","history","push","valList","triangle","String","pgn","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","filteredDF","moveProb1","Line1","totalGames","forEach","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","Math","ceil","filteredLongDFUnsorted","undefined","filteredLongDF","sort","a","b","filteredByProbabilityDF","LineProbability","uniqueLinesStr","nonSubsetLongDF","includes","groupedByLine","isNaN","Infinity","GameIDs","max","Object","values","NaN","groupedLongDF","sortedLongDF","categorizedLines","categorizeLines","findCommonLines","evaluateAndAnnotateGames","evaluatePosition","fen","Promise","resolve","onmessage","line","data","depthMatch","match","evalMatch","depth","parseInt","toFixed","minimalGroupedDF","evaluatedGames","maxPly","uniqueGameIDs","Set","gameID","chess2","load","preserveHeaders","move","origevaluation","parseFloat","setComment","processEvaluatedGames","evaluatedPGNs","commentsWithFens","getComments","comments","item","comment","evalColumn","MistakeType","slice","join","sortedLines","entries","toggleDropdown","dropdown","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","marginBottom","type","onChange","htmlFor","id","value","width","onClick","count","replace","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n    const [processing, setProcessing] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(null);\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n\n    const handleStart = () => {\n        setProcessing(true);\n        const games = importedGames;\n        processGames(games);\n    };\n\n    const processGames = async (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        for (let index = 0; index < games.length; index++) {\n            const game = games[index];\n            chess.loadPgn(game);\n            chess.deleteComments();\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        }\n\n        setThePgnList(pgnList);\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        // Filter for lines with probability greater than 0.2\n        const filteredByProbabilityDF = filteredLongDF.filter(row => row.LineProbability >= 0.2);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n            if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n                return false;\n            } else {\n                uniqueLinesStr += row.Line + \"//\";\n                return true;\n            }\n        });\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameID: row.GameID,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n\n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n\n        await evaluateAndAnnotateGames(sortedLongDF, pgnList);\n\n        setProcessing(false);\n    };\n\n    const evaluatePosition = (fen) => {\n        return new Promise((resolve) => {\n            stockfish.postMessage(`position fen ${fen}`);\n            stockfish.postMessage(\"go depth 16\");\n\n            stockfish.onmessage = (event) => {\n                const line = event.data;\n                const depthMatch = line.match(/depth (\\d+)/);\n                const evalMatch = line.match(/score cp (-?\\d+)/);\n\n                if (depthMatch && evalMatch) {\n                    const depth = parseInt(depthMatch[1], 10);\n                    if (depth === 15) {\n                        const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n                        resolve(evaluation);\n                    }\n                }\n            };\n        });\n    };\n\n    const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n        const chess = new Chess();\n        const evaluatedGames = [];\n        const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n\n        const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n        for (let gameID = 0; gameID < pgnList.length; gameID++) {\n            if (uniqueGameIDs.includes(gameID)) {\n                const pgn = pgnList[gameID];\n                chess.loadPgn(pgn);\n                const chess2 = new Chess();\n                chess2.loadPgn(pgn);\n                chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", { preserveHeaders: true });\n                const moves = chess.history();\n\n                for (let i = 0; i < maxPly && i < moves.length; i++) {\n                    chess2.move(moves[i]);\n                    const fen = chess2.fen();\n                    const origevaluation = await evaluatePosition(fen);\n                    const evaluation = i % 2 === 0 ? String(parseFloat(origevaluation) * (-1)) : String(parseFloat(origevaluation));\n                    chess2.setComment(evaluation);\n                }\n\n                evaluatedGames.push(chess2.pgn());\n            } else {\n                evaluatedGames.push(pgnList[gameID]);\n            }\n        }\n\n        processEvaluatedGames(evaluatedGames, maxPly);\n    };\n\n    const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n        chess.loadPgn(evaluatedPGNs[0]);\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n            const commentsWithFens = chess.getComments();\n            const comments = commentsWithFens.map(item => item.comment);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n            valList.push(parseFloat(comments[0]));\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < maxPly && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n                valList.push(parseFloat(comments[i]));\n            }\n            fullValList.push(valList);\n        });\n\n        for (let j = 1; j <= maxPly; j++) {\n            initialColnames.push(\"Line\" + String(j));\n            initialColnames.push(\"EVAL\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < maxPly; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= maxPly; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= maxPly; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        // Filter for lines with probability greater than 0.2\n        const filteredByProbabilityDF = filteredLongDF.filter(row => row.LineProbability >= 0.2);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n            if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n                return false;\n            } else {\n                uniqueLinesStr += row.Line + \"//\";\n                return true;\n            }\n        });\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n\n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = \"EVAL\";\n            const evaluation = row[evalColumn];\n\n            if (evaluation >= 2.5) {\n                row.MistakeType = \"Fatal Blunder\";\n            } else if (evaluation >= 1.0) {\n                row.MistakeType = \"Major Mistake\";\n            } else if (evaluation >= 0.6) {\n                row.MistakeType = \"Slight Inaccuracy\";\n            } else {\n                row.MistakeType = \"None\";\n            }\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    const toggleDropdown = (dropdown) => {\n        setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/our-team\">Our Team</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <section className=\"hero3\">\n                    <h1 style={{ fontSize: '36px', marginBottom: '20px' }}>Blunder Punisher</h1>\n                    <div className=\"form-container\">\n                        <input type=\"file\" onChange={handleFileSelect} />\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentName\">Opponent Name:</label>\n                            <input\n                                type=\"text\"\n                                id=\"opponentName\"\n                                value={opponentName}\n                                onChange={(e) => setOpponentName(e.target.value)}\n                                style={{ width: '200px' }}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentColor\">Opponent Color:</label>\n                            <select\n                                id=\"opponentColor\"\n                                value={opponentColor}\n                                onChange={(e) => setOpponentColor(e.target.value)}\n                                style={{ width: '200px' }}\n                            >\n                                <option value=\"White\">White</option>\n                                <option value=\"Black\">Black</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"precisionLevel\">Precision Level:</label>\n                            <select\n                                id=\"precisionLevel\"\n                                value={precisionLevel}\n                                onChange={(e) => setPrecisionLevel(e.target.value)}\n                                style={{ width: '200px' }}\n                            >\n                                <option value=\"Amateur/SemiPro\">Amateur/SemiPro (5s-1min)</option>\n                                <option value=\"Professional\">Professional (1min-10min)</option>\n                                <option value=\"GM\">GM (1min-30min)</option>\n                            </select>\n                        </div>\n                        <button onClick={handleStart}>Start</button>\n                        {processing && <p>Please wait, do not refresh or close the tab...</p>}\n                    </div>\n                    <p>Number of games in the file: {gamesCount}</p>\n                    <div className=\"common-lines\">\n                        <h2>Most Common Lines</h2>\n                        <ul>\n                            {commonLines.map(([line, count], index) => (\n                                <li key={index}>{line} - {count}</li>\n                            ))}\n                        </ul>\n                        <h2>Filtered Data</h2>\n                        {filteredData.length === 0 ? (\n                            <p>No data available</p>\n                        ) : (\n                            <>\n                                <div className=\"dropdown\">\n                                    <div className=\"dropdown-header\" onClick={() => toggleDropdown('FatalBlunders')}>\n                                        Fatal Blunders ({filteredData.filter(row => row.MistakeType === 'Fatal Blunder').length})\n                                        <span className={`triangle ${activeDropdown === 'FatalBlunders' ? 'open' : ''}`}></span>\n                                    </div>\n                                    {activeDropdown === 'FatalBlunders' && (\n                                        <div className=\"dropdown-content\">\n                                            {filteredData.filter(row => row.MistakeType === 'Fatal Blunder').map((row, index) => (\n                                                <div key={index}>\n                                                    {row.Line.replace(/\\*/g, ' ')}\n                                                </div>\n                                            ))}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"dropdown\">\n                                    <div className=\"dropdown-header\" onClick={() => toggleDropdown('MajorMistakes')}>\n                                        Major Mistakes ({filteredData.filter(row => row.MistakeType === 'Major Mistake').length})\n                                        <span className={`triangle ${activeDropdown === 'MajorMistakes' ? 'open' : ''}`}></span>\n                                    </div>\n                                    {activeDropdown === 'MajorMistakes' && (\n                                        <div className=\"dropdown-content\">\n                                            {filteredData.filter(row => row.MistakeType === 'Major Mistake').map((row, index) => (\n                                                <div key={index}>\n                                                    {row.Line.replace(/\\*/g, ' ')}\n                                                </div>\n                                            ))}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"dropdown\">\n                                    <div className=\"dropdown-header\" onClick={() => toggleDropdown('SlightInaccuracies')}>\n                                        Slight Inaccuracies ({filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').length})\n                                        <span className={`triangle ${activeDropdown === 'SlightInaccuracies' ? 'open' : ''}`}></span>\n                                    </div>\n                                    {activeDropdown === 'SlightInaccuracies' && (\n                                        <div className=\"dropdown-content\">\n                                            {filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').map((row, index) => (\n                                                <div key={index}>\n                                                    {row.Line.replace(/\\*/g, ' ')}\n                                                </div>\n                                            ))}\n                                        </div>\n                                    )}\n                                </div>\n                            </>\n                        )}\n                    </div>\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}