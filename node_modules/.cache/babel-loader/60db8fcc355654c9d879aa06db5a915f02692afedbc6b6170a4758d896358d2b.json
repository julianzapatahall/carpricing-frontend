{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/EditBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditBoard = ({\n  in_fen\n}) => {\n  _s();\n  const [fen, setFen] = useState(in_fen);\n  const [orientation, setOrientation] = useState('white');\n\n  //console.log('Received fen:', in_fen);\n  //console.log('Current fen:', fen);\n\n  // Update the fen state when the in_fen prop changes\n  useEffect(() => {\n    setFen(in_fen);\n  }, [in_fen]);\n\n  // Ensure that fen is properly initialized and updated\n  useEffect(() => {\n    console.log('Updated fen:', fen);\n  }, [fen]);\n  const handleFlipBoard = () => {\n    setOrientation(orientation === 'white' ? 'black' : 'white');\n  };\n  function myFunction(p1) {\n    if (p1 == 0) {\n      return \"\";\n    }\n    return p1;\n  }\n  function isNumeric(str) {\n    if (typeof str != \"string\") return false; // we only process strings!  \n    return !isNaN(str) &&\n    // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n    !isNaN(parseFloat(str)); // ...and ensure strings of whitespace fail\n  } //stackoverflow answered Oct 6, 2008 at 19:24 by Dan\n\n  const handleDrop = ({\n    sourceSquare,\n    targetSquare,\n    piece\n  }) => {\n    console.log(`Dropping piece: ${piece} from ${sourceSquare} to ${targetSquare}`);\n\n    // Ensure all variables are defined\n    if (!sourceSquare || !targetSquare || !piece) {\n      console.error('Missing drop data');\n      return;\n    }\n    try {\n      const fenPiece = piece[0] === 'b' ? piece.substring(1).toLowerCase() : piece.substring(1).toUpperCase();\n      const fileIndex1 = 'abcdefgh'.indexOf(sourceSquare[0]);\n      const rankIndex1 = 8 - parseInt(sourceSquare[1]);\n      const fileIndex2 = 'abcdefgh'.indexOf(targetSquare[0]);\n      const rankIndex2 = 8 - parseInt(targetSquare[1]);\n      const fenArray = fen.split('/');\n      if (fileIndex1 < 0 || rankIndex1 < 0 || fileIndex2 < 0 || rankIndex2 < 0) {\n        console.log(fileIndex1, rankIndex1, fileIndex2, rankIndex2);\n        console.error('Invalid square indices');\n        return;\n      }\n\n      // Assuming the rest of your code here is correct and doesn't need adjustments\n      // This is where you'd modify the FEN string as needed\n\n      const newFen = fenArray.join('/');\n      console.log(`New FEN: ${newFen}`);\n      setFen(newFen);\n    } catch (error) {\n      console.error('Error processing move:', error);\n    }\n  };\n\n  /*\n      // Calculate the rank and file indices of the target square\n      const fileIndex = 'abcdefgh'.indexOf(targetSquare[0]); // Get the index of the file (column)\n      const rankIndex = 8 - parseInt(targetSquare[1]); // Get the index of the rank (row)\n    \n      // Convert the FEN string to an array of ranks\n      const fenArray = fen.split('/');\n    \n      // Replace the character at the calculated square index with the new piece\n      let newRank = '';\n      for (let i = 0; i < 8; i++) {\n        if (i === fileIndex) {\n          newRank += fenPiece;\n        } else {\n          newRank += fenArray[rankIndex][i];\n        }\n      }\n      fenArray[rankIndex] = newRank;\n    \n      // Reassemble the FEN string with the modified rank\n      const newFen = fenArray.join('/');\n    \n      // Update the board position\n      setFen(newFen);*/\n\n  const handleStartingPosition = () => {\n    setFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'); // Set board position to starting position\n  };\n  const handleClearBoard = () => {\n    setFen('8/8/8/8/8/8/8/8'); // Clear the board by setting position to an empty board FEN\n  };\n  /*\n    const handleFenChange = (event) => {\n      setFen(event.target.value); // Update board position with the entered FEN string\n    };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFlipBoard,\n      children: \"Flip Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onDrop: handleDrop,\n      width: 340,\n      sparePieces: true,\n      orientation: orientation // Adjust orientation as needed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartingPosition,\n        children: \"Starting Position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearBoard,\n        children: \"Clear Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(EditBoard, \"x5nJXoH88BRRHUdyS1nh1Ag+66U=\");\n_c = EditBoard;\nexport default EditBoard;\n\n//        <input type=\"text\" value={fen} onChange={handleFenChange} placeholder=\"Enter FEN string\" />\n// <button><Link to=\"/play-stockfish\">Play From Position</Link></button>\n// <button><Link to=\"/analysis-board\">Close Edit Board</Link></button>\nvar _c;\n$RefreshReg$(_c, \"EditBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Link","jsxDEV","_jsxDEV","EditBoard","in_fen","_s","fen","setFen","orientation","setOrientation","console","log","handleFlipBoard","myFunction","p1","isNumeric","str","isNaN","parseFloat","handleDrop","sourceSquare","targetSquare","piece","error","fenPiece","substring","toLowerCase","toUpperCase","fileIndex1","indexOf","rankIndex1","parseInt","fileIndex2","rankIndex2","fenArray","split","newFen","join","handleStartingPosition","handleClearBoard","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","position","onDrop","width","sparePieces","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/EditBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Link } from 'react-router-dom';\n\nconst EditBoard = ({ in_fen }) => {\n  const [fen, setFen] = useState(in_fen);\n  const [orientation, setOrientation] = useState('white');\n\n  //console.log('Received fen:', in_fen);\n //console.log('Current fen:', fen);\n\n  // Update the fen state when the in_fen prop changes\n  useEffect(() => {\n    setFen(in_fen);\n  }, [in_fen]);\n\n  // Ensure that fen is properly initialized and updated\n  useEffect(() => {\n    console.log('Updated fen:', fen);\n  }, [fen]);\n\n    const handleFlipBoard = () => {\n        setOrientation(orientation === 'white' ? 'black' : 'white');\n    };\n\n  function myFunction(p1) {\n    if(p1==0){\n      return \"\";}\n      return p1;\n    }\n  function isNumeric(str) {\n      if (typeof str != \"string\") return false // we only process strings!  \n      return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n             !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\n    } //stackoverflow answered Oct 6, 2008 at 19:24 by Dan\n\n  const handleDrop = ({ sourceSquare, targetSquare, piece }) => {\n      console.log(`Dropping piece: ${piece} from ${sourceSquare} to ${targetSquare}`);\n    \n      // Ensure all variables are defined\n      if (!sourceSquare || !targetSquare || !piece) {\n        console.error('Missing drop data');\n        return;\n      }\n    \n      try {\n        const fenPiece = piece[0] === 'b' ? piece.substring(1).toLowerCase() : piece.substring(1).toUpperCase();\n        const fileIndex1 = 'abcdefgh'.indexOf(sourceSquare[0]);\n        const rankIndex1 = 8 - parseInt(sourceSquare[1]);\n        const fileIndex2 = 'abcdefgh'.indexOf(targetSquare[0]);\n        const rankIndex2 = 8 - parseInt(targetSquare[1]);\n        const fenArray = fen.split('/');\n      \n        if (fileIndex1 < 0 || rankIndex1 < 0 || fileIndex2 < 0 || rankIndex2 < 0) {\n          console.log(fileIndex1,rankIndex1,fileIndex2,rankIndex2);\n          console.error('Invalid square indices');\n          return;\n        }\n    \n        // Assuming the rest of your code here is correct and doesn't need adjustments\n        // This is where you'd modify the FEN string as needed\n    \n        const newFen = fenArray.join('/');\n        console.log(`New FEN: ${newFen}`);\n        setFen(newFen);\n      } catch (error) {\n        console.error('Error processing move:', error);\n      }\n    };\n    \n  \n/*\n    // Calculate the rank and file indices of the target square\n    const fileIndex = 'abcdefgh'.indexOf(targetSquare[0]); // Get the index of the file (column)\n    const rankIndex = 8 - parseInt(targetSquare[1]); // Get the index of the rank (row)\n  \n    // Convert the FEN string to an array of ranks\n    const fenArray = fen.split('/');\n  \n    // Replace the character at the calculated square index with the new piece\n    let newRank = '';\n    for (let i = 0; i < 8; i++) {\n      if (i === fileIndex) {\n        newRank += fenPiece;\n      } else {\n        newRank += fenArray[rankIndex][i];\n      }\n    }\n    fenArray[rankIndex] = newRank;\n  \n    // Reassemble the FEN string with the modified rank\n    const newFen = fenArray.join('/');\n  \n    // Update the board position\n    setFen(newFen);*/\n\n  const handleStartingPosition = () => {\n    setFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'); // Set board position to starting position\n  };\n\n  const handleClearBoard = () => {\n    setFen('8/8/8/8/8/8/8/8'); // Clear the board by setting position to an empty board FEN\n  };\n/*\n  const handleFenChange = (event) => {\n    setFen(event.target.value); // Update board position with the entered FEN string\n  };*/\n\n  return (\n    <div>\n      <button onClick={handleFlipBoard}>Flip Board</button>\n      \n\n      <Chessboard\n        position={fen}\n        onDrop={handleDrop}\n        width={340}\n        sparePieces={true}\n        orientation={orientation} // Adjust orientation as needed\n      />\n      <div>\n        <button onClick={handleStartingPosition}>Starting Position</button>\n        <button onClick={handleClearBoard}>Clear Board</button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditBoard;\n\n//        <input type=\"text\" value={fen} onChange={handleFenChange} placeholder=\"Enter FEN string\" />\n// <button><Link to=\"/play-stockfish\">Play From Position</Link></button>\n// <button><Link to=\"/analysis-board\">Close Edit Board</Link></button>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}