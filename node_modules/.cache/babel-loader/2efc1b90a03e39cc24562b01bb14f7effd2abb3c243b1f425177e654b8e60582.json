{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/ImportGames.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js'; // Ensure chess.js is available client-side\nimport AnalysisBoard from './AnalysisBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImportGames = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [gamesList, setGamesList] = useState([]);\n  const [selectedGame, setSelectedGame] = useState(null);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      setUploadStatus('Please select a file to upload.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const text = e.target.result;\n      const chess = new Chess();\n      console.log(1);\n      chess.loadPgn(text);\n      console.log(2);\n      if (!chess.pgn()) {\n        console.log(text);\n        setUploadStatus('Invalid PGN file. Please upload a valid PGN file.');\n        return;\n      }\n\n      // Optionally extract moves or any other data from the PGN here\n      const moves = chess.history({\n        verbose: true\n      });\n      console.log(moves);\n      try {\n        const response = await axios.post('http://localhost:3001/api/games/process', {\n          pgn: text\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(3);\n        setGamesList(response.data);\n        setUploadStatus('File processed successfully!');\n      } catch (error) {\n        if (error.response) {\n          console.log(error.response.data); // Detailed error from server\n          setUploadStatus(error.response.data || 'An error occurred during file processing.');\n        } else {\n          setUploadStatus('An error occurred during file upload.');\n        }\n      }\n    };\n    reader.readAsText(file); // Read the file as text\n  };\n\n  // Render the list of games and allow the user to select one\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: gamesList.map((game, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setSelectedGame(game),\n        children: [\"Game \", index + 1]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), selectedGame && /*#__PURE__*/_jsxDEV(AnalysisBoard, {\n      fen: \"start\",\n      pgn: selectedGame.pgn,\n      children: ({\n        evaluation,\n        bestLine,\n        goToEnd,\n        goToNextMove,\n        goToPreviousMove,\n        goToStart\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToPreviousMove,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToNextMove,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToEnd,\n          children: \"End\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Stockfish Eval: \", evaluation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Best Continuation Line: \", bestLine]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n    // Assuming `selectedGame` has a `pgn` property\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ImportGames, \"QnHsoZtPpJf34cFO7hvo7Xt3xbw=\");\n_c = ImportGames;\nexport default ImportGames;\nvar _c;\n$RefreshReg$(_c, \"ImportGames\");","map":{"version":3,"names":["React","useState","axios","Chess","AnalysisBoard","jsxDEV","_jsxDEV","ImportGames","_s","file","setFile","uploadStatus","setUploadStatus","gamesList","setGamesList","selectedGame","setSelectedGame","handleFileChange","e","target","files","handleUpload","preventDefault","reader","FileReader","onload","text","result","chess","console","log","loadPgn","pgn","moves","history","verbose","response","post","headers","data","error","readAsText","children","onSubmit","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","game","index","onClick","fen","evaluation","bestLine","goToEnd","goToNextMove","goToPreviousMove","goToStart","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/ImportGames.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Chess } from 'chess.js'; // Ensure chess.js is available client-side\nimport AnalysisBoard from './AnalysisBoard';\n\nconst ImportGames = () => {\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [gamesList, setGamesList] = useState([]);\n  const [selectedGame, setSelectedGame] = useState(null);\n\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    if (!file) {\n      setUploadStatus('Please select a file to upload.');\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const text = e.target.result;\n      const chess = new Chess();\n      console.log(1);\n      chess.loadPgn(text);\n      console.log(2);\n      \n      if (!chess.pgn()) {\n        console.log(text);\n        setUploadStatus('Invalid PGN file. Please upload a valid PGN file.');\n        return;\n      }\n\n      // Optionally extract moves or any other data from the PGN here\n      const moves = chess.history({ verbose: true });\n      console.log(moves);\n      try {\n        const response = await axios.post('http://localhost:3001/api/games/process', { pgn: text }, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        console.log(3);\n        setGamesList(response.data);\n        setUploadStatus('File processed successfully!');\n      }  catch (error) {\n        if (error.response) {\n          console.log(error.response.data); // Detailed error from server\n          setUploadStatus(error.response.data || 'An error occurred during file processing.');\n        } else {\n          setUploadStatus('An error occurred during file upload.');\n        }\n      }\n      \n      \n    };\n    reader.readAsText(file); // Read the file as text\n  };\n\n  // Render the list of games and allow the user to select one\nreturn (\n    <div>\n      <form onSubmit={handleUpload}>\n        <input type=\"file\" onChange={handleFileChange} />\n        <button type=\"submit\">Upload</button>\n        {uploadStatus && <p>{uploadStatus}</p>}\n      </form>\n      <ul>\n        {gamesList.map((game, index) => (\n          <li key={index} onClick={() => setSelectedGame(game)}>\n            Game {index + 1}\n          </li>\n        ))}\n      </ul>\n      {selectedGame && (\n    <AnalysisBoard fen=\"start\" pgn={selectedGame.pgn} >{({evaluation, bestLine, goToEnd, goToNextMove, goToPreviousMove, goToStart}) => (\n        <div>\n            <button onClick={goToStart}>Start</button>\n            <button onClick={goToPreviousMove}>Previous</button>\n            <button onClick={goToNextMove}>Next</button>\n            <button onClick={goToEnd}>End</button>\n            <div>\n                <div>Stockfish Eval: {evaluation}</div>\n                <div>Best Continuation Line: {bestLine}</div>\n            </div>\n            </div> \n    )}</AnalysisBoard>\n    // Assuming `selectedGame` has a `pgn` property\n)}\n    </div>\n  );\n};\n\nexport default ImportGames;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}