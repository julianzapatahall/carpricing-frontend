{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport ErrorBoundary from './ErrorBoundary';\nimport reportWebVitals from './reportWebVitals';\n\n// Custom error handling logic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst handleGlobalError = (message, source, lineno, colno, error) => {\n  console.error('Global error caught:', message, source, lineno, colno, error);\n  // Set an error flag in sessionStorage (use sessionStorage instead of localStorage to avoid persisting across sessions)\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\nconst handleUnhandledRejection = event => {\n  console.error('Unhandled promise rejection:', event);\n  // Set an error flag in sessionStorage\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\n// Assign custom error handlers\nwindow.onerror = handleGlobalError;\nwindow.onunhandledrejection = handleUnhandledRejection;\n\n// Check if the page was reloaded due to an error\nwindow.addEventListener('load', () => {\n  const hasError = sessionStorage.getItem('hasError');\n  if (hasError) {\n    // Show the error banner\n    const errorBanner = document.getElementById('global-error-banner');\n    if (errorBanner) {\n      errorBanner.style.display = 'block';\n    }\n    // Clear the error flag\n    sessionStorage.removeItem('hasError');\n  }\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"global-error-banner\",\n    className: \"error-banner\",\n    style: {\n      display: 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sorry, an unexpected error occurred.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => document.getElementById('global-error-banner').style.display = 'none',\n      className: \"close-button\",\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this), \"//\"]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this));\n\n//</ErrorBoundary>\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","ErrorBoundary","reportWebVitals","jsxDEV","_jsxDEV","handleGlobalError","message","source","lineno","colno","error","console","sessionStorage","setItem","window","location","reload","handleUnhandledRejection","event","onerror","onunhandledrejection","addEventListener","hasError","getItem","errorBanner","document","getElementById","style","display","removeItem","root","createRoot","render","StrictMode","children","id","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport ErrorBoundary from './ErrorBoundary';\nimport reportWebVitals from './reportWebVitals';\n\n// Custom error handling logic\nconst handleGlobalError = (message, source, lineno, colno, error) => {\n  console.error('Global error caught:', message, source, lineno, colno, error);\n  // Set an error flag in sessionStorage (use sessionStorage instead of localStorage to avoid persisting across sessions)\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\nconst handleUnhandledRejection = (event) => {\n  console.error('Unhandled promise rejection:', event);\n  // Set an error flag in sessionStorage\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\n// Assign custom error handlers\nwindow.onerror = handleGlobalError;\nwindow.onunhandledrejection = handleUnhandledRejection;\n\n// Check if the page was reloaded due to an error\nwindow.addEventListener('load', () => {\n  const hasError = sessionStorage.getItem('hasError');\n  if (hasError) {\n    // Show the error banner\n    const errorBanner = document.getElementById('global-error-banner');\n    if (errorBanner) {\n      errorBanner.style.display = 'block';\n    }\n    // Clear the error flag\n    sessionStorage.removeItem('hasError');\n  }\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n      <div id=\"global-error-banner\" className=\"error-banner\" style={{ display: 'none' }}>\n        <p>Sorry, an unexpected error occurred.</p>\n        <button onClick={() => document.getElementById('global-error-banner').style.display = 'none'} className=\"close-button\">X</button>\n      </div>\n      <App />\n    // \n  </React.StrictMode>\n);\n\n//</ErrorBoundary>\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACnEC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEJ,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,CAAC;EAC5E;EACAE,cAAc,CAACC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;EAC1C;EACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMC,wBAAwB,GAAIC,KAAK,IAAK;EAC1CP,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEQ,KAAK,CAAC;EACpD;EACAN,cAAc,CAACC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;EAC1C;EACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;AAC1B,CAAC;;AAED;AACAF,MAAM,CAACK,OAAO,GAAGd,iBAAiB;AAClCS,MAAM,CAACM,oBAAoB,GAAGH,wBAAwB;;AAEtD;AACAH,MAAM,CAACO,gBAAgB,CAAC,MAAM,EAAE,MAAM;EACpC,MAAMC,QAAQ,GAAGV,cAAc,CAACW,OAAO,CAAC,UAAU,CAAC;EACnD,IAAID,QAAQ,EAAE;IACZ;IACA,MAAME,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IAClE,IAAIF,WAAW,EAAE;MACfA,WAAW,CAACG,KAAK,CAACC,OAAO,GAAG,OAAO;IACrC;IACA;IACAhB,cAAc,CAACiB,UAAU,CAAC,UAAU,CAAC;EACvC;AACF,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAG/B,QAAQ,CAACgC,UAAU,CAACN,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEI,IAAI,CAACE,MAAM,eACT5B,OAAA,CAACN,KAAK,CAACmC,UAAU;EAAAC,QAAA,gBACb9B,OAAA;IAAK+B,EAAE,EAAC,qBAAqB;IAACC,SAAS,EAAC,cAAc;IAACT,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAM,QAAA,gBAChF9B,OAAA;MAAA8B,QAAA,EAAG;IAAoC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3CpC,OAAA;MAAQqC,OAAO,EAAEA,CAAA,KAAMhB,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAACC,KAAK,CAACC,OAAO,GAAG,MAAO;MAACQ,SAAS,EAAC,cAAc;MAAAF,QAAA,EAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9H,CAAC,eACNpC,OAAA,CAACJ,GAAG;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,MAEX;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAkB,CACpB,CAAC;;AAED;AACA;AACA;AACA;AACAtC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}