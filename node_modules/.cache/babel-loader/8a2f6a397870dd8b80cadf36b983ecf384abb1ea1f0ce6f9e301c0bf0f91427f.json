{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n  const [processing, setProcessing] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState(null);\n  const [inputMethod, setInputMethod] = useState('chesscom'); // Default to pgn\n  const [filter, setFilter] = useState('all'); // Default filter is 'All Games'\n  const [totalGames, setTotalGames] = useState(0);\n  const [gameCounts, setGameCounts] = useState({});\n  const [oldestGame, setOldestGame] = useState('');\n  const [newestGame, setNewestGame] = useState('');\n  const [winLossRecord, setWinLossRecord] = useState('');\n  const [highestRatedWin, setHighestRatedWin] = useState('');\n  const [lowestRatedLoss, setLowestRatedLoss] = useState('');\n  const [gameLengthData, setGameLengthData] = useState([]);\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const fetchLichessGames = async username => {\n    const response = await fetch(`https://lichess.org/api/games/user/${username}?max=1000&moves=true&pgnInJson=false`);\n    const data = await response.text(); // Get the response as text (PGN format)\n    return data;\n  };\n  const fetchChessComGames = async (username, maxGames = 1000) => {\n    const fetchGamesBatch = async archiveUrl => {\n      try {\n        const response = await fetch(archiveUrl);\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n        }\n        const data = await response.json();\n        return data.games;\n      } catch (error) {\n        console.error('Error fetching games batch:', error.message);\n        return []; // Return an empty array if there's an error\n      }\n    };\n    try {\n      // Fetch the archives (list of months)\n      const archivesResponse = await fetch(`https://api.chess.com/pub/player/${username}/games/archives`);\n      if (!archivesResponse.ok) {\n        const errorText = await archivesResponse.text();\n        throw new Error(`Error fetching archives: ${archivesResponse.statusText} - ${errorText}`);\n      }\n      const archivesData = await archivesResponse.json();\n      const archives = archivesData.archives.reverse(); // Reverse to start from the most recent\n\n      const results = [];\n      for (let archiveUrl of archives) {\n        if (results.length >= maxGames) break;\n        const games = await fetchGamesBatch(archiveUrl);\n        results.push(...games);\n        if (results.length >= maxGames) {\n          results.length = maxGames; // Trim to the maxGames limit\n          break;\n        }\n      }\n      return results;\n    } catch (error) {\n      console.error('Error fetching games from Chess.com:', error.message);\n      throw error;\n    }\n  };\n  const handleFilterClick = selectedFilter => {\n    setFilter(selectedFilter);\n  };\n  const handleLoadGames = () => {\n    // Logic to load games based on the selected filter (all or last 1000 games)\n    // Update the state variables such as totalGames, gameCounts, oldestGame, newestGame, etc.\n    console.log(`Loading games with filter: ${filter}`);\n  };\n  const handleStart = async () => {\n    setProcessing(true);\n    let games = [];\n    if (inputMethod === 'lichess') {\n      const data = await fetchLichessGames(opponentName);\n      let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n      games = rawGames.map(game => '[Event' + game.trim());\n    } else if (inputMethod === 'chesscom') {\n      const data = await fetchChessComGames(opponentName);\n      games = data.map(game => game.pgn);\n    } else {\n      games = importedGames;\n    }\n    processGames(games);\n  };\n  const handleReset = () => {\n    // Logic to reset all the state variables and clear the loaded data\n    setImportedGames([]);\n    setGamesCount(0);\n    setCommonLines([]);\n    setFilteredData([]);\n    setFinalLongDF([]);\n    setThePgnList([]);\n    setEvaluation(\"\");\n    setBestLine(\"\");\n    setPreviousOutput(\"\");\n    setProcessing(false);\n    setTotalGames(0);\n    setGameCounts({});\n    setOldestGame('');\n    setNewestGame('');\n    setWinLossRecord('');\n    setHighestRatedWin('');\n    setLowestRatedLoss('');\n    setGameLengthData([]);\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      chess.deleteComments();\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n    console.log(\"filteredLongDFUnsorted\");\n    console.log(filteredLongDFUnsorted);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const sortedByLengthDF = filteredLongDFUnsorted.sort((a, b) => b.Line.length - a.Line.length);\n    console.log(\"sortedByLengthDF\");\n    console.log(sortedByLengthDF);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = sortedByLengthDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line)) {\n        uniqueLinesStr += row.Line;\n        uniqueLinesStr += \"//\";\n        return false;\n      } else {\n        uniqueLinesStr += row.Line;\n        uniqueLinesStr += \"//\";\n        return true;\n      }\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameID: row.GameID,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n  };\n  const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n    const chess = new Chess();\n    const evaluatedGames = [];\n    const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n    console.log(\"maxPly\");\n    console.log(maxPly);\n    const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n    console.log(uniqueGameIDs);\n    for (let gameID = 0; gameID < pgnList.length; gameID++) {\n      if (uniqueGameIDs.includes(gameID)) {\n        const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n        chess.loadPgn(pgn);\n        const chess2 = new Chess();\n        chess2.loadPgn(pgn);\n        chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", {\n          preserveHeaders: true\n        });\n        const moves = chess.history();\n        for (let i = 0; i < maxPly && i < moves.length; i++) {\n          chess2.move(moves[i]);\n          const fen = chess2.fen();\n          const origevaluation = await evaluatePosition(fen);\n          const evaluation = i % 2 == 0 ? String(parseFloat(origevaluation) * -1) : String(parseFloat(origevaluation));\n          chess2.setComment(evaluation);\n        }\n        evaluatedGames.push(chess2.pgn());\n      } else {\n        evaluatedGames.push(pgnList[gameID]);\n      }\n    }\n    processEvaluatedGames(evaluatedGames, maxPly);\n  };\n  const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    chess.loadPgn(evaluatedPGNs[0]);\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const commentsWithFens = chess.getComments();\n      const comments = commentsWithFens.map(item => item.comment);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      valList.push(parseFloat(comments[0]));\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < maxPly && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n        valList.push(parseFloat(comments[i]));\n      }\n      fullValList.push(valList);\n    });\n    console.log(\"fullValList\");\n    console.log(fullValList);\n    for (let j = 1; j <= maxPly; j++) {\n      initialColnames.push(\"Line\" + String(j));\n      initialColnames.push(\"EVAL\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < maxPly; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= maxPly; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= maxPly; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n    console.log(\"filteredLongDFUnsorted\");\n    console.log(filteredLongDFUnsorted);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const groupedByLine = filteredLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n    console.log(definedDF);\n    let fullLinesStr = \"//\";\n    let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n      const subsets = [];\n      const lineMoves = row.Line.split(\"*\").filter(Boolean);\n\n      // SUBSET CHECK\n      // Check if value already in partialLinesStr\n      if (partialLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      }\n\n      // SUPERSET CHECK\n      // Check if any subset is already in fullLinesStr\n\n      // Generate all possible subsets of the current line\n      for (let i = 1; i <= lineMoves.length; i++) {\n        const subset = lineMoves.slice(0, i).join(\"*\") + \"*\";\n        if (fullLinesStr.includes(\"//\" + subset + \"//\")) {\n          return false;\n        }\n        partialLinesStr += subset + \"//\";\n      }\n      ;\n      fullLinesStr += row.Line + \"//\";\n      return true;\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const categorizedLines = categorizeLines(nonSubsetLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    setProcessing(false); // Stop processing\n  };\n  const createPgnFromGameIDs = (gameIDs, pgnList) => {\n    return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n  };\n  const handleLineClick = gameIDs => {\n    const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n\n    // Store the combined PGN in localStorage\n    localStorage.setItem('combinedPgn', combinedPgn);\n\n    // Clear imported games\n    localStorage.removeItem('importedGames');\n\n    // Redirect to analysis board\n    window.location.href = '/analysis-board';\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = \"EVAL\";\n      const evaluation = row[evalColumn];\n      if (opponentColor === \"Black\") {\n        if (evaluation >= 2) {\n          row.MistakeType = \"Fatal Blunder\";\n        } else if (evaluation >= 1.0) {\n          row.MistakeType = \"Major Mistake\";\n        } else if (evaluation >= 0.6) {\n          row.MistakeType = \"Slight Inaccuracy\";\n        } else {\n          row.MistakeType = \"None\";\n        }\n      } else {\n        if (evaluation <= -2) {\n          row.MistakeType = \"Fatal Blunder\";\n        } else if (evaluation <= -1.0) {\n          row.MistakeType = \"Major Mistake\";\n        } else if (evaluation <= -0.6) {\n          row.MistakeType = \"Slight Inaccuracy\";\n        } else {\n          row.MistakeType = \"None\";\n        }\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  const toggleDropdown = dropdown => {\n    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n  };\n  const formatMovesWithNumbers = line => {\n    const moves = line.Line.split(\"*\").filter(Boolean);\n    return moves.map((move, index) => {\n      const moveNumber = Math.floor(index / 2) + 1;\n      return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n    }).join(\" \");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 812,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/about-magnus\",\n              children: \"About Magnus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Blunder Punisher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tab-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tab\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: inputMethod === 'chesscom' ? 'tablinks active' : 'tablinks',\n              onClick: () => setInputMethod('chesscom'),\n              children: \"Chess.com\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: inputMethod === 'lichess' ? 'tablinks active' : 'tablinks',\n              onClick: () => setInputMethod('lichess'),\n              children: \"Lichess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: inputMethod === 'pgn' ? 'tablinks active' : 'tablinks',\n              onClick: () => setInputMethod('pgn'),\n              children: \"PGN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tabcontent\",\n            style: {\n              display: inputMethod === 'pgn' ? 'block' : 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                onChange: handleFileSelect\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"opponentName\",\n                children: \"Opponent Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"opponentName\",\n                value: opponentName,\n                onChange: e => setOpponentName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tabcontent\",\n            style: {\n              display: inputMethod === 'lichess' ? 'block' : 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"opponentUsername\",\n                children: \"Opponent Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"opponentUsername\",\n                value: opponentName,\n                onChange: e => setOpponentName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tabcontent\",\n            style: {\n              display: inputMethod === 'chesscom' ? 'block' : 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"opponentUsername\",\n                children: \"Opponent Username:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 854,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"opponentUsername\",\n                value: opponentName,\n                onChange: e => setOpponentName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 855,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentColor\",\n              children: \"Opponent Color:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"opponentColor\",\n              value: opponentColor,\n              onChange: e => setOpponentColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 872,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"precisionLevel\",\n              children: \"Precision Level:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"precisionLevel\",\n              value: precisionLevel,\n              onChange: e => setPrecisionLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Amateur/SemiPro\",\n                children: \"Amateur/SemiPro (5s-1min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 883,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Professional\",\n                children: \"Professional (1min-10min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 884,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"GM\",\n                children: \"GM (1min-30min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 885,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 25\n          }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please wait, do not refresh or close the tab...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of games in the file: \", gamesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 21\n        }, this), processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"common-lines\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Most Common Lines\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [line, \" - \", count]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Fatal Blunders'),\n              children: [\"Fatal Blunders: (\", filteredData.filter(line => line.MistakeType === 'Fatal Blunder').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 33\n            }, this), activeDropdown === 'Fatal Blunders' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Fatal Blunder').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLineClick(line.GameIDs),\n                  children: formatMovesWithNumbers(line)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 49\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Major Mistakes'),\n              children: [\"Major Mistakes: (\", filteredData.filter(line => line.MistakeType === 'Major Mistake').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 33\n            }, this), activeDropdown === 'Major Mistakes' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Major Mistake').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLineClick(line.GameIDs),\n                  children: formatMovesWithNumbers(line)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 929,\n                  columnNumber: 49\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 928,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 921,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleDropdown('Slight Inaccuracies'),\n              children: [\"Slight Inaccuracies: (\", filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 938,\n              columnNumber: 33\n            }, this), activeDropdown === 'Slight Inaccuracies' && /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLineClick(line.GameIDs),\n                  children: formatMovesWithNumbers(line)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 945,\n                  columnNumber: 49\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 944,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 942,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"summary-stats1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Summary Stats #1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Games: \", totalGames]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 959,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Oldest Game: \", oldestGame]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 960,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Newest Game: \", newestGame]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 961,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Game Counts by Type: \", JSON.stringify(gameCounts)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"summary-stats2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Summary Stats #2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Win-Loss Record: \", winLossRecord]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Highest Rated Win: \", highestRatedWin]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Lowest Rated Loss: \", lowestRatedLoss]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 970,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 800,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"Wet1B8ORmK0cvbZ6RqScxG368xE=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","logo","logoWhite","jsxDEV","_jsxDEV","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","thePgnList","setThePgnList","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","activeDropdown","setActiveDropdown","inputMethod","setInputMethod","filter","setFilter","totalGames","setTotalGames","gameCounts","setGameCounts","oldestGame","setOldestGame","newestGame","setNewestGame","winLossRecord","setWinLossRecord","highestRatedWin","setHighestRatedWin","lowestRatedLoss","setLowestRatedLoss","gameLengthData","setGameLengthData","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","Boolean","games","map","game","trim","length","readAsText","fetchLichessGames","username","response","fetch","data","text","fetchChessComGames","maxGames","fetchGamesBatch","archiveUrl","ok","errorText","Error","statusText","json","error","console","message","archivesResponse","archivesData","archives","reverse","results","push","handleFilterClick","selectedFilter","handleLoadGames","log","handleStart","pgn","processGames","handleReset","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","forEach","index","loadPgn","deleteComments","moves","history","valList","triangle","String","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","filteredDF","moveProb1","Line1","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","Math","ceil","filteredLongDFUnsorted","undefined","filteredLongDF","sort","a","b","sortedByLengthDF","uniqueLinesStr","nonSubsetLongDF","includes","groupedByLine","isNaN","Infinity","GameIDs","max","Object","values","NaN","groupedLongDF","sortedLongDF","LineProbability","categorizedLines","categorizeLines","findCommonLines","evaluateAndAnnotateGames","minimalGroupedDF","evaluatedGames","maxPly","uniqueGameIDs","Set","gameID","chess2","load","preserveHeaders","move","fen","origevaluation","evaluatePosition","parseFloat","setComment","processEvaluatedGames","evaluatedPGNs","commentsWithFens","getComments","comments","item","comment","definedDF","fullLinesStr","partialLinesStr","subsets","lineMoves","subset","slice","join","createPgnFromGameIDs","gameIDs","id","handleLineClick","combinedPgn","localStorage","setItem","removeItem","location","href","evalColumn","MistakeType","line","sortedLines","entries","toggleDropdown","dropdown","formatMovesWithNumbers","moveNumber","floor","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","display","type","onChange","htmlFor","value","count","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n    const [processing, setProcessing] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(null);\n    const [inputMethod, setInputMethod] = useState('chesscom'); // Default to pgn\n    const [filter, setFilter] = useState('all'); // Default filter is 'All Games'\n    const [totalGames, setTotalGames] = useState(0);\n    const [gameCounts, setGameCounts] = useState({});\n    const [oldestGame, setOldestGame] = useState('');\n    const [newestGame, setNewestGame] = useState('');\n    const [winLossRecord, setWinLossRecord] = useState('');\n    const [highestRatedWin, setHighestRatedWin] = useState('');\n    const [lowestRatedLoss, setLowestRatedLoss] = useState('');\n    const [gameLengthData, setGameLengthData] = useState([]);\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n\n    const fetchLichessGames = async (username) => {\n        const response = await fetch(`https://lichess.org/api/games/user/${username}?max=1000&moves=true&pgnInJson=false`);\n        const data = await response.text(); // Get the response as text (PGN format)\n        return data;\n    };\n\n    const fetchChessComGames = async (username, maxGames = 1000) => {\n        const fetchGamesBatch = async (archiveUrl) => {\n            try {\n                const response = await fetch(archiveUrl);\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n                }\n\n                const data = await response.json();\n                return data.games;\n            } catch (error) {\n                console.error('Error fetching games batch:', error.message);\n                return []; // Return an empty array if there's an error\n            }\n        };\n\n        try {\n            // Fetch the archives (list of months)\n            const archivesResponse = await fetch(`https://api.chess.com/pub/player/${username}/games/archives`);\n            if (!archivesResponse.ok) {\n                const errorText = await archivesResponse.text();\n                throw new Error(`Error fetching archives: ${archivesResponse.statusText} - ${errorText}`);\n            }\n            const archivesData = await archivesResponse.json();\n            const archives = archivesData.archives.reverse(); // Reverse to start from the most recent\n\n            const results = [];\n            for (let archiveUrl of archives) {\n                if (results.length >= maxGames) break;\n\n                const games = await fetchGamesBatch(archiveUrl);\n                results.push(...games);\n\n                if (results.length >= maxGames) {\n                    results.length = maxGames; // Trim to the maxGames limit\n                    break;\n                }\n            }\n\n            return results;\n        } catch (error) {\n            console.error('Error fetching games from Chess.com:', error.message);\n            throw error;\n        }\n    };\n\n    const handleFilterClick = (selectedFilter) => {\n        setFilter(selectedFilter);\n    };\n\n    const handleLoadGames = () => {\n        // Logic to load games based on the selected filter (all or last 1000 games)\n        // Update the state variables such as totalGames, gameCounts, oldestGame, newestGame, etc.\n        console.log(`Loading games with filter: ${filter}`);\n    };\n\n    const handleStart = async () => {\n        setProcessing(true);\n        let games = [];\n\n        if (inputMethod === 'lichess') {\n            const data = await fetchLichessGames(opponentName);\n            let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n            games = rawGames.map(game => '[Event' + game.trim());\n        } else if (inputMethod === 'chesscom') {\n            const data = await fetchChessComGames(opponentName);\n            games = data.map(game => game.pgn);\n        } else {\n            games = importedGames;\n        }\n\n        processGames(games);\n    };\n\n    const handleReset = () => {\n        // Logic to reset all the state variables and clear the loaded data\n        setImportedGames([]);\n        setGamesCount(0);\n        setCommonLines([]);\n        setFilteredData([]);\n        setFinalLongDF([]);\n        setThePgnList([]);\n        setEvaluation(\"\");\n        setBestLine(\"\");\n        setPreviousOutput(\"\");\n        setProcessing(false);\n        setTotalGames(0);\n        setGameCounts({});\n        setOldestGame('');\n        setNewestGame('');\n        setWinLossRecord('');\n        setHighestRatedWin('');\n        setLowestRatedLoss('');\n        setGameLengthData([]);\n    };\n\n    \n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            chess.deleteComments();\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n        console.log(\"minGames\");\n        console.log(minGames);\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n        console.log(\"filteredLongDFUnsorted\");\n        console.log(filteredLongDFUnsorted);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const sortedByLengthDF = filteredLongDFUnsorted.sort((a, b) => b.Line.length - a.Line.length);\n        console.log(\"sortedByLengthDF\");\n        console.log(sortedByLengthDF);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = sortedByLengthDF.filter(row => {\n            if(uniqueLinesStr.includes( \"//\"+row.Line)){\n                uniqueLinesStr += row.Line;\n                uniqueLinesStr += \"//\";\n                return false;}\n            else{\n                uniqueLinesStr += row.Line;\n                uniqueLinesStr += \"//\";\n                return true;\n            }\n        });\n\n        console.log(\"nonSubsetLongDF\");\n        console.log(nonSubsetLongDF);\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameID: row.GameID,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n        \n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n        \n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n        \n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n\n        evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n    };\n\n    const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n        const chess = new Chess();\n        const evaluatedGames = [];\n        const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n        console.log(\"maxPly\");\n        console.log(maxPly);\n\n        const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n        console.log(uniqueGameIDs);\n        for (let gameID = 0; gameID < pgnList.length; gameID++) {\n            if (uniqueGameIDs.includes(gameID)) {\n                const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n                chess.loadPgn(pgn);\n                const chess2 = new Chess();\n                chess2.loadPgn(pgn);\n                chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", { preserveHeaders: true });\n                const moves = chess.history();\n\n                for (let i = 0; i < maxPly && i < moves.length; i++) {\n                    chess2.move(moves[i]);\n                    const fen = chess2.fen();\n                    const origevaluation = await evaluatePosition(fen);\n                    const evaluation = i%2==0?String(parseFloat(origevaluation)*(-1)):String(parseFloat(origevaluation));\n\n                    chess2.setComment(evaluation);\n                }\n\n                evaluatedGames.push(chess2.pgn());\n            } else {\n                evaluatedGames.push(pgnList[gameID]);\n            }\n        }\n\n        processEvaluatedGames(evaluatedGames, maxPly);\n    };\n\n    const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n        chess.loadPgn(evaluatedPGNs[0]);\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n            const commentsWithFens = chess.getComments();\n            const comments = commentsWithFens.map(item => item.comment);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n            valList.push(parseFloat(comments[0]));\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < maxPly && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n                valList.push(parseFloat(comments[i]));\n            }\n            fullValList.push(valList);\n        });\n        console.log(\"fullValList\");\n        console.log(fullValList);\n\n        for (let j = 1; j <= maxPly; j++) {\n            initialColnames.push(\"Line\" + String(j));\n            initialColnames.push(\"EVAL\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < maxPly; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= maxPly; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= maxPly; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n        console.log(\"minGames\");\n        console.log(minGames);\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n        console.log(\"filteredLongDFUnsorted\");\n        console.log(filteredLongDFUnsorted);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const groupedByLine = filteredLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        \n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n        console.log(definedDF);\n \n        let fullLinesStr = \"//\";\n        let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n        const subsets = [];\n        const lineMoves = row.Line.split(\"*\").filter(Boolean);\n        \n// SUBSET CHECK\n        // Check if value already in partialLinesStr\n        if (partialLinesStr.includes(\"//\" + row.Line +\"//\")) {\n                return false;\n            }\n        \n\n\n        // SUPERSET CHECK\n        // Check if any subset is already in fullLinesStr\n\n        // Generate all possible subsets of the current line\n        for (let i = 1; i <= lineMoves.length; i++) {\n            const subset = lineMoves.slice(0, i).join(\"*\") + \"*\"; \n            if (fullLinesStr.includes(\"//\" + subset+ \"//\")) {\n                return false;\n            }\n            partialLinesStr += subset + \"//\";\n    };\n        fullLinesStr += row.Line+ \"//\";\n        return true;\n    });\n\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    \n        const categorizedLines = categorizeLines(nonSubsetLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n        setProcessing(false); // Stop processing\n    };\n\n    const createPgnFromGameIDs = (gameIDs, pgnList) => {\n        return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n    };\n    \n    const handleLineClick = (gameIDs) => {\n        const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n    \n        // Store the combined PGN in localStorage\n        localStorage.setItem('combinedPgn', combinedPgn);\n    \n        // Clear imported games\n        localStorage.removeItem('importedGames');\n    \n        // Redirect to analysis board\n        window.location.href = '/analysis-board';\n    };\n    \n    \n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = \"EVAL\";\n            const evaluation = row[evalColumn];\n\n            if (opponentColor === \"Black\") {\n                if (evaluation >= 2) {\n                    row.MistakeType = \"Fatal Blunder\";\n                } else if (evaluation >= 1.0) {\n                    row.MistakeType = \"Major Mistake\";\n                } else if (evaluation >= 0.6) {\n                    row.MistakeType = \"Slight Inaccuracy\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            } else {\n                if (evaluation <= -2) {\n                    row.MistakeType = \"Fatal Blunder\";\n                } else if (evaluation <= -1.0) {\n                    row.MistakeType = \"Major Mistake\";\n                } else if (evaluation <= -0.6) {\n                    row.MistakeType = \"Slight Inaccuracy\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            }\n\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    const toggleDropdown = (dropdown) => {\n        setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n    };\n\n    const formatMovesWithNumbers = (line) => {\n        const moves = line.Line.split(\"*\").filter(Boolean);\n        return moves.map((move, index) => {\n            const moveNumber = Math.floor(index / 2) + 1;\n            return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n        }).join(\" \");\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/about-magnus\">About Magnus</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <section className=\"hero3\">\n                    <h1 className=\"title\">Blunder Punisher</h1>\n                    <div className=\"tab-container\">\n                        <div className=\"tab\">\n                            <button className={inputMethod === 'chesscom' ? 'tablinks active' : 'tablinks'} onClick={() => setInputMethod('chesscom')}>Chess.com</button>\n                            <button className={inputMethod === 'lichess' ? 'tablinks active' : 'tablinks'} onClick={() => setInputMethod('lichess')}>Lichess</button>\n                            <button className={inputMethod === 'pgn' ? 'tablinks active' : 'tablinks'} onClick={() => setInputMethod('pgn')}>PGN</button>\n                        </div>\n\n                        <div className=\"tabcontent\" style={{ display: inputMethod === 'pgn' ? 'block' : 'none' }}>\n                            <div className=\"form-group\">\n                                <input type=\"file\" onChange={handleFileSelect} />\n                                <label htmlFor=\"opponentName\">Opponent Name:</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"opponentName\" \n                                    value={opponentName} \n                                    onChange={(e) => setOpponentName(e.target.value)} \n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"tabcontent\" style={{ display: inputMethod === 'lichess' ? 'block' : 'none' }}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"opponentUsername\">Opponent Username:</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"opponentUsername\" \n                                    value={opponentName} \n                                    onChange={(e) => setOpponentName(e.target.value)} \n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"tabcontent\" style={{ display: inputMethod === 'chesscom' ? 'block' : 'none' }}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"opponentUsername\">Opponent Username:</label>\n                                <input \n                                    type=\"text\" \n                                    id=\"opponentUsername\" \n                                    value={opponentName} \n                                    onChange={(e) => setOpponentName(e.target.value)} \n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentColor\">Opponent Color:</label>\n                            <select \n                                id=\"opponentColor\" \n                                value={opponentColor} \n                                onChange={(e) => setOpponentColor(e.target.value)}\n                            >\n                                <option value=\"White\">White</option>\n                                <option value=\"Black\">Black</option>\n                            </select>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"precisionLevel\">Precision Level:</label>\n                            <select \n                                id=\"precisionLevel\" \n                                value={precisionLevel} \n                                onChange={(e) => setPrecisionLevel(e.target.value)}\n                            >\n                                <option value=\"Amateur/SemiPro\">Amateur/SemiPro (5s-1min)</option>\n                                <option value=\"Professional\">Professional (1min-10min)</option>\n                                <option value=\"GM\">GM (1min-30min)</option>\n                            </select>\n                        </div>\n                        \n                        <button onClick={handleStart}>Start</button>\n                        {processing && <p>Please wait, do not refresh or close the tab...</p>}\n                    </div>\n                \n                    <p>Number of games in the file: {gamesCount}</p>\n                    {processing ? (\n                        <div className=\"common-lines\">\n                            <h2>Most Common Lines</h2>\n                            <ul>\n                                {commonLines.map(([line, count], index) => (\n                                    <li key={index}>{line} - {count}</li>\n                                ))}\n                            </ul>\n                        </div>\n                    ) : (\n                        <div className=\"dropdown-container\">\n                            <div className=\"dropdown\">\n                                <button onClick={() => toggleDropdown('Fatal Blunders')}>\n                                    Fatal Blunders: ({filteredData.filter(line => line.MistakeType === 'Fatal Blunder').length})\n                                </button>\n                                {activeDropdown === 'Fatal Blunders' && (\n                                    <ul>\n                                        {filteredData.filter(line => line.MistakeType === 'Fatal Blunder').map((line, index) => (\n                                            <li key={index}>\n                                                <button onClick={() => handleLineClick(line.GameIDs)}>\n                                                    {formatMovesWithNumbers(line)}\n                                                </button>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                )}\n                            </div>\n                            <div className=\"dropdown\">\n                                <button onClick={() => toggleDropdown('Major Mistakes')}>\n                                    Major Mistakes: ({filteredData.filter(line => line.MistakeType === 'Major Mistake').length})\n                                </button>\n                                {activeDropdown === 'Major Mistakes' && (\n                                    <ul>\n                                        {filteredData.filter(line => line.MistakeType === 'Major Mistake').map((line, index) => (\n                                            <li key={index}>\n                                                <button onClick={() => handleLineClick(line.GameIDs)}>\n                                                    {formatMovesWithNumbers(line)}\n                                                </button>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                )}\n                            </div>\n                            <div className=\"dropdown\">\n                                <button onClick={() => toggleDropdown('Slight Inaccuracies')}>\n                                    Slight Inaccuracies: ({filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').length})\n                                </button>\n                                {activeDropdown === 'Slight Inaccuracies' && (\n                                    <ul>\n                                        {filteredData.filter(line => line.MistakeType === 'Slight Inaccuracy').map((line, index) => (\n                                            <li key={index}>\n                                                <button onClick={() => handleLineClick(line.GameIDs)}>\n                                                    {formatMovesWithNumbers(line)}\n                                                </button>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                </section>\n                <section className=\"summary-stats1\">\n                    <h2>Summary Stats #1</h2>\n                    <div>\n                        <p>Total Games: {totalGames}</p>\n                        <p>Oldest Game: {oldestGame}</p>\n                        <p>Newest Game: {newestGame}</p>\n                        <p>Game Counts by Type: {JSON.stringify(gameCounts)}</p>\n                    </div>\n                </section>\n                <section className=\"summary-stats2\">\n                    <h2>Summary Stats #2</h2>\n                    <div>\n                        <p>Win-Loss Record: {winLossRecord}</p>\n                        <p>Highest Rated Win: {highestRatedWin}</p>\n                        <p>Lowest Rated Loss: {lowestRatedLoss}</p>\n                        \n                    </div>\n                </section>\n                <section className=\"controls\">\n                    <button onClick={handleReset}>Reset</button>\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}