{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/AnalysisBoard.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport EditBoard from \"./EditBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nclass AnalysisBoard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orientation: \"white\",\n      evaluation: \"\",\n      bestLine: \"\",\n      currentPly: 1,\n      future: [],\n      showEvaluation: false,\n      // Add this line\n      moveHistory: [],\n      fullGame: []\n    };\n    this.handleFlipBoard = () => {\n      this.setState(({\n        orientation\n      }) => ({\n        orientation: orientation === 'white' ? 'black' : 'white'\n      }));\n    };\n    this.toggleStockfishEvaluation = () => {\n      this.setState(prevState => ({\n        showEvaluation: !prevState.showEvaluation\n      }));\n    };\n    this.goToEnd = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous = moves.length + this.future.length - 1;\n      if (previous >= 0) {\n        if (moves.length > 0) {\n          for (var i = 0; i < moves.length; i += 1) {\n            tmp.move(moves[i]);\n          }\n        }\n        if (this.future.length - 1 >= 0) {\n          for (var i = 0; i < this.future.length; i += 1) {\n            tmp.move(this.future[i]);\n          }\n          const previous_fen = tmp.fen();\n          const previous_pgn = tmp.pgn();\n          this.future = [];\n          game.load(previous_fen);\n          game.loadPgn(previous_pgn);\n          this.setState({\n            fen: previous_fen\n          });\n          this.moveHistory = game.history();\n          this.setState({\n            currentPly: this.moveHistory.length\n          });\n          if (!game.isGameOver()) {\n            this.engineGame().prepareMove();\n          }\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n    };\n    this.goToNextMove = () => {\n      if (this.future.length > 0) {\n        game.move(this.future[0]);\n        this.setState({\n          fen: game.fen()\n        });\n        this.future.shift();\n        this.moveHistory = game.history();\n        this.setState({\n          currentPly: this.moveHistory.length\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToPreviousMove = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous = moves.length - 1;\n      if (previous >= 0) {\n        for (var i = 0; i < previous; i += 1) {\n          tmp.move(moves[i]);\n        }\n        const previous_fen = tmp.fen();\n        const previous_pgn = tmp.pgn();\n        this.future.unshift(moves[previous]);\n        tmp.move(moves[previous]);\n        game.load(previous_fen);\n        game.loadPgn(previous_pgn);\n        this.setState({\n          fen: previous_fen\n        });\n        this.moveHistory = game.history();\n        this.setState({\n          currentPly: this.moveHistory.length\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToStart = () => {\n      const moves = game.history();\n      const tmp = new Chess();\n      const previous_fen = tmp.fen();\n      const previous_pgn = tmp.pgn();\n      const previous = moves.length - 1;\n      if (previous >= 0) {\n        for (var i = 0; i < previous; i += 1) {\n          tmp.move(moves[i]);\n        }\n        this.future.unshift(...moves);\n        game.load(previous_fen);\n        game.loadPgn(previous_pgn);\n        this.setState({\n          fen: previous_fen\n        });\n        this.moveHistory = [];\n        this.setState({\n          currentPly: this.moveHistory.length\n        });\n        if (!game.isGameOver()) {\n          this.engineGame().prepareMove();\n        }\n      }\n      return;\n    };\n    this.goToMove = moveIndex => {\n      const moves = this.fullGame;\n      const tmp = new Chess();\n\n      // Make moves up to the selected move\n      for (let i = 0; i <= moveIndex; i++) {\n        tmp.move(moves[i]);\n      }\n\n      // Update game state\n      const previous_fen = tmp.fen();\n      const previous_pgn = tmp.pgn();\n      game.loadPgn(previous_pgn);\n      this.setState({\n        fen: previous_fen\n      });\n\n      // Update move history and future\n      const newMoveHistory = tmp.history();\n      this.moveHistory = newMoveHistory;\n      this.future = moves.slice(moveIndex + 1);\n      this.setState({\n        currentPly: this.moveHistory.length\n      });\n\n      // Prepare Stockfish for analysis\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    };\n    /*  componentDidUpdate(prevProps) {\n        // Check if game position has changed\n        if (prevProps.fen !== this.props.fen) {\n          this.setState({ fen: this.props.fen});\n          game.load(this.props.fen);\n          this.engineGame().prepareMove();\n        }\n      }*/\n    this.engineGame = options => {\n      options = options || {};\n      let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n      engine.postMessage(\"uci\");\n      engine.onmessage = event => {\n        const {\n          currentPly\n        } = this.state;\n        let line;\n        if (event && typeof event === \"object\") {\n          line = event.data;\n          // Extract evaluation and best continuation line from the Stockfish response\n          const evaluation = this.extractEvaluation(line);\n          const bestLine = this.extractBestLine(line);\n          // Update state with evaluation and best continuation line\n          this.setState({\n            evaluation,\n            bestLine\n          });\n        } else {\n          line = event;\n        }\n\n        // Process Stockfish analysis here\n        const bestLine = this.extractBestLine(line);\n        this.setState({\n          previousOutput: bestLine\n        });\n      };\n      return {\n        prepareMove: function () {\n          // Send current position to Stockfish for analysis\n          engine.postMessage(\"position fen \" + game.fen());\n          engine.postMessage(\"go depth 15\");\n        }\n      };\n    };\n    this.handleEditBoard = () => {\n      var T1 = document.getElementById(\"EditingOn\");\n      T1.style.display = T1.style.display === \"none\" ? \"block\" : \"none\";\n      var T2 = document.getElementById(\"EditingOff\");\n      T2.style.display = T2.style.display === \"block\" ? \"none\" : \"block\";\n    };\n    this.loadGameFromPgn = () => {\n      const {\n        game\n      } = this.state;\n      const {\n        pgn\n      } = this.props;\n      if (pgn) {\n        game.load_pgn(pgn);\n        this.setState({\n          fen: game.fen()\n        });\n      }\n    };\n    this.onDrop = ({\n      sourceSquare,\n      targetSquare\n    }) => {\n      const legalMoves = game.moves({\n        verbose: true\n      });\n      const move = legalMoves.find(move => move.from === sourceSquare && move.to === targetSquare);\n      if (!move) {\n        console.log(\"Illegal move\");\n        return;\n      }\n      if (move.san === this.future[0]) {\n        this.future.shift();\n      } else {\n        this.future = [];\n      }\n      game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\"\n      });\n      this.moveHistory = game.history();\n      this.setState({\n        currentPly: this.moveHistory.length\n      });\n      this.fullGame = this.moveHistory.concat(this.future);\n\n      // Update state with new position\n      // Update state with new position and add move to history\n      this.setState(prevState => ({\n        fen: game.fen()\n      }));\n      // Prepare Stockfish for analysis\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    };\n    // Helper function to extract evaluation from the Stockfish response\n    this.extractEvaluation = line => {\n      const mateEvalMatch = line.match(/score mate (.+)/);\n\n      // Extract the evaluation from the response\n\n      const evalMatch = line.match(/score cp (-?\\d+)/);\n      if (evalMatch) {\n        const evaluation = Math.round(parseInt(evalMatch[1]) * 0.01 * 100) / 100;\n        if (evaluation >= 0) {\n          if (game.turn() === \"b\") {\n            return -evaluation;\n          }\n          return \"+\" + evaluation;\n        }\n        if (game.turn() === \"w\") {\n          return evaluation;\n        }\n        return \"+\" + -evaluation;\n\n        // Reverse the sign for white's perspective\n      } else {\n        if (mateEvalMatch) {\n          const evaluation = parseInt(mateEvalMatch[1]);\n          if (evaluation >= 0) {\n            if (game.turn() === \"b\") {\n              return \"Black Mate in \" + evaluation;\n            }\n            return \"White Mate in \" + evaluation;\n          }\n          if (game.turn() === \"w\") {\n            return \"Black Mate in \" + -evaluation;\n          }\n          return \"White Mate in \" + -evaluation;\n        }\n      }\n      return null;\n    };\n    // Helper function to extract the best continuation line from the Stockfish response\n    // Helper function to extract the best continuation line from the Stockfish response and convert it into the desired format\n    // Helper function to extract the best continuation line from the Stockfish response in SAN format\n    // Helper function to extract the best continuation line from the Stockfish response in SAN format\n    this.extractBestLine = line => {\n      const currentPly = game.history().length + 1;\n      // Extract the best continuation line from the response\n      const bestLineMatch = line.match(/pvSan (.*) bmc/);\n      if (bestLineMatch) {\n        const moves = bestLineMatch[1].split(\" \");\n        const sanMoves = [];\n        if (moves.length !== 1) {\n          for (let i = 0; i < Math.min(2 * Math.floor(moves.length / 2), 4); i += 1) {\n            const moveNumber = i + currentPly; // Adjust move numbering\n            const sanMove = moveNumber % 2 === 1 ? `${Math.floor((moveNumber + 1) / 2)}. ${moves[i]}` : `${Math.floor((moveNumber + 1) / 2)}... ${moves[i]}`; // Use \"...\" for Black's moves\n            sanMoves.push(sanMove);\n          }\n          return sanMoves.join(\" \");\n        } else {\n          const sanMove = currentPly % 2 === 1 ? `${Math.floor((currentPly + 1) / 2)}. ${moves[0]}` : `${Math.floor((currentPly + 1) / 2)}... ${moves[0]}`; // Use \"...\" for Black's moves\n          return sanMove;\n        }\n      }\n      return this.state.previousOutput;\n    };\n  }\n  componentDidMount() {\n    if (this.props.pgn) {\n      const game = new Chess();\n      game.loadPgn(this.props.pgn);\n      this.future = [];\n      this.moveHistory = game.history();\n      this.fullGame = this.moveHistory.concat(this.future);\n    } else {\n      const game = new Chess();\n      this.future = [];\n      this.moveHistory = [];\n      this.fullGame = [];\n      this.setState({\n        fen: \"start\"\n      });\n    }\n    this.engineGame().prepareMove();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.pgn !== this.props.pgn && this.props.pgn) {\n      game.reset(); // Reset the game state\n      game.loadPgn(this.props.pgn);\n      this.setState({\n        fen: game.fen(),\n        currentPly: 1,\n        future: []\n      });\n      this.moveHistory = game.history();\n      this.engineGame().prepareMove();\n    }\n  }\n  render() {\n    const {\n      fen,\n      orientation,\n      evaluation,\n      bestLine,\n      currentPly,\n      future,\n      showEvaluation,\n      moveHistory,\n      fullGame\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleEditBoard,\n          children: \"Edit Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleFlipBoard,\n          children: \"Flip Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.toggleStockfishEvaluation,\n          children: \"Stockfish Evaluation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.goToStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.goToPreviousMove,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.goToNextMove,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.goToEnd,\n          children: \"End\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 29\n        }, this), showEvaluation &&\n        /*#__PURE__*/\n        // Only render this block if showEvaluation is true\n        _jsxDEV(\"div\", {\n          className: \"stockfish-evaluation\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Stockfish Eval: \", evaluation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: bestLine\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.fullGame && this.fullGame.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: index === currentPly - 1 ? 'selected' : '',\n            onClick: () => this.goToMove(index),\n            children: [index % 2 === 0 ? `${index / 2 + 1}. ` : `${(index - 1) / 2 + 1}...`, move]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: boardsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-board-container\",\n          id: \"EditingOff\",\n          style: {\n            display: \"block\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Chessboard, {\n            position: fen,\n            width: 520,\n            onDrop: this.onDrop // Pass onDrop function to Chessboard\n            ,\n            orientation: orientation,\n            boardStyle: boardStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"EditingOn\",\n          style: {\n            display: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(EditBoard, {\n            in_fen: fen,\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this);\n  }\n}\nAnalysisBoard.propTypes = {\n  children: PropTypes.func,\n  fen: PropTypes.string,\n  pgn: PropTypes.string // Add this line\n};\nexport default AnalysisBoard;\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};","map":{"version":3,"names":["React","Component","PropTypes","Chess","Chessboard","EditBoard","jsxDEV","_jsxDEV","STOCKFISH","window","AnalysisBoard","constructor","args","state","orientation","evaluation","bestLine","currentPly","future","showEvaluation","moveHistory","fullGame","handleFlipBoard","setState","toggleStockfishEvaluation","prevState","goToEnd","moves","game","history","tmp","previous","length","i","move","previous_fen","fen","previous_pgn","pgn","load","loadPgn","isGameOver","engineGame","prepareMove","goToNextMove","shift","goToPreviousMove","unshift","goToStart","goToMove","moveIndex","newMoveHistory","slice","options","engine","Worker","stockfishjs","postMessage","onmessage","event","line","data","extractEvaluation","extractBestLine","previousOutput","handleEditBoard","T1","document","getElementById","style","display","T2","loadGameFromPgn","props","load_pgn","onDrop","sourceSquare","targetSquare","legalMoves","verbose","find","from","to","console","log","san","promotion","concat","mateEvalMatch","match","evalMatch","Math","round","parseInt","turn","bestLineMatch","split","sanMoves","min","floor","moveNumber","sanMove","push","join","componentDidMount","componentDidUpdate","prevProps","reset","render","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","boardsContainer","id","position","width","boardStyle","in_fen","propTypes","func","string","borderRadius","boxShadow","justifyContent","alignItems"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/AnalysisBoard.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\";\nimport Chessboard from \"chessboardjsx\";\nimport EditBoard from \"./EditBoard\";\n\nconst STOCKFISH = window.STOCKFISH;\n\nclass AnalysisBoard extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    fen: PropTypes.string,\n    pgn: PropTypes.string, // Add this line\n  };\n  \n  state = {\n    orientation: \"white\",\n    evaluation: \"\",\n    bestLine: \"\",\n    currentPly: 1,\n    future: [],\n    showEvaluation: false, // Add this line\n    moveHistory: [],\n    fullGame: [],\n  };\n    componentDidMount() {\n      if (this.props.pgn) {\n        const game = new Chess();\n          game.loadPgn(this.props.pgn);\n          this.future = [];\n          this.moveHistory= game.history();\n          this.fullGame = this.moveHistory.concat(this.future);\n\n      }else{\n        const game = new Chess();\n        this.future=[];\n        this.moveHistory=[];\n        this.fullGame = [];\n        this.setState({ fen: \"start\"});}\n      this.engineGame().prepareMove();\n  }\n  handleFlipBoard = () => {\n    this.setState(({ orientation }) => ({\n      orientation: orientation === 'white' ? 'black' : 'white',\n    }));\n  };\n  \n  toggleStockfishEvaluation = () => {\n    this.setState(prevState => ({\n      showEvaluation: !prevState.showEvaluation\n    }));\n  };\n  \n\n  goToEnd = () => {\n  const moves = game.history();\n  const tmp = new Chess();\n  const previous = moves.length+this.future.length-1;\n  if (previous >= 0){\n    if (moves.length>0){\n  for(var i=0;i<moves.length;i+=1) {\n    tmp.move(moves[i]);\n  }}\n\n  if (this.future.length -1 >= 0){\n    for(var i=0;i<this.future.length;i+=1) {\n      tmp.move(this.future[i]);\n    }\n  const previous_fen = tmp.fen();\n  const previous_pgn = tmp.pgn();\n  this.future=[];\n  game.load(previous_fen);\n  game.loadPgn(previous_pgn);\n  this.setState({ fen:previous_fen});\n  this.moveHistory=game.history();\n  this.setState({ currentPly: this.moveHistory.length});\n  if (!game.isGameOver()) {\n    this.engineGame().prepareMove();\n  }\n}else{\nreturn;}\n}else{return;}\n};\n\n\n  goToNextMove = () => {\n    if (this.future.length > 0){\n      game.move(this.future[0]);\n      this.setState({ fen:game.fen()});\n      this.future.shift();\n      this.moveHistory=game.history();\n      this.setState({ currentPly: this.moveHistory.length});\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove();\n      }\n    }\n  return;\n  };\n\n  goToPreviousMove = () => {\n    const moves = game.history();\n    const tmp = new Chess();\n    const previous = moves.length-1;\n    if (previous >= 0){\n    for(var i=0;i<previous;i+=1) {\n      tmp.move(moves[i]);\n    }\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    this.future.unshift(moves[previous]);\n    tmp.move(moves[previous]);\n    game.load(previous_fen);\n    game.loadPgn(previous_pgn);\n    this.setState({ fen:previous_fen});\n    this.moveHistory=game.history();\n    this.setState({ currentPly: this.moveHistory.length});\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  }\n  return;\n  };\n\n\n  goToStart = () => {\n    const moves = game.history();\n    const tmp = new Chess();\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    const previous = moves.length-1;\n    if (previous >= 0){\n    for(var i=0;i<previous;i+=1) {\n      tmp.move(moves[i]);\n    }\n    this.future.unshift(...moves);\n    game.load(previous_fen);\n    game.loadPgn(previous_pgn);\n    this.setState({ fen:previous_fen});\n    this.moveHistory=[];\n    this.setState({ currentPly: this.moveHistory.length});\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  }\n  return;\n  };\n\n  goToMove = (moveIndex) => {\n    const moves = this.fullGame;\n    const tmp = new Chess();\n  \n    // Make moves up to the selected move\n    for (let i = 0; i <= moveIndex; i++) {\n      tmp.move(moves[i]);\n    }\n  \n    // Update game state\n    const previous_fen = tmp.fen();\n    const previous_pgn = tmp.pgn();\n    game.loadPgn(previous_pgn);\n    this.setState({ fen: previous_fen});\n  \n    // Update move history and future\n    const newMoveHistory = tmp.history();\n    this.moveHistory = newMoveHistory;\n    this.future = moves.slice(moveIndex + 1);\n    this.setState({ currentPly: this.moveHistory.length});\n  \n    // Prepare Stockfish for analysis\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  };\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.pgn !== this.props.pgn && this.props.pgn) {\n        game.reset(); // Reset the game state\n        game.loadPgn(this.props.pgn);\n        this.setState({ fen: game.fen(), currentPly: 1, future: [] });\n        this.moveHistory=game.history();\n        this.engineGame().prepareMove();\n    }\n}\n  \n/*  componentDidUpdate(prevProps) {\n    // Check if game position has changed\n    if (prevProps.fen !== this.props.fen) {\n      this.setState({ fen: this.props.fen});\n      game.load(this.props.fen);\n      this.engineGame().prepareMove();\n    }\n  }*/\n\n  engineGame = (options) => {\n    options = options || {};\n\n    let engine =\n      typeof STOCKFISH === \"function\"\n        ? STOCKFISH()\n        : new Worker(options.stockfishjs || \"stockfish.js\");\n\n    engine.postMessage(\"uci\");\n\n    engine.onmessage = (event) => {\n        const { currentPly } = this.state;\n      let line;\n\n\n      if (event && typeof event === \"object\") {\n        line = event.data;\n        // Extract evaluation and best continuation line from the Stockfish response\n        const evaluation = this.extractEvaluation(line);\n        const bestLine = this.extractBestLine(line);\n        // Update state with evaluation and best continuation line\n        this.setState({ evaluation, bestLine });\n      } else {\n        line = event;\n      }\n\n      // Process Stockfish analysis here\n      const bestLine = this.extractBestLine(line);\n      this.setState({ previousOutput: bestLine });\n      \n    };\n\n    return {\n      prepareMove: function () {\n        // Send current position to Stockfish for analysis\n        engine.postMessage(\"position fen \" + game.fen());\n        engine.postMessage(\"go depth 15\");\n      },\n    };\n  };\n  handleEditBoard = () => {\n    var T1 = document.getElementById(\"EditingOn\");\n    T1.style.display =  T1.style.display===\"none\"? \"block\": \"none\";\n\n    var T2 = document.getElementById(\"EditingOff\");\n    T2.style.display =  T2.style.display===\"block\"? \"none\": \"block\";\n};\n\nloadGameFromPgn = () => {\n  const { game } = this.state;\n  const { pgn } = this.props;\n  if (pgn) {\n    game.load_pgn(pgn);\n    this.setState({ fen: game.fen() });\n  }\n};\n  onDrop = ({ sourceSquare, targetSquare }) => {\n    const legalMoves = game.moves({ verbose: true });\n    const move = legalMoves.find(\n      (move) => move.from === sourceSquare && move.to === targetSquare\n    );\n\n    if (!move) {\n      console.log(\"Illegal move\");\n      return;\n    } \n\n    if (move.san===this.future[0]){\n      this.future.shift();\n  } else{this.future=[];}\n\n\n  game.move({ from: sourceSquare, to: targetSquare, promotion: \"q\" });\n  this.moveHistory=game.history();\n  this.setState({ currentPly: this.moveHistory.length});\n  this.fullGame = this.moveHistory.concat(this.future);\n  \n\n    // Update state with new position\n    // Update state with new position and add move to history\n    this.setState((prevState) => ({\n      fen: game.fen()\n    }));\n    // Prepare Stockfish for analysis\n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove();\n    }\n  };\n\n  // Helper function to extract evaluation from the Stockfish response\n  extractEvaluation = (line) => {\n    const mateEvalMatch = line.match(/score mate (.+)/);\n    \n    // Extract the evaluation from the response\n    \n    const evalMatch = line.match(/score cp (-?\\d+)/);\n    if (evalMatch) {\n        const evaluation = (Math.round(parseInt(evalMatch[1])*0.01 * 100) )/ 100;\n        if (evaluation>=0){\n          if (game.turn()===\"b\"){\n            return (-evaluation); \n          }\n          return \"+\"+(evaluation); \n        }\n        if (game.turn()===\"w\"){\n          return (evaluation); \n        }\n        return \"+\"+(-evaluation); \n        \n        \n          // Reverse the sign for white's perspective\n    } else {if (mateEvalMatch){\n      const evaluation = (parseInt(mateEvalMatch[1]));\n      if (evaluation>=0){\n      if (game.turn()===\"b\"){\n      return (\"Black Mate in \" + (evaluation)); \n    }return (\"White Mate in \" + (evaluation)); \n  }\n    if (game.turn()===\"w\"){\n      return (\"Black Mate in \" + (-evaluation)); \n  } return (\"White Mate in \" + (-evaluation)); \n}\n  }  return null;\n};\n\n  // Helper function to extract the best continuation line from the Stockfish response\n  // Helper function to extract the best continuation line from the Stockfish response and convert it into the desired format\n// Helper function to extract the best continuation line from the Stockfish response in SAN format\n// Helper function to extract the best continuation line from the Stockfish response in SAN format\nextractBestLine = (line) => {\n  const currentPly=game.history().length + 1;\n  // Extract the best continuation line from the response\n  const bestLineMatch = line.match(/pvSan (.*) bmc/);\n  if (bestLineMatch) {\n    const moves = bestLineMatch[1].split(\" \");\n    const sanMoves = [];\n    if (moves.length !==1){\n    for (let i = 0; i < Math.min(2 * Math.floor(moves.length / 2),4); i += 1) {\n      const moveNumber = i+currentPly; // Adjust move numbering\n      const sanMove = moveNumber %2 ===1? `${Math.floor((moveNumber+1)/2)}. ${moves[i]}` : `${Math.floor((moveNumber+1)/2)}... ${moves[i]}`; // Use \"...\" for Black's moves\n      sanMoves.push(sanMove);\n    }\n    return sanMoves.join(\" \");\n  } else{\n    const sanMove = currentPly %2 ===1? `${Math.floor((currentPly+1)/2)}. ${moves[0]}` : `${Math.floor((currentPly+1)/2)}... ${moves[0]}`; // Use \"...\" for Black's moves\n    return sanMove;\n  }\n    \n  }\n  return this.state.previousOutput;\n};\n\n\nrender() {\n    const { fen, orientation, evaluation, bestLine, currentPly, future, showEvaluation, moveHistory,fullGame } = this.state;\n    return (\n      <div>\n        <div className=\"control-panel\">\n        <button onClick={this.handleEditBoard}>Edit Board</button>\n        <button onClick={this.handleFlipBoard}>Flip Board</button>\n        <button onClick={this.toggleStockfishEvaluation}>Stockfish Evaluation</button>\n        \n                            <button onClick={this.goToStart}>Start</button>\n                            <button onClick={this.goToPreviousMove}>Previous</button>\n                            <button onClick={this.goToNextMove}>Next</button>\n                            <button onClick={this.goToEnd}>End</button>\n                            {showEvaluation && ( // Only render this block if showEvaluation is true\n          <div className=\"stockfish-evaluation\">\n            <div>Stockfish Eval: {evaluation}</div>\n            <div>{bestLine}</div>\n          </div>\n        )}\n                            </div>\n                            <div className=\"move-history\">\n          <h3>Move History</h3>\n          <ul>\n            {this.fullGame && this.fullGame.map((move, index) => (\n              <li\n                key={index}\n                className={index === currentPly -1  ? 'selected' : ''}\n                onClick={() => this.goToMove(index)}\n              >\n                {index % 2 === 0 ? `${index / 2 + 1}. ` : `${(index-1) / 2 + 1}...` }{move}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div style={boardsContainer}>\n        <div className=\"analysis-board-container\" id=\"EditingOff\" style={{display:\"block\"}}>\n        <Chessboard\n          position={fen}\n          width={520}\n          onDrop={this.onDrop} // Pass onDrop function to Chessboard\n          orientation={orientation}\n          boardStyle={boardStyle}\n        />\n        </div>\n        <div id=\"EditingOn\" style={{display:\"none\"}}>\n        <EditBoard in_fen={fen}> </EditBoard>\n    </div>  \n    </div>\n      </div>\n    );\n  }\n}\nexport default AnalysisBoard;\n\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\n\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}