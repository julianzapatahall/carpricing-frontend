{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n      processGames(games);\n    };\n    reader.readAsText(file);\n  };\n  const processGames = games => {\n    console.log(1);\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const chess = new Chess();\n    console.log(2);\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    console.log(3);\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    console.log(4);\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index // Add GameID column\n    }));\n    console.log(5);\n\n    // Log dataFrame before calculations\n    const dataFrameBeforeCalc = JSON.parse(JSON.stringify(dataFrame));\n    console.log('DataFrame before calculations:', dataFrameBeforeCalc);\n\n    // Filter DataFrame based on conditions\n    const opponentColor = 'Black'; // 'White' or 'Black'\n    const opponentName = 'julian8x8';\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n    // Log filteredDF before calculations\n    const filteredDFBeforeCalc = JSON.parse(JSON.stringify(filteredDF));\n    console.log('FilteredDF before calculations:', filteredDFBeforeCalc);\n\n    // Calculate MoveProbability1\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n\n    // Calculate subsequent move probabilities\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n\n    // Calculate LineProbability(W) and LineProbability(B)\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n\n    // Pivot DataFrame from wider to longer\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`]\n        });\n      }\n    });\n\n    // Log filteredDF after all calculations\n    console.log('FilteredDF with probabilities:', filteredDF);\n\n    // Count #Games for each line\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Step 1: Filter longDF for lines with '#Games' > 1\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"a\");\n    // Step 2: Remove proper subset lines\n    const uniqueLines = \"//\";\n    console.log(uniqueLines);\n    const nonSubsetLongDF = filteredLongDF.filter(row => {\n      if (!row.Line) return false; // Ensure Line is defined\n      if (uniqueLines.includes(row.Line)) {\n        return false;\n      }\n      uniqueLines.concat(row.Line);\n      uniqueLines.concat(\"//\");\n      return true;\n    });\n    console.log(uniqueLines);\n    console.log(\"b\");\n\n    // Step 3: Remove duplicate lines, keeping only the first occurrence\n    const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) => index === self.findIndex(r => r.Line === row.Line));\n    console.log(\"c\");\n\n    // Step 4: Sort and rename columns based on opponentColor\n    let finalLongDF;\n    if (opponentColor === \"Black\") {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n      });\n    } else {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n      });\n    }\n    console.log(\"d\");\n    setFilteredData(finalLongDF);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"#about-us\",\n              children: \"About Us\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blunder Punisher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of games in the file: \", gamesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"common-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Most Common Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [line, \" - \", count]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filtered Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(filteredData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"Zm1qWO95pBxu6Xbtq07Evuqy7E8=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","Link","Chess","jsxDEV","_jsxDEV","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","processGames","readAsText","console","log","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","chess","forEach","index","loadPgn","moves","history","push","valList","triangle","String","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","GameID","dataFrameBeforeCalc","JSON","parse","stringify","opponentColor","opponentName","filteredDF","filteredDFBeforeCalc","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","filteredLongDFUnsorted","filteredLongDF","sort","a","b","uniqueLines","nonSubsetLongDF","includes","concat","uniqueLongDF","self","findIndex","r","finalLongDF","findCommonLines","move","line","slice","join","sortedLines","Object","entries","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","count","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n            processGames(games);\n        };\n        reader.readAsText(file);\n    };\n\n    const processGames = (games) => {\n        console.log(1);\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n    \n        const movesList = [];\n        const chess = new Chess();\n        console.log(2);\n    \n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            let moves = chess.history();\n            movesList.push(moves);\n    \n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n    \n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n    \n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n        console.log(3);\n    \n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n        console.log(4);\n    \n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index // Add GameID column\n        }));\n        console.log(5);\n    \n        // Log dataFrame before calculations\n        const dataFrameBeforeCalc = JSON.parse(JSON.stringify(dataFrame));\n        console.log('DataFrame before calculations:', dataFrameBeforeCalc);\n    \n        // Filter DataFrame based on conditions\n        const opponentColor = 'Black'; // 'White' or 'Black'\n        const opponentName = 'julian8x8';\n        \n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n        \n        // Log filteredDF before calculations\n        const filteredDFBeforeCalc = JSON.parse(JSON.stringify(filteredDF));\n        console.log('FilteredDF before calculations:', filteredDFBeforeCalc);\n        \n        // Calculate MoveProbability1\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n    \n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n    \n        // Calculate subsequent move probabilities\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n            \n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n    \n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n    \n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n    \n        // Calculate LineProbability(W) and LineProbability(B)\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n    \n        // Pivot DataFrame from wider to longer\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`]\n                });\n            }\n        });\n    \n        // Log filteredDF after all calculations\n        console.log('FilteredDF with probabilities:', filteredDF);\n    \n        // Count #Games for each line\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n    \n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n// Step 1: Filter longDF for lines with '#Games' > 1\nconst filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\nconst filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\nconsole.log(\"a\");\n// Step 2: Remove proper subset lines\nconst uniqueLines = \"//\";\nconsole.log(uniqueLines)\nconst nonSubsetLongDF = filteredLongDF.filter(row => {\n    if (!row.Line) return false; // Ensure Line is defined\n    if (uniqueLines.includes(row.Line)){\n        return false;\n    }\n    uniqueLines.concat(row.Line);\n    uniqueLines.concat(\"//\");\n    return true;\n});\nconsole.log(uniqueLines)\nconsole.log(\"b\");\n\n// Step 3: Remove duplicate lines, keeping only the first occurrence\nconst uniqueLongDF = nonSubsetLongDF.filter((row, index, self) =>\n    index === self.findIndex(r => r.Line === row.Line)\n);\nconsole.log(\"c\");\n\n// Step 4: Sort and rename columns based on opponentColor\nlet finalLongDF;\nif (opponentColor === \"Black\") {\n    finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n    finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n    });\n} else {\n    finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n    finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n    });\n}\nconsole.log(\"d\");\n\nsetFilteredData(finalLongDF);\n\nconst commonLines = findCommonLines(movesList);\nsetCommonLines(commonLines);\n};\n    \n    \n    \n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/blunder-punisher\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"#about-us\">About Us</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <h1>Blunder Punisher</h1>\n                <input type=\"file\" onChange={handleFileSelect} />\n                <p>Number of games in the file: {gamesCount}</p>\n                <div className=\"common-lines\">\n                    <h2>Most Common Lines</h2>\n                    <ul>\n                        {commonLines.map(([line, count], index) => (\n                            <li key={index}>{line} - {count}</li>\n                        ))}\n                    </ul>\n                    <h2>Filtered Data</h2>\n                    <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}