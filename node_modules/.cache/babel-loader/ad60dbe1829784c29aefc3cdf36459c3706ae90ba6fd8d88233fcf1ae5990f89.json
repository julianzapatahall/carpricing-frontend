{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport ErrorBoundary from './ErrorBoundary';\nimport reportWebVitals from './reportWebVitals';\n/*\n// Custom error handling logic\nconst handleGlobalError = (message, source, lineno, colno, error) => {\n  console.error('Global error caught:', message, source, lineno, colno, error);\n  // Set an error flag in sessionStorage (use sessionStorage instead of localStorage to avoid persisting across sessions)\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\nconst handleUnhandledRejection = (event) => {\n  console.error('Unhandled promise rejection:', event);\n  // Set an error flag in sessionStorage\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\n// Assign custom error handlers\nwindow.onerror = handleGlobalError;\nwindow.onunhandledrejection = handleUnhandledRejection;\n\n// Check if the page was reloaded due to an error\nwindow.addEventListener('load', () => {\n  const hasError = sessionStorage.getItem('hasError');\n  if (hasError) {\n    // Show the error banner\n    const errorBanner = document.getElementById('global-error-banner');\n    if (errorBanner) {\n      errorBanner.style.display = 'block';\n    }\n    // Clear the error flag\n    sessionStorage.removeItem('hasError');\n  }\n});\n\n\n\n\nroot.render(\n\n  <React.StrictMode>\n    <ErrorBoundary>\n      <div id=\"global-error-banner\" className=\"error-banner\" style={{ display: 'none' }}>\n        <p>Sorry, an unexpected error occurred.</p>\n        <button onClick={() => document.getElementById('global-error-banner').style.display = 'none'} className=\"close-button\">X</button>\n      </div>\n      <App />\n      </ErrorBoundary>\n  </React.StrictMode>\n);*/\n\n//</ErrorBoundary>\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 7\n}, this));\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","ErrorBoundary","reportWebVitals","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport ErrorBoundary from './ErrorBoundary';\nimport reportWebVitals from './reportWebVitals';\n/*\n// Custom error handling logic\nconst handleGlobalError = (message, source, lineno, colno, error) => {\n  console.error('Global error caught:', message, source, lineno, colno, error);\n  // Set an error flag in sessionStorage (use sessionStorage instead of localStorage to avoid persisting across sessions)\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\nconst handleUnhandledRejection = (event) => {\n  console.error('Unhandled promise rejection:', event);\n  // Set an error flag in sessionStorage\n  sessionStorage.setItem('hasError', 'true');\n  // Attempt to reload the page\n  window.location.reload();\n};\n\n// Assign custom error handlers\nwindow.onerror = handleGlobalError;\nwindow.onunhandledrejection = handleUnhandledRejection;\n\n// Check if the page was reloaded due to an error\nwindow.addEventListener('load', () => {\n  const hasError = sessionStorage.getItem('hasError');\n  if (hasError) {\n    // Show the error banner\n    const errorBanner = document.getElementById('global-error-banner');\n    if (errorBanner) {\n      errorBanner.style.display = 'block';\n    }\n    // Clear the error flag\n    sessionStorage.removeItem('hasError');\n  }\n});\n\n\n\n\nroot.render(\n\n  <React.StrictMode>\n    <ErrorBoundary>\n      <div id=\"global-error-banner\" className=\"error-banner\" style={{ display: 'none' }}>\n        <p>Sorry, an unexpected error occurred.</p>\n        <button onClick={() => document.getElementById('global-error-banner').style.display = 'none'} className=\"close-button\">X</button>\n      </div>\n      <App />\n      </ErrorBoundary>\n  </React.StrictMode>\n);*/\n\n//</ErrorBoundary>\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n      <App />\n);\n\n\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,IAAI,GAAGN,QAAQ,CAACO,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACLL,OAAA,CAACJ,GAAG;EAAAU,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CACZ,CAAC;AAGDX,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}