{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport axios from 'axios';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n      processGames(games);\n    };\n    reader.readAsText(file);\n  };\n  const processGames = games => {\n    const opponentColor = 'Black';\n    const opponentName = 'julian8x8';\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    let uniqueLines = \"//\";\n    const nonSubsetLongDF = filteredLongDF.filter(row => {\n      if (!row.Line) return false;\n      if (uniqueLines.includes(row.Line)) {\n        return false;\n      }\n      uniqueLines += row.Line;\n      uniqueLines += \"//\";\n      return true;\n    });\n    const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) => index === self.findIndex(r => r.Line === row.Line));\n    let finalLongDF;\n    if (opponentColor === \"Black\") {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n      });\n    } else {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n      });\n    }\n    setFinalLongDF(finalLongDF);\n    evaluateAndAnnotateGames(finalLongDF);\n  };\n  const evaluatePosition = fen => {\n    return new Promise(resolve => {\n      stockfish.postMessage(`position fen ${fen}`);\n      stockfish.postMessage(\"go depth 15\");\n      stockfish.onmessage = event => {\n        const line = event.data;\n        const depthMatch = line.match(/depth (\\d+)/);\n        const evalMatch = line.match(/score cp (-?\\d+)/);\n        if (depthMatch && evalMatch) {\n          const depth = parseInt(depthMatch[1], 10);\n          if (depth === 15) {\n            const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n            resolve(evaluation);\n          }\n        }\n      };\n    });\n  };\n  const evaluateAndAnnotateGames = async finalLongDF => {\n    const chess = new Chess();\n    const chess2 = new Chess();\n    const board = chess2.board();\n    const evaluatedGames = [];\n    const uniqueGameIDs = [...new Set(finalLongDF.map(row => row.GameID))];\n    for (let gameID of uniqueGameIDs) {\n      const gameRows = finalLongDF.filter(row => row.GameID === gameID);\n      const maxPly = Math.max(...gameRows.map(row => row.Ply));\n      const pgn = gameRows[0].Pgn; // Assuming all rows for the same game have the same PGN\n      chess.loadPgn(pgn);\n      const chess2 = new Chess();\n      chess2.loadPgn(pgn);\n      chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", {\n        preserveHeaders: true\n      });\n      const moves = chess.history();\n      for (let i = 0; i < maxPly && i < moves.length; i++) {\n        chess2.move(moves[i]);\n        const fen = chess2.fen();\n        console.log(fen);\n        const evaluation = await evaluatePosition(fen);\n        console.log(evaluation);\n        chess2.setComment(evaluation);\n      }\n      evaluatedGames.push(chess2.pgn());\n    }\n    processEvaluatedGames(evaluatedGames);\n  };\n  const processEvaluatedGames = evaluatedPGNs => {\n    const opponentColor = 'Black';\n    const opponentName = 'julian8x8';\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    const evalList = [];\n    const fullEvalList = [];\n    chess.loadPgn(evaluatedPGNs[0]);\n    const origCommentsWithFens = chess.getComments();\n    const origComments = origCommentsWithFens.map(item => item.comment);\n    const maxPly = origComments.length;\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const commentsWithFens = chess.getComments();\n      const comments = commentsWithFens.map(item => item.comment);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      valList.push(comments[0]);\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < maxPly && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n        valList.push(comments[i]);\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= maxPly; j++) {\n      initialColnames.push(\"Line\" + String(j));\n      initialColnames.push(\"EVAL\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    const longDF = [];\n    dataFrame.forEach(row => {\n      for (let i = 1; i <= maxPly; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`]\n        });\n      }\n    });\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    let uniqueLines = \"//\";\n    const nonSubsetLongDF = filteredLongDF.filter(row => {\n      if (!row.Line) return false;\n      if (uniqueLines.includes(row.Line)) {\n        return false;\n      }\n      uniqueLines += row.Line;\n      uniqueLines += \"//\";\n      return true;\n    });\n    const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) => index === self.findIndex(r => r.Line === row.Line));\n    let finalLongDF;\n    if (opponentColor === \"Black\") {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n      });\n    } else {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n      });\n    }\n    console.log(finalLongDF);\n    const categorizedLines = categorizeLines(finalLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = opponentColor === \"Black\" ? \"LineEvaluationB\" : \"LineEvaluationW\";\n      const evaluation = row[evalColumn];\n      if (evaluation >= 2.5) {\n        row.MistakeType = \"Fatal Blunder\";\n      } else if (evaluation >= 1.0) {\n        row.MistakeType = \"Major Mistake\";\n      } else if (evaluation >= 0.6) {\n        row.MistakeType = \"Slight Inaccuracy\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"#about-us\",\n              children: \"About Us\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blunder Punisher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of games in the file: \", gamesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"common-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Most Common Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [line, \" - \", count]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filtered Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(filteredData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"cE5WW6S0lk2DJasymhcqGMPR/Q8=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","axios","jsxDEV","_jsxDEV","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","processGames","readAsText","opponentColor","opponentName","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","forEach","index","loadPgn","moves","history","push","valList","triangle","String","pgn","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","filteredDF","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","filteredLongDFUnsorted","filteredLongDF","sort","a","b","uniqueLines","nonSubsetLongDF","includes","uniqueLongDF","self","findIndex","r","evaluateAndAnnotateGames","evaluatePosition","fen","Promise","resolve","onmessage","line","data","depthMatch","match","evalMatch","depth","parseInt","toFixed","chess2","board","evaluatedGames","uniqueGameIDs","Set","gameID","gameRows","maxPly","Math","max","load","preserveHeaders","move","console","log","setComment","processEvaluatedGames","evaluatedPGNs","evalList","fullEvalList","origCommentsWithFens","getComments","origComments","item","comment","commentsWithFens","comments","categorizedLines","categorizeLines","findCommonLines","evalColumn","MistakeType","LineProbability","slice","join","sortedLines","Object","entries","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","count","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport axios from 'axios';\nimport './styles.css';\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    \n    let stockfish =\n        typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n    \n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n            processGames(games);\n        };\n        reader.readAsText(file);\n    };\n\n    const processGames = (games) => {\n        const opponentColor = 'Black';\n        const opponentName = 'julian8x8';\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n            \n        }));\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        let uniqueLines = \"//\";\n        const nonSubsetLongDF = filteredLongDF.filter(row => {\n            if (!row.Line) return false;\n            if (uniqueLines.includes(row.Line)){\n                return false;\n            }\n            uniqueLines += row.Line;\n            uniqueLines += \"//\";\n            return true;\n        });\n\n        const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) =>\n            index === self.findIndex(r => r.Line === row.Line)\n        );\n\n        let finalLongDF;\n        if (opponentColor === \"Black\") {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n            });\n        } else {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n            });\n        }\n\n        setFinalLongDF(finalLongDF);\n\n        evaluateAndAnnotateGames(finalLongDF);\n    };\n\n    const evaluatePosition = (fen) => {\n        return new Promise((resolve) => {\n            stockfish.postMessage(`position fen ${fen}`);\n            stockfish.postMessage(\"go depth 15\");\n    \n            stockfish.onmessage = (event) => {\n                const line = event.data;\n                const depthMatch = line.match(/depth (\\d+)/);\n                const evalMatch = line.match(/score cp (-?\\d+)/);\n    \n                if (depthMatch && evalMatch) {\n                    const depth = parseInt(depthMatch[1], 10);\n                    if (depth === 15) {\n                        const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n                        resolve(evaluation);\n                    }\n                }\n            };\n        });\n    };\n    \n\n    const evaluateAndAnnotateGames = async (finalLongDF) => {\n        const chess = new Chess();\n        const chess2= new Chess();\n        const board = chess2.board();\n        const evaluatedGames = [];\n\n        const uniqueGameIDs = [...new Set(finalLongDF.map(row => row.GameID))];\n        for (let gameID of uniqueGameIDs) {\n            const gameRows = finalLongDF.filter(row => row.GameID === gameID);\n            const maxPly = Math.max(...gameRows.map(row => row.Ply));\n            const pgn = gameRows[0].Pgn; // Assuming all rows for the same game have the same PGN\n            chess.loadPgn(pgn);\n            const chess2= new Chess();\n            chess2.loadPgn(pgn);\n            chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",{preserveHeaders:true});\n            const moves = chess.history();\n\n            for (let i = 0; i < maxPly && i < moves.length; i++) {\n                chess2.move(moves[i]);\n                const fen = chess2.fen();\n                console.log(fen);\n                const evaluation = await evaluatePosition(fen);\n                console.log(evaluation);\n\n                chess2.setComment(evaluation);\n            }\n\n            evaluatedGames.push(chess2.pgn());\n        }\n\n        processEvaluatedGames(evaluatedGames);\n    };\n    const processEvaluatedGames = (evaluatedPGNs) => {\n        const opponentColor = 'Black';\n        const opponentName = 'julian8x8';\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n        const evalList = [];\n        const fullEvalList = [];\n        chess.loadPgn(evaluatedPGNs[0]);\n        const origCommentsWithFens = chess.getComments();\n        const origComments = origCommentsWithFens.map(item => item.comment);\n        const maxPly =origComments.length;\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n            const commentsWithFens = chess.getComments();\n            const comments = commentsWithFens.map(item => item.comment);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n            valList.push(comments[0]);\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < maxPly && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n                valList.push(comments[i]);\n\n            }\n            fullValList.push(valList);\n        });\n\n        for (let j = 1; j <= maxPly; j++) {\n            initialColnames.push(\"Line\" + String(j));\n            initialColnames.push(\"EVAL\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        const longDF = [];\n        dataFrame.forEach(row => {\n            for (let i = 1; i <= maxPly; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`]\n                });\n            }\n        });\n\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        let uniqueLines = \"//\";\n        const nonSubsetLongDF = filteredLongDF.filter(row => {\n            if (!row.Line) return false;\n            if (uniqueLines.includes(row.Line)){\n                return false;\n            }\n            uniqueLines += row.Line;\n            uniqueLines += \"//\";\n            return true;\n        });\n\n        const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) =>\n            index === self.findIndex(r => r.Line === row.Line)\n        );\n\n        let finalLongDF;\n        if (opponentColor === \"Black\") {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n            });\n        } else {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n            });\n        }\n        console.log(finalLongDF);\n\n        const categorizedLines = categorizeLines(finalLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = opponentColor === \"Black\" ? \"LineEvaluationB\" : \"LineEvaluationW\";\n            const evaluation = row[evalColumn];\n\n            if (evaluation >= 2.5) {\n                row.MistakeType = \"Fatal Blunder\";\n            } else if (evaluation >= 1.0) {\n                row.MistakeType = \"Major Mistake\";\n            } else if (evaluation >= 0.6) {\n                row.MistakeType = \"Slight Inaccuracy\";\n            } else {\n                row.MistakeType = \"None\";\n            }\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/blunder-punisher\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"#about-us\">About Us</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <h1>Blunder Punisher</h1>\n                <input type=\"file\" onChange={handleFileSelect} />\n                <p>Number of games in the file: {gamesCount}</p>\n                <div className=\"common-lines\">\n                    <h2>Most Common Lines</h2>\n                    <ul>\n                        {commonLines.map(([line, count], index) => (\n                            <li key={index}>{line} - {count}</li>\n                        ))}\n                    </ul>\n                    <h2>Filtered Data</h2>\n                    <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}