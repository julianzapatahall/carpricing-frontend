{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport Stockfish from 'stockfish';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n      await processGames(games);\n    };\n    reader.readAsText(file);\n  };\n  const processGames = async games => {\n    console.log(1);\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const chess = new Chess();\n    console.log(2);\n    for (let game of games) {\n      chess.loadPgn(game);\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    }\n    console.log(3);\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    console.log(4);\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index // Add GameID column\n    }));\n    console.log(5);\n\n    // Log dataFrame before calculations\n    const dataFrameBeforeCalc = JSON.parse(JSON.stringify(dataFrame));\n    console.log('DataFrame before calculations:', dataFrameBeforeCalc);\n\n    // Filter DataFrame based on conditions\n    const opponentColor = 'Black'; // 'White' or 'Black'\n    const opponentName = 'julian8x8';\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n    // Log filteredDF before calculations\n    const filteredDFBeforeCalc = JSON.parse(JSON.stringify(filteredDF));\n    console.log('FilteredDF before calculations:', filteredDFBeforeCalc);\n\n    // Calculate MoveProbability1\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n\n    // Calculate subsequent move probabilities\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n\n    // Calculate LineProbability(W) and LineProbability(B)\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n\n    // Evaluate positions using Stockfish\n    const stockfish = Stockfish();\n    const evaluatedData = await evaluatePositions(stockfish, filteredDF);\n\n    // Pivot DataFrame from wider to longer\n    const longDF = [];\n    evaluatedData.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          [`LineEvaluation${i}`]: row[`LineEvaluation${i}`] // Add evaluations\n        });\n      }\n    });\n\n    // Log filteredDF after all calculations\n    console.log('FilteredDF with probabilities:', filteredDF);\n\n    // Count #Games for each line\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Step 1: Filter longDF for lines with '#Games' > 1\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"a\");\n\n    // Step 2: Remove proper subset lines\n    let uniqueLines = \"//\";\n    console.log(uniqueLines);\n    const nonSubsetLongDF = filteredLongDF.filter(row => {\n      if (!row.Line) return false; // Ensure Line is defined\n      if (uniqueLines.includes(row.Line)) {\n        return false;\n      }\n      uniqueLines += row.Line;\n      uniqueLines += \"//\";\n      return true;\n    });\n    console.log(uniqueLines);\n    console.log(\"b\");\n\n    // Step 3: Remove duplicate lines, keeping only the first occurrence\n    const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) => index === self.findIndex(r => r.Line === row.Line));\n    console.log(\"c\");\n\n    // Step 4: Sort and rename columns based on opponentColor\n    let finalLongDF;\n    if (opponentColor === \"Black\") {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n      });\n    } else {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n      });\n    }\n    console.log(\"d\");\n\n    // Filter lines based on evaluation\n    const categorizedLines = categorizeLines(finalLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n  };\n  const evaluatePositions = (stockfish, filteredDF) => {\n    return new Promise(resolve => {\n      const evaluatedDF = filteredDF.map(row => {\n        let chess = new Chess();\n        let evalResults = {};\n        for (let i = 1; i <= 25; i++) {\n          const fen = chess.fen();\n          stockfish.postMessage(`position fen ${fen}`);\n          stockfish.postMessage(\"go depth 15\");\n          stockfish.onmessage = message => {\n            if (message.startsWith(\"info depth\")) {\n              const scoreMatch = message.match(/score cp (-?\\d+)/);\n              if (scoreMatch) {\n                const score = parseInt(scoreMatch[1], 10);\n                evalResults[`LineEvaluation${i}`] = score / 100;\n              }\n            }\n          };\n          chess.move(row[`Line${i}`]);\n        }\n        return {\n          ...row,\n          ...evalResults\n        };\n      });\n      setTimeout(() => resolve(evaluatedDF), 5000); // Adjust timeout based on evaluation time\n    });\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = opponentColor === \"Black\" ? \"LineEvaluationB\" : \"LineEvaluationW\";\n      const evaluation = row[evalColumn];\n      if (evaluation >= 2.5) {\n        row.MistakeType = \"Fatal Blunder\";\n      } else if (evaluation >= 1.0) {\n        row.MistakeType = \"Major Mistake\";\n      } else if (evaluation >= 0.6) {\n        row.MistakeType = \"Slight Inaccuracy\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"#about-us\",\n              children: \"About Us\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blunder Punisher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of games in the file: \", gamesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"common-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Most Common Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [line, \" - \", count]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filtered Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(filteredData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"Zm1qWO95pBxu6Xbtq07Evuqy7E8=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","Link","Chess","Stockfish","jsxDEV","_jsxDEV","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","processGames","readAsText","console","log","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","chess","loadPgn","moves","history","push","valList","triangle","String","header","i","j","dataFrame","row","index","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","GameID","dataFrameBeforeCalc","JSON","parse","stringify","opponentColor","opponentName","filteredDF","filteredDFBeforeCalc","moveProb1","Line1","totalGames","forEach","MoveProbability1","moveProb","key","lineCount","pw","pb","stockfish","evaluatedData","evaluatePositions","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","filteredLongDFUnsorted","filteredLongDF","sort","a","b","uniqueLines","nonSubsetLongDF","includes","uniqueLongDF","self","findIndex","r","finalLongDF","categorizedLines","categorizeLines","findCommonLines","Promise","resolve","evaluatedDF","evalResults","fen","postMessage","onmessage","message","startsWith","scoreMatch","match","score","parseInt","move","setTimeout","evalColumn","evaluation","MistakeType","LineProbability","line","slice","join","sortedLines","Object","entries","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","count","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport Stockfish from 'stockfish';\nimport './styles.css';\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n            await processGames(games);\n        };\n        reader.readAsText(file);\n    };\n\n    const processGames = async (games) => {\n        console.log(1);\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const chess = new Chess();\n        console.log(2);\n\n        for (let game of games) {\n            chess.loadPgn(game);\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        }\n        console.log(3);\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n        console.log(4);\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index // Add GameID column\n        }));\n        console.log(5);\n\n        // Log dataFrame before calculations\n        const dataFrameBeforeCalc = JSON.parse(JSON.stringify(dataFrame));\n        console.log('DataFrame before calculations:', dataFrameBeforeCalc);\n\n        // Filter DataFrame based on conditions\n        const opponentColor = 'Black'; // 'White' or 'Black'\n        const opponentName = 'julian8x8';\n        \n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n        \n        // Log filteredDF before calculations\n        const filteredDFBeforeCalc = JSON.parse(JSON.stringify(filteredDF));\n        console.log('FilteredDF before calculations:', filteredDFBeforeCalc);\n        \n        // Calculate MoveProbability1\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        // Calculate subsequent move probabilities\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n            \n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        // Calculate LineProbability(W) and LineProbability(B)\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        // Evaluate positions using Stockfish\n        const stockfish = Stockfish();\n        const evaluatedData = await evaluatePositions(stockfish, filteredDF);\n\n        // Pivot DataFrame from wider to longer\n        const longDF = [];\n        evaluatedData.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    [`LineEvaluation${i}`]: row[`LineEvaluation${i}`] // Add evaluations\n                });\n            }\n        });\n\n        // Log filteredDF after all calculations\n        console.log('FilteredDF with probabilities:', filteredDF);\n\n        // Count #Games for each line\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Step 1: Filter longDF for lines with '#Games' > 1\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"a\");\n\n        // Step 2: Remove proper subset lines\n        let uniqueLines = \"//\";\n        console.log(uniqueLines);\n        const nonSubsetLongDF = filteredLongDF.filter(row => {\n            if (!row.Line) return false; // Ensure Line is defined\n            if (uniqueLines.includes(row.Line)){\n                return false;\n            }\n            uniqueLines+=row.Line;\n            uniqueLines+=\"//\";\n            return true;\n        });\n        console.log(uniqueLines);\n        console.log(\"b\");\n\n        // Step 3: Remove duplicate lines, keeping only the first occurrence\n        const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) =>\n            index === self.findIndex(r => r.Line === row.Line)\n        );\n        console.log(\"c\");\n\n        // Step 4: Sort and rename columns based on opponentColor\n        let finalLongDF;\n        if (opponentColor === \"Black\") {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n            });\n        } else {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n            });\n        }\n        console.log(\"d\");\n\n        // Filter lines based on evaluation\n        const categorizedLines = categorizeLines(finalLongDF, opponentColor);\n\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n    };\n\n    const evaluatePositions = (stockfish, filteredDF) => {\n        return new Promise((resolve) => {\n            const evaluatedDF = filteredDF.map((row) => {\n                let chess = new Chess();\n                let evalResults = {};\n                for (let i = 1; i <= 25; i++) {\n                    const fen = chess.fen();\n                    stockfish.postMessage(`position fen ${fen}`);\n                    stockfish.postMessage(\"go depth 15\");\n                    stockfish.onmessage = (message) => {\n                        if (message.startsWith(\"info depth\")) {\n                            const scoreMatch = message.match(/score cp (-?\\d+)/);\n                            if (scoreMatch) {\n                                const score = parseInt(scoreMatch[1], 10);\n                                evalResults[`LineEvaluation${i}`] = score / 100;\n                            }\n                        }\n                    };\n                    chess.move(row[`Line${i}`]);\n                }\n                return { ...row, ...evalResults };\n            });\n            setTimeout(() => resolve(evaluatedDF), 5000); // Adjust timeout based on evaluation time\n        });\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = opponentColor === \"Black\" ? \"LineEvaluationB\" : \"LineEvaluationW\";\n            const evaluation = row[evalColumn];\n\n            if (evaluation >= 2.5) {\n                row.MistakeType = \"Fatal Blunder\";\n            } else if (evaluation >= 1.0) {\n                row.MistakeType = \"Major Mistake\";\n            } else if (evaluation >= 0.6) {\n                row.MistakeType = \"Slight Inaccuracy\";\n            } else {\n                row.MistakeType = \"None\";\n            }\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/blunder-punisher\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"#about-us\">About Us</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <h1>Blunder Punisher</h1>\n                <input type=\"file\" onChange={handleFileSelect} />\n                <p>Number of games in the file: {gamesCount}</p>\n                <div className=\"common-lines\">\n                    <h2>Most Common Lines</h2>\n                    <ul>\n                        {commonLines.map(([line, count], index) => (\n                            <li key={index}>{line} - {count}</li>\n                        ))}\n                    </ul>\n                    <h2>Filtered Data</h2>\n                    <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}