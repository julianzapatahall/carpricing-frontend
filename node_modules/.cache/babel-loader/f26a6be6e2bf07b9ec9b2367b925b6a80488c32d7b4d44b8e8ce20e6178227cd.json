{"ast":null,"code":"import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\"; // import Chess from  \"chess.js\"(default) if recieving an error about new Chess not being a constructor\n\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\nclass Stockfish extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fen: \"start\"\n    };\n    this.onDrop = ({\n      sourceSquare,\n      targetSquare\n    }) => {\n      const legalMoves = game.moves({\n        verbose: true\n      });\n      const move = legalMoves.find(move => move.from === sourceSquare && move.to === targetSquare);\n      if (!move) {\n        console.log(\"Illegal move\");\n        return;\n      }\n      game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\"\n      });\n      this.setState({\n        position: game.fen()\n      });\n      if (!game.isGameOver()) {\n        this.engineGame().prepareMove().then(() => {\n          console.log(\"Engine move prepared\");\n        });\n      } else {\n        console.log(\"Game over\");\n      }\n    };\n    this.engineGame = options => {\n      options = options || {};\n\n      /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n      let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n      let evaler = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n      let engineStatus = {};\n      let time = {\n        wtime: 3000,\n        btime: 3000,\n        winc: 1500,\n        binc: 1500\n      };\n      let playerColor = \"black\";\n      let clockTimeoutID = null;\n      // let isEngineRunning = false;\n      let announced_game_over;\n      // do not pick up pieces if the game is over\n      // only pick up pieces for White\n\n      setInterval(function () {\n        if (announced_game_over) {\n          return;\n        }\n        if (game.isGameOver()) {\n          announced_game_over = true;\n        }\n      }, 500);\n      function uciCmd(cmd, which) {\n        // console.log('UCI: ' + cmd);\n\n        (which || engine).postMessage(cmd);\n      }\n      uciCmd(\"uci\");\n      function clockTick() {\n        let t = (time.clockColor === \"white\" ? time.wtime : time.btime) + time.startTime - Date.now();\n        let timeToNextSecond = t % 1000 + 1;\n        clockTimeoutID = setTimeout(clockTick, timeToNextSecond);\n      }\n      function stopClock() {\n        if (clockTimeoutID !== null) {\n          clearTimeout(clockTimeoutID);\n          clockTimeoutID = null;\n        }\n        if (time.startTime > 0) {\n          let elapsed = Date.now() - time.startTime;\n          time.startTime = null;\n          if (time.clockColor === \"white\") {\n            time.wtime = Math.max(0, time.wtime - elapsed);\n          } else {\n            time.btime = Math.max(0, time.btime - elapsed);\n          }\n        }\n      }\n      function startClock() {\n        if (game.turn() === \"w\") {\n          time.wtime += time.winc;\n          time.clockColor = \"white\";\n        } else {\n          time.btime += time.binc;\n          time.clockColor = \"black\";\n        }\n        time.startTime = Date.now();\n        clockTick();\n      }\n      function get_moves() {\n        let moves = \"\";\n        let history = game.history({\n          verbose: true\n        });\n        for (let i = 0; i < history.length; ++i) {\n          let move = history[i];\n          moves += \" \" + move.from + move.to + (move.promotion ? move.promotion : \"\");\n        }\n        return moves;\n      }\n      const prepareMove = () => {\n        stopClock();\n        this.setState({\n          fen: game.fen()\n        });\n        let turn = game.turn() === \"w\" ? \"white\" : \"black\";\n        if (!game.isGameOver()) {\n          // if (turn === playerColor) {\n          if (turn !== playerColor) {\n            // playerColor = playerColor === 'white' ? 'black' : 'white';\n            uciCmd(\"position startpos moves\" + get_moves());\n            uciCmd(\"position startpos moves\" + get_moves(), evaler);\n            uciCmd(\"eval\", evaler);\n            if (time && time.wtime) {\n              uciCmd(\"go \" + (time.depth ? \"depth \" + time.depth : \"\") + \" wtime \" + time.wtime + \" winc \" + time.winc + \" btime \" + time.btime + \" binc \" + time.binc);\n            } else {\n              uciCmd(\"go \" + (time.depth ? \"depth \" + time.depth : \"\"));\n            }\n            // isEngineRunning = true;\n          }\n          if (game.history().length >= 2 && !time.depth && !time.nodes) {\n            startClock();\n          }\n        }\n      };\n      evaler.onmessage = function (event) {\n        console.log(engineStatus.score);\n        //console.log(event)\n        let line;\n        if (event && typeof event === \"object\") {\n          line = event.data;\n        } else {\n          line = event;\n        }\n\n        //console.log('evaler: ' + line);\n\n        /// Ignore some output.\n        if (line === \"uciok\" || line === \"readyok\" || line.substr(0, 11) === \"option name\") {\n          return;\n        }\n      };\n      engine.onmessage = event => {\n        let line;\n        if (event && typeof event === \"object\") {\n          line = event.data;\n        } else {\n          line = event;\n        }\n        //console.log('Reply: ' + line);\n        if (line === \"uciok\") {\n          engineStatus.engineLoaded = true;\n        } else if (line === \"readyok\") {\n          engineStatus.engineReady = true;\n        } else {\n          let match = line.match(/^bestmove ([a-h][1-8])([a-h][1-8])([qrbn])?/);\n          let turn = game.turn() === \"w\" ? \"white\" : \"black\";\n\n          /// Did the AI move?\n          if (match && turn !== playerColor) {\n            // isEngineRunning = false;\n            game.move({\n              from: match[1],\n              to: match[2],\n              promotion: match[3]\n            });\n            this.setState({\n              fen: game.fen()\n            });\n            prepareMove();\n            uciCmd(\"eval\", evaler);\n            //uciCmd(\"eval\");\n            /// Is it sending feedback?\n          } else if (match = line.match(/^info .*\\bdepth (\\d+) .*\\bnps (\\d+)/)) {\n            engineStatus.search = \"Depth: \" + match[1] + \" Nps: \" + match[2];\n          }\n\n          /// Is it sending feed back with a score?\n          if (match = line.match(/^info .*\\bscore (\\w+) (-?\\d+)/)) {\n            let score = parseInt(match[2], 10) * (game.turn() === \"w\" ? 1 : -1);\n\n            /// Is it measuring in centipawns?\n            if (match[1] === \"cp\") {\n              engineStatus.score = (score / 100.0).toFixed(2);\n              /// Did it find a mate?\n            } else if (match[1] === \"mate\") {\n              engineStatus.score = \"Mate in \" + Math.abs(score);\n            }\n\n            /// Is the score bounded?\n            if (match = line.match(/\\b(upper|lower)bound\\b/)) {\n              engineStatus.score = (match[1] === \"upper\" === (game.turn() === \"w\") ? \"<= \" : \">= \") + engineStatus.score;\n            }\n          }\n          console.log(line);\n        }\n      };\n      return {\n        start: function () {\n          uciCmd(\"ucinewgame\");\n          uciCmd(\"isready\");\n          engineStatus.engineReady = false;\n          engineStatus.search = null;\n          prepareMove();\n          announced_game_over = false;\n        },\n        prepareMove: function () {\n          return new Promise(resolve => {\n            prepareMove();\n            resolve(); // Resolve the Promise once the preparation is done\n          });\n        }\n      };\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      fen: game.fen()\n    });\n    this.engineGame().prepareMove();\n  }\n  render() {\n    const {\n      fen\n    } = this.state;\n    return this.props.children({\n      position: fen,\n      onDrop: this.onDrop\n    });\n  }\n}\nStockfish.propTypes = {\n  children: PropTypes.func\n};\nexport default Stockfish;","map":{"version":3,"names":["React","Component","PropTypes","Chess","STOCKFISH","window","game","Stockfish","constructor","args","state","fen","onDrop","sourceSquare","targetSquare","legalMoves","moves","verbose","move","find","from","to","console","log","promotion","setState","position","isGameOver","engineGame","prepareMove","then","options","engine","Worker","stockfishjs","evaler","engineStatus","time","wtime","btime","winc","binc","playerColor","clockTimeoutID","announced_game_over","setInterval","uciCmd","cmd","which","postMessage","clockTick","t","clockColor","startTime","Date","now","timeToNextSecond","setTimeout","stopClock","clearTimeout","elapsed","Math","max","startClock","turn","get_moves","history","i","length","depth","nodes","onmessage","event","score","line","data","substr","engineLoaded","engineReady","match","search","parseInt","toFixed","abs","start","Promise","resolve","componentDidMount","render","props","children","propTypes","func"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/integrations/Stockfish.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chess } from \"chess.js\"; // import Chess from  \"chess.js\"(default) if recieving an error about new Chess not being a constructor\n\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\n\nclass Stockfish extends Component {\n  static propTypes = { children: PropTypes.func };\n\n  \n\n  state = { fen: \"start\" };\n  \n\n  componentDidMount() {\n    this.setState({ fen: game.fen() });\n\n    this.engineGame().prepareMove();\n  }\n  \n\n  onDrop = ({ sourceSquare, targetSquare }) => {\n    const legalMoves = game.moves({ verbose: true });\n    const move = legalMoves.find(move => move.from === sourceSquare && move.to === targetSquare);\n \n \n    if (!move) {\n      console.log(\"Illegal move\");\n      return;\n    }\n \n \n    game.move({ from: sourceSquare, to: targetSquare, promotion: \"q\" });\n    this.setState({ position: game.fen() });\n \n \n    if (!game.isGameOver()) {\n      this.engineGame().prepareMove().then(() => {\n        console.log(\"Engine move prepared\");\n      });\n    } else {\n      console.log(\"Game over\");\n    }\n  };\n \n\n  engineGame = options => {\n    options = options || {};\n\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n    let engine =\n        typeof STOCKFISH === \"function\"\n            ? STOCKFISH()\n            : new Worker(options.stockfishjs || \"stockfish.js\");\n    let evaler =\n        typeof STOCKFISH === \"function\"\n            ? STOCKFISH()\n            : new Worker(options.stockfishjs || \"stockfish.js\");\n    let engineStatus = {};\n    let time = { wtime: 3000, btime: 3000, winc: 1500, binc: 1500 };\n    let playerColor = \"black\";\n    let clockTimeoutID = null;\n    // let isEngineRunning = false;\n    let announced_game_over;\n    // do not pick up pieces if the game is over\n    // only pick up pieces for White\n\n    setInterval(function () {\n        if (announced_game_over) {\n            return;\n        }\n\n        if (game.isGameOver()) {\n            announced_game_over = true;\n        }\n    }, 500);\n\n    function uciCmd(cmd, which) {\n        // console.log('UCI: ' + cmd);\n\n        (which || engine).postMessage(cmd);\n\n    }\n    uciCmd(\"uci\");\n\n    function clockTick() {\n        let t =\n            (time.clockColor === \"white\" ? time.wtime : time.btime) +\n            time.startTime -\n            Date.now();\n        let timeToNextSecond = (t % 1000) + 1;\n        clockTimeoutID = setTimeout(clockTick, timeToNextSecond);\n    }\n\n    function stopClock() {\n        if (clockTimeoutID !== null) {\n            clearTimeout(clockTimeoutID);\n            clockTimeoutID = null;\n        }\n        if (time.startTime > 0) {\n            let elapsed = Date.now() - time.startTime;\n            time.startTime = null;\n            if (time.clockColor === \"white\") {\n                time.wtime = Math.max(0, time.wtime - elapsed);\n            } else {\n                time.btime = Math.max(0, time.btime - elapsed);\n            }\n        }\n    }\n\n    function startClock() {\n        if (game.turn() === \"w\") {\n            time.wtime += time.winc;\n            time.clockColor = \"white\";\n        } else {\n            time.btime += time.binc;\n            time.clockColor = \"black\";\n        }\n        time.startTime = Date.now();\n        clockTick();\n    }\n\n    function get_moves() {\n        let moves = \"\";\n        let history = game.history({ verbose: true });\n\n        for (let i = 0; i < history.length; ++i) {\n            let move = history[i];\n            moves +=\n                \" \" + move.from + move.to + (move.promotion ? move.promotion : \"\");\n        }\n\n        return moves;\n    }\n\n    const prepareMove = () => {\n        stopClock();\n        this.setState({ fen: game.fen() });\n        let turn = game.turn() === \"w\" ? \"white\" : \"black\";\n        if (!game.isGameOver()) {\n            // if (turn === playerColor) {\n            if (turn !== playerColor) {\n                // playerColor = playerColor === 'white' ? 'black' : 'white';\n                uciCmd(\"position startpos moves\" + get_moves());\n                uciCmd(\"position startpos moves\" + get_moves(), evaler);\n                uciCmd(\"eval\", evaler);\n                if (time && time.wtime) {\n                    uciCmd(\n                        \"go \" +\n                        (time.depth ? \"depth \" + time.depth : \"\") +\n                        \" wtime \" +\n                        time.wtime +\n                        \" winc \" +\n                        time.winc +\n                        \" btime \" +\n                        time.btime +\n                        \" binc \" +\n                        time.binc\n                    );\n                } else {\n                    uciCmd(\"go \" + (time.depth ? \"depth \" + time.depth : \"\"));\n                }\n                // isEngineRunning = true;\n            }\n            if (game.history().length >= 2 && !time.depth && !time.nodes ) {\n                startClock();\n            }\n        }\n    };\n\n    evaler.onmessage = function (event) {\n        console.log(engineStatus.score);\n        //console.log(event)\n        let line;\n\n        if (event && typeof event === \"object\") {\n            line = event.data;\n        } else {\n            line = event;\n        }\n\n        //console.log('evaler: ' + line);\n\n        /// Ignore some output.\n        if (\n            line === \"uciok\" ||\n            line === \"readyok\" ||\n            line.substr(0, 11) === \"option name\"\n        ) {\n            return;\n        }\n    };\n\n    engine.onmessage = event => {\n        let line;\n\n        if (event && typeof event === \"object\") {\n            line = event.data;\n        } else {\n            line = event;\n        }\n        //console.log('Reply: ' + line);\n        if (line === \"uciok\") {\n            engineStatus.engineLoaded = true;\n        } else if (line === \"readyok\") {\n            engineStatus.engineReady = true;\n        } else {\n            let match = line.match(/^bestmove ([a-h][1-8])([a-h][1-8])([qrbn])?/);\n            let turn = game.turn() === \"w\" ? \"white\" : \"black\";\n\n            /// Did the AI move?\n            if (match&&turn!==playerColor) {\n                // isEngineRunning = false;\n                game.move({ from: match[1], to: match[2], promotion: match[3] });\n                this.setState({ fen: game.fen() });\n                prepareMove();\n                uciCmd(\"eval\", evaler);\n                //uciCmd(\"eval\");\n                /// Is it sending feedback?\n            } else if (\n                (match = line.match(/^info .*\\bdepth (\\d+) .*\\bnps (\\d+)/))\n            ) {\n                engineStatus.search = \"Depth: \" + match[1] + \" Nps: \" + match[2];\n            }\n\n            /// Is it sending feed back with a score?\n            if ((match = line.match(/^info .*\\bscore (\\w+) (-?\\d+)/))) {\n                let score = parseInt(match[2], 10) * (game.turn() === \"w\" ? 1 : -1);\n\n                /// Is it measuring in centipawns?\n                if (match[1] === \"cp\") {\n                    engineStatus.score = (score / 100.0).toFixed(2);\n                    /// Did it find a mate?\n                } else if (match[1] === \"mate\") {\n                    engineStatus.score = \"Mate in \" + Math.abs(score);\n                }\n\n                /// Is the score bounded?\n                if ((match = line.match(/\\b(upper|lower)bound\\b/))) {\n                    engineStatus.score =\n                        ((match[1] === \"upper\") === (game.turn() === \"w\")\n                            ? \"<= \"\n                            : \">= \") + engineStatus.score;\n\n\n                }\n\n            }\n            console.log(line);\n\n        }\n\n    };\n\n    return {\n        start: function () {\n            uciCmd(\"ucinewgame\");\n            uciCmd(\"isready\");\n            engineStatus.engineReady = false;\n            engineStatus.search = null;\n            prepareMove();\n            announced_game_over = false;\n        },\n        prepareMove: function () {\n            return new Promise(resolve => {\n                prepareMove();\n                resolve(); // Resolve the Promise once the preparation is done\n            });\n        }\n    };\n};\n\n\n  render() {\n    const { fen } = this.state;\n    return this.props.children({ position: fen, onDrop: this.onDrop });\n  }\n}\n\nexport default Stockfish;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}