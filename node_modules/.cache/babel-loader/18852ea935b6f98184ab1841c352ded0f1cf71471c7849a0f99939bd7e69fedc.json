{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n      processGames(games);\n    };\n    reader.readAsText(file);\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index // Add GameID column\n    }));\n\n    // Calculate MoveProbability1\n    const moveProb1 = dataFrame.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = dataFrame.length;\n    dataFrame.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n\n    // Calculate subsequent move probabilities\n    for (let i = 1; i < 25; i++) {\n      dataFrame.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = dataFrame.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      dataFrame.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / moveProb1[row[`Line${i}`]];\n      });\n    }\n\n    // Calculate LineProbability(W) and LineProbability(B)\n    dataFrame.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n          row[`LineProbability(W)${i}`] = pw;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n          row[`LineProbability(B)${i}`] = pb;\n        }\n      }\n    });\n\n    // Filter DataFrame based on conditions\n    const opponentColor = 'Black'; // 'White' or 'Black'\n\n    const filteredDF = dataFrame.filter(row => {\n      if (opponentColor === 'Black') {\n        return row.Black; // Assuming the row object has a 'Black' property\n      } else {\n        return row.White; // Assuming the row object has a 'White' property\n      }\n    });\n\n    // Pivot DataFrame from wider to longer\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`]\n        });\n      }\n    });\n\n    // Count #Games for each line\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n    setFilteredData(longDF);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"#about-us\",\n              children: \"About Us\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blunder Punisher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of games in the file: \", gamesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"common-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Most Common Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [line, \" - \", count]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filtered Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(filteredData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"Zm1qWO95pBxu6Xbtq07Evuqy7E8=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","Link","Chess","jsxDEV","_jsxDEV","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","processGames","readAsText","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","chess","forEach","index","loadPgn","moves","history","push","valList","triangle","String","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","GameID","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","pw","pb","opponentColor","filteredDF","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","findCommonLines","move","line","slice","join","sortedLines","Object","entries","sort","a","b","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","count","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n            processGames(games);\n        };\n        reader.readAsText(file);\n    };\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n    \n        const movesList = [];\n        const chess = new Chess();\n    \n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            let moves = chess.history();\n            movesList.push(moves);\n    \n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n    \n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n    \n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n    \n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n    \n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index // Add GameID column\n        }));\n    \n        // Calculate MoveProbability1\n        const moveProb1 = dataFrame.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = dataFrame.length;\n    \n        dataFrame.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n    \n        // Calculate subsequent move probabilities\n        for (let i = 1; i < 25; i++) {\n            dataFrame.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n            const moveProb = dataFrame.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n    \n            dataFrame.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / moveProb1[row[`Line${i}`]];\n            });\n        }\n    \n        // Calculate LineProbability(W) and LineProbability(B)\n        dataFrame.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                    row[`LineProbability(W)${i}`] = pw;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                    row[`LineProbability(B)${i}`] = pb;\n                }\n            }\n        });\n    \n        // Filter DataFrame based on conditions\n        const opponentColor = 'Black'; // 'White' or 'Black'\n    \n        const filteredDF = dataFrame.filter(row => {\n            if (opponentColor === 'Black') {\n                return row.Black; // Assuming the row object has a 'Black' property\n            } else {\n                return row.White; // Assuming the row object has a 'White' property\n            }\n        });\n    \n        // Pivot DataFrame from wider to longer\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`]\n                });\n            }\n        });\n    \n        // Count #Games for each line\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n    \n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n    \n        setFilteredData(longDF);\n    \n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n    };\n    \n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/blunder-punisher\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"#about-us\">About Us</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <h1>Blunder Punisher</h1>\n                <input type=\"file\" onChange={handleFileSelect} />\n                <p>Number of games in the file: {gamesCount}</p>\n                <div className=\"common-lines\">\n                    <h2>Most Common Lines</h2>\n                    <ul>\n                        {commonLines.map(([line, count], index) => (\n                            <li key={index}>{line} - {count}</li>\n                        ))}\n                    </ul>\n                    <h2>Filtered Data</h2>\n                    <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}