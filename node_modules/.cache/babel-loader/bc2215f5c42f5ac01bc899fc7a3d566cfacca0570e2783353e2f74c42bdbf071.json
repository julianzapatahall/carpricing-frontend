{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/EditBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditBoard = ({\n  in_fen\n}) => {\n  _s();\n  const [fen, setFen] = useState(in_fen);\n  const [orientation, setOrientation] = useState('white');\n\n  //console.log('Received fen:', in_fen);\n  //console.log('Current fen:', fen);\n\n  // Update the fen state when the in_fen prop changes\n  useEffect(() => {\n    setFen(in_fen);\n  }, [in_fen]);\n\n  // Ensure that fen is properly initialized and updated\n  useEffect(() => {\n    console.log('Updated fen:', fen);\n  }, [fen]);\n  const handleFlipBoard = () => {\n    setOrientation(orientation === 'white' ? 'black' : 'white');\n  };\n  function myFunction(p1) {\n    if (p1 == 0) {\n      return \"\";\n    }\n    return p1;\n  }\n  function isNumeric(str) {\n    if (typeof str != \"string\") return false; // we only process strings!  \n    return !isNaN(str) &&\n    // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n    !isNaN(parseFloat(str)); // ...and ensure strings of whitespace fail\n  } //stackoverflow answered Oct 6, 2008 at 19:24 by Dan\n\n  const handleDrop = ({\n    sourceSquare,\n    targetSquare,\n    piece\n  }) => {\n    // Log the move\n    console.log(`Dropping piece: ${piece} from ${sourceSquare} to ${targetSquare}`);\n\n    // Validate input\n    if (!sourceSquare || !targetSquare || !piece) {\n      console.error('Missing drop data');\n      return;\n    }\n    try {\n      const newFen = updateFen(fen, sourceSquare, targetSquare, piece);\n      console.log(`New FEN: ${newFen}`);\n      setFen(newFen);\n    } catch (error) {\n      console.error('Error processing move:', error);\n    }\n  };\n  const updateFen = (fen, sourceSquare, targetSquare, piece) => {\n    const pieceChar = piece.charAt(piece.length - 1) === 'P' ? piece.charAt(0) : piece;\n    const rows = fen.split(' ')[0].split('/');\n    const source = {\n      rank: 8 - parseInt(sourceSquare[1]),\n      file: sourceSquare.charCodeAt(0) - 'a'.charCodeAt(0)\n    };\n    const target = {\n      rank: 8 - parseInt(targetSquare[1]),\n      file: targetSquare.charCodeAt(0) - 'a'.charCodeAt(0)\n    };\n\n    // Modify the source rank\n    rows[source.rank] = updateRank(rows[source.rank], source.file, null);\n\n    // Modify the target rank\n    rows[target.rank] = updateRank(rows[target.rank], target.file, pieceChar);\n    return rows.join('/') + fen.slice(fen.indexOf(' ')); // Preserve remaining parts of the original FEN\n  };\n  const updateRank = (rank, fileIndex, piece) => {\n    const items = rank.split('');\n    let result = '';\n    let count = 0;\n\n    // Expand the row into an array of squares\n    for (let i = 0; i < items.length; i++) {\n      if (isNaN(parseInt(items[i]))) {\n        count++;\n        result += items[i];\n      } else {\n        for (let j = 0; j < parseInt(items[i]); j++) {\n          if (count === fileIndex) {\n            result += piece ? piece : '1';\n          } else {\n            result += '1';\n          }\n          count++;\n        }\n      }\n    }\n\n    // Remove extra '1's if a piece was placed\n    if (piece) {\n      result = result.replace(/111/g, '3').replace(/11/g, '2');\n    }\n\n    // Compress result back into FEN format\n    return result.replace(/11111111/g, '8').replace(/1111111/g, '7').replace(/111111/g, '6').replace(/11111/g, '5').replace(/1111/g, '4').replace(/111/g, '3').replace(/11/g, '2');\n  };\n\n  /*\n      // Calculate the rank and file indices of the target square\n      const fileIndex = 'abcdefgh'.indexOf(targetSquare[0]); // Get the index of the file (column)\n      const rankIndex = 8 - parseInt(targetSquare[1]); // Get the index of the rank (row)\n    \n      // Convert the FEN string to an array of ranks\n      const fenArray = fen.split('/');\n    \n      // Replace the character at the calculated square index with the new piece\n      let newRank = '';\n      for (let i = 0; i < 8; i++) {\n        if (i === fileIndex) {\n          newRank += fenPiece;\n        } else {\n          newRank += fenArray[rankIndex][i];\n        }\n      }\n      fenArray[rankIndex] = newRank;\n    \n      // Reassemble the FEN string with the modified rank\n      const newFen = fenArray.join('/');\n    \n      // Update the board position\n      setFen(newFen);*/\n\n  const handleStartingPosition = () => {\n    setFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'); // Set board position to starting position\n  };\n  const handleClearBoard = () => {\n    setFen('8/8/8/8/8/8/8/8'); // Clear the board by setting position to an empty board FEN\n  };\n  /*\n    const handleFenChange = (event) => {\n      setFen(event.target.value); // Update board position with the entered FEN string\n    };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFlipBoard,\n      children: \"Flip Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onDrop: handleDrop,\n      width: 340,\n      sparePieces: true,\n      orientation: orientation // Adjust orientation as needed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartingPosition,\n        children: \"Starting Position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearBoard,\n        children: \"Clear Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(EditBoard, \"x5nJXoH88BRRHUdyS1nh1Ag+66U=\");\n_c = EditBoard;\nexport default EditBoard;\n\n//        <input type=\"text\" value={fen} onChange={handleFenChange} placeholder=\"Enter FEN string\" />\n// <button><Link to=\"/play-stockfish\">Play From Position</Link></button>\n// <button><Link to=\"/analysis-board\">Close Edit Board</Link></button>\nvar _c;\n$RefreshReg$(_c, \"EditBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Link","jsxDEV","_jsxDEV","EditBoard","in_fen","_s","fen","setFen","orientation","setOrientation","console","log","handleFlipBoard","myFunction","p1","isNumeric","str","isNaN","parseFloat","handleDrop","sourceSquare","targetSquare","piece","error","newFen","updateFen","pieceChar","charAt","length","rows","split","source","rank","parseInt","file","charCodeAt","target","updateRank","join","slice","indexOf","fileIndex","items","result","count","i","j","replace","handleStartingPosition","handleClearBoard","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","position","onDrop","width","sparePieces","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/EditBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport { Link } from 'react-router-dom';\n\nconst EditBoard = ({ in_fen }) => {\n  const [fen, setFen] = useState(in_fen);\n  const [orientation, setOrientation] = useState('white');\n\n  //console.log('Received fen:', in_fen);\n //console.log('Current fen:', fen);\n\n  // Update the fen state when the in_fen prop changes\n  useEffect(() => {\n    setFen(in_fen);\n  }, [in_fen]);\n\n  // Ensure that fen is properly initialized and updated\n  useEffect(() => {\n    console.log('Updated fen:', fen);\n  }, [fen]);\n\n    const handleFlipBoard = () => {\n        setOrientation(orientation === 'white' ? 'black' : 'white');\n    };\n\n  function myFunction(p1) {\n    if(p1==0){\n      return \"\";}\n      return p1;\n    }\n  function isNumeric(str) {\n      if (typeof str != \"string\") return false // we only process strings!  \n      return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n             !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\n    } //stackoverflow answered Oct 6, 2008 at 19:24 by Dan\n    \n\n    const handleDrop = ({ sourceSquare, targetSquare, piece }) => {\n      // Log the move\n      console.log(`Dropping piece: ${piece} from ${sourceSquare} to ${targetSquare}`);\n      \n      // Validate input\n      if (!sourceSquare || !targetSquare || !piece) {\n          console.error('Missing drop data');\n          return;\n      }\n  \n      try {\n          const newFen = updateFen(fen, sourceSquare, targetSquare, piece);\n          console.log(`New FEN: ${newFen}`);\n          setFen(newFen);\n      } catch (error) {\n          console.error('Error processing move:', error);\n      }\n  };\n  \n  const updateFen = (fen, sourceSquare, targetSquare, piece) => {\n      const pieceChar = piece.charAt(piece.length - 1) === 'P' ? piece.charAt(0) : piece;\n      const rows = fen.split(' ')[0].split('/');\n  \n      const source = {\n          rank: 8 - parseInt(sourceSquare[1]),\n          file: sourceSquare.charCodeAt(0) - 'a'.charCodeAt(0)\n      };\n      const target = {\n          rank: 8 - parseInt(targetSquare[1]),\n          file: targetSquare.charCodeAt(0) - 'a'.charCodeAt(0)\n      };\n  \n      // Modify the source rank\n      rows[source.rank] = updateRank(rows[source.rank], source.file, null);\n  \n      // Modify the target rank\n      rows[target.rank] = updateRank(rows[target.rank], target.file, pieceChar);\n  \n      return rows.join('/') + fen.slice(fen.indexOf(' '));  // Preserve remaining parts of the original FEN\n  };\n  \n  const updateRank = (rank, fileIndex, piece) => {\n      const items = rank.split('');\n      let result = '';\n      let count = 0;\n  \n      // Expand the row into an array of squares\n      for (let i = 0; i < items.length; i++) {\n          if (isNaN(parseInt(items[i]))) {\n              count++;\n              result += items[i];\n          } else {\n              for (let j = 0; j < parseInt(items[i]); j++) {\n                  if (count === fileIndex) {\n                      result += piece ? piece : '1';\n                  } else {\n                      result += '1';\n                  }\n                  count++;\n              }\n          }\n      }\n  \n      // Remove extra '1's if a piece was placed\n      if (piece) {\n          result = result.replace(/111/g, '3').replace(/11/g, '2');\n      }\n  \n      // Compress result back into FEN format\n      return result.replace(/11111111/g, '8')\n                   .replace(/1111111/g, '7')\n                   .replace(/111111/g, '6')\n                   .replace(/11111/g, '5')\n                   .replace(/1111/g, '4')\n                   .replace(/111/g, '3')\n                   .replace(/11/g, '2');\n  };\n  \n    \n  \n/*\n    // Calculate the rank and file indices of the target square\n    const fileIndex = 'abcdefgh'.indexOf(targetSquare[0]); // Get the index of the file (column)\n    const rankIndex = 8 - parseInt(targetSquare[1]); // Get the index of the rank (row)\n  \n    // Convert the FEN string to an array of ranks\n    const fenArray = fen.split('/');\n  \n    // Replace the character at the calculated square index with the new piece\n    let newRank = '';\n    for (let i = 0; i < 8; i++) {\n      if (i === fileIndex) {\n        newRank += fenPiece;\n      } else {\n        newRank += fenArray[rankIndex][i];\n      }\n    }\n    fenArray[rankIndex] = newRank;\n  \n    // Reassemble the FEN string with the modified rank\n    const newFen = fenArray.join('/');\n  \n    // Update the board position\n    setFen(newFen);*/\n\n  const handleStartingPosition = () => {\n    setFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'); // Set board position to starting position\n  };\n\n  const handleClearBoard = () => {\n    setFen('8/8/8/8/8/8/8/8'); // Clear the board by setting position to an empty board FEN\n  };\n/*\n  const handleFenChange = (event) => {\n    setFen(event.target.value); // Update board position with the entered FEN string\n  };*/\n\n  return (\n    <div>\n      <button onClick={handleFlipBoard}>Flip Board</button>\n      \n\n      <Chessboard\n        position={fen}\n        onDrop={handleDrop}\n        width={340}\n        sparePieces={true}\n        orientation={orientation} // Adjust orientation as needed\n      />\n      <div>\n        <button onClick={handleStartingPosition}>Starting Position</button>\n        <button onClick={handleClearBoard}>Clear Board</button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditBoard;\n\n//        <input type=\"text\" value={fen} onChange={handleFenChange} placeholder=\"Enter FEN string\" />\n// <button><Link to=\"/play-stockfish\">Play From Position</Link></button>\n// <button><Link to=\"/analysis-board\">Close Edit Board</Link></button>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}