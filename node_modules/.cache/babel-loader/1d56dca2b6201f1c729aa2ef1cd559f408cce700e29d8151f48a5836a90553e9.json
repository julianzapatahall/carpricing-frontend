{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n  const [processing, setProcessing] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState(null);\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const handleStart = () => {\n    setProcessing(true);\n    const games = importedGames;\n    processGames(games);\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      chess.deleteComments();\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n\n    // Filter for lines with probability greater than 0.2\n    const filteredByProbabilityDF = filteredLongDFUnsorted.filter(row => row.LineProbabilityW >= 0.2 || row.LineProbabilityB >= 0.2);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      } else {\n        uniqueLinesStr += row.Line + \"//\";\n        return true;\n      }\n    });\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameID: row.GameID,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n  };\n  const evaluatePosition = fen => {\n    return new Promise(resolve => {\n      stockfish.postMessage(`position fen ${fen}`);\n      stockfish.postMessage(\"go depth 16\");\n      stockfish.onmessage = event => {\n        const line = event.data;\n        const depthMatch = line.match(/depth (\\d+)/);\n        const evalMatch = line.match(/score cp (-?\\d+)/);\n        if (depthMatch && evalMatch) {\n          const depth = parseInt(depthMatch[1], 10);\n          if (depth === 15) {\n            const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n            resolve(evaluation);\n          }\n        }\n      };\n    });\n  };\n  const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n    const chess = new Chess();\n    const evaluatedGames = [];\n    const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n    const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n    for (let gameID = 0; gameID < pgnList.length; gameID++) {\n      if (uniqueGameIDs.includes(gameID)) {\n        const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n        chess.loadPgn(pgn);\n        const chess2 = new Chess();\n        chess2.loadPgn(pgn);\n        chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", {\n          preserveHeaders: true\n        });\n        const moves = chess.history();\n        for (let i = 0; i < maxPly && i < moves.length; i++) {\n          chess2.move(moves[i]);\n          const fen = chess2.fen();\n          const origevaluation = await evaluatePosition(fen);\n          const evaluation = i % 2 === 0 ? String(parseFloat(origevaluation) * -1) : String(parseFloat(origevaluation));\n          chess2.setComment(evaluation);\n        }\n        evaluatedGames.push(chess2.pgn());\n      } else {\n        evaluatedGames.push(pgnList[gameID]);\n      }\n    }\n    processEvaluatedGames(evaluatedGames, maxPly);\n  };\n  const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    chess.loadPgn(evaluatedPGNs[0]);\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const commentsWithFens = chess.getComments();\n      const comments = commentsWithFens.map(item => item.comment);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      valList.push(parseFloat(comments[0]));\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < maxPly && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n        valList.push(parseFloat(comments[i]));\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= maxPly; j++) {\n      initialColnames.push(\"Line\" + String(j));\n      initialColnames.push(\"EVAL\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < maxPly; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= maxPly; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= maxPly; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n\n    // Filter for lines with probability greater than 0.2\n    const filteredByProbabilityDF = filteredLongDFUnsorted.filter(row => row.LineProbabilityW >= 0.2 || row.LineProbabilityB >= 0.2);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      } else {\n        uniqueLinesStr += row.Line + \"//\";\n        return true;\n      }\n    });\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameID: row.GameID,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    setProcessing(false); // Stop processing\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = \"EVAL\";\n      const evaluation = row[evalColumn];\n      if (evaluation >= 2.5) {\n        row.MistakeType = \"Fatal Blunder\";\n      } else if (evaluation >= 1.0) {\n        row.MistakeType = \"Major Mistake\";\n      } else if (evaluation >= 0.6) {\n        row.MistakeType = \"Slight Inaccuracy\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  const toggleDropdown = dropdown => {\n    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/our-team\",\n              children: \"Our Team\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Blunder Punisher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentName\",\n              children: \"Opponent Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"opponentName\",\n              value: opponentName,\n              onChange: e => setOpponentName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"opponentColor\",\n              children: \"Opponent Color:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"opponentColor\",\n              value: opponentColor,\n              onChange: e => setOpponentColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"precisionLevel\",\n              children: \"Precision Level:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"precisionLevel\",\n              value: precisionLevel,\n              onChange: e => setPrecisionLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Amateur/SemiPro\",\n                children: \"Amateur/SemiPro (5s-1min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Professional\",\n                children: \"Professional (1min-10min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"GM\",\n                children: \"GM (1min-30min)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStart,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 25\n          }, this), processing && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please wait, do not refresh or close the tab...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of games in the file: \", gamesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"common-lines\",\n          children: [processing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Most Common Lines\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [line, \" - \", count]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-header\",\n                onClick: () => toggleDropdown('fatalBlunders'),\n                children: [\"Fatal Blunders: \", filteredData.filter(row => row.MistakeType === 'Fatal Blunder').length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 37\n              }, this), activeDropdown === 'fatalBlunders' && /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: filteredData.filter(row => row.MistakeType === 'Fatal Blunder').map((row, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: row.Line.replace(/\\*/g, ' ')\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 680,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-header\",\n                onClick: () => toggleDropdown('majorMistakes'),\n                children: [\"Major Mistakes: \", filteredData.filter(row => row.MistakeType === 'Major Mistake').length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 37\n              }, this), activeDropdown === 'majorMistakes' && /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: filteredData.filter(row => row.MistakeType === 'Major Mistake').map((row, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: row.Line.replace(/\\*/g, ' ')\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 692,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-header\",\n                onClick: () => toggleDropdown('slightInaccuracies'),\n                children: [\"Slight Inaccuracies: \", filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 37\n              }, this), activeDropdown === 'slightInaccuracies' && /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').map((row, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: row.Line.replace(/\\*/g, ' ')\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Filtered Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(filteredData, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 603,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"RXMLllYWM/Eab8NraMNiUV5kbfQ=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","logo","logoWhite","jsxDEV","_jsxDEV","Fragment","_Fragment","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","thePgnList","setThePgnList","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","activeDropdown","setActiveDropdown","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","readAsText","handleStart","processGames","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","forEach","index","loadPgn","deleteComments","moves","history","push","valList","triangle","String","pgn","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","filteredDF","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","Math","ceil","filteredLongDFUnsorted","filteredByProbabilityDF","uniqueLinesStr","nonSubsetLongDF","includes","groupedByLine","isNaN","Infinity","GameIDs","max","Object","values","NaN","groupedLongDF","sortedLongDF","sort","a","b","LineProbability","categorizedLines","categorizeLines","findCommonLines","evaluateAndAnnotateGames","evaluatePosition","fen","Promise","resolve","onmessage","line","data","depthMatch","match","evalMatch","depth","parseInt","toFixed","minimalGroupedDF","evaluatedGames","maxPly","uniqueGameIDs","Set","gameID","chess2","load","preserveHeaders","move","origevaluation","parseFloat","setComment","processEvaluatedGames","evaluatedPGNs","commentsWithFens","getComments","comments","item","comment","evalColumn","MistakeType","slice","join","sortedLines","entries","toggleDropdown","dropdown","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","htmlFor","id","value","onClick","count","replace","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n    const [processing, setProcessing] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(null);\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n\n    const handleStart = () => {\n        setProcessing(true);\n        const games = importedGames;\n        processGames(games);\n    };\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            chess.deleteComments();\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n\n        // Filter for lines with probability greater than 0.2\n        const filteredByProbabilityDF = filteredLongDFUnsorted.filter(row => row.LineProbabilityW >= 0.2 || row.LineProbabilityB >= 0.2);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n            if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n                return false;\n            } else {\n                uniqueLinesStr += row.Line + \"//\";\n                return true;\n            }\n        });\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameID: row.GameID,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n\n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n\n        evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n    };\n\n    const evaluatePosition = (fen) => {\n        return new Promise((resolve) => {\n            stockfish.postMessage(`position fen ${fen}`);\n            stockfish.postMessage(\"go depth 16\");\n\n            stockfish.onmessage = (event) => {\n                const line = event.data;\n                const depthMatch = line.match(/depth (\\d+)/);\n                const evalMatch = line.match(/score cp (-?\\d+)/);\n\n                if (depthMatch && evalMatch) {\n                    const depth = parseInt(depthMatch[1], 10);\n                    if (depth === 15) {\n                        const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n                        resolve(evaluation);\n                    }\n                }\n            };\n        });\n    };\n\n    const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n        const chess = new Chess();\n        const evaluatedGames = [];\n        const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n\n        const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n        for (let gameID = 0; gameID < pgnList.length; gameID++) {\n            if (uniqueGameIDs.includes(gameID)) {\n                const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n                chess.loadPgn(pgn);\n                const chess2 = new Chess();\n                chess2.loadPgn(pgn);\n                chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", { preserveHeaders: true });\n                const moves = chess.history();\n\n                for (let i = 0; i < maxPly && i < moves.length; i++) {\n                    chess2.move(moves[i]);\n                    const fen = chess2.fen();\n                    const origevaluation = await evaluatePosition(fen);\n                    const evaluation = i % 2 === 0 ? String(parseFloat(origevaluation) * (-1)) : String(parseFloat(origevaluation));\n\n                    chess2.setComment(evaluation);\n                }\n\n                evaluatedGames.push(chess2.pgn());\n            } else {\n                evaluatedGames.push(pgnList[gameID]);\n            }\n        }\n\n        processEvaluatedGames(evaluatedGames, maxPly);\n    };\n\n    const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n        chess.loadPgn(evaluatedPGNs[0]);\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n            const commentsWithFens = chess.getComments();\n            const comments = commentsWithFens.map(item => item.comment);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n            valList.push(parseFloat(comments[0]));\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < maxPly && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n                valList.push(parseFloat(comments[i]));\n            }\n            fullValList.push(valList);\n        });\n\n        for (let j = 1; j <= maxPly; j++) {\n            initialColnames.push(\"Line\" + String(j));\n            initialColnames.push(\"EVAL\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < maxPly; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= maxPly; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= maxPly; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n\n        // Filter for lines with probability greater than 0.2\n        const filteredByProbabilityDF = filteredLongDFUnsorted.filter(row => row.LineProbabilityW >= 0.2 || row.LineProbabilityB >= 0.2);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = filteredByProbabilityDF.filter(row => {\n            if (uniqueLinesStr.includes(\"//\" + row.Line + \"//\")) {\n                return false;\n            } else {\n                uniqueLinesStr += row.Line + \"//\";\n                return true;\n            }\n        });\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameID: row.GameID,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n\n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n        setProcessing(false); // Stop processing\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = \"EVAL\";\n            const evaluation = row[evalColumn];\n\n            if (evaluation >= 2.5) {\n                row.MistakeType = \"Fatal Blunder\";\n            } else if (evaluation >= 1.0) {\n                row.MistakeType = \"Major Mistake\";\n            } else if (evaluation >= 0.6) {\n                row.MistakeType = \"Slight Inaccuracy\";\n            } else {\n                row.MistakeType = \"None\";\n            }\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    const toggleDropdown = (dropdown) => {\n        setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/our-team\">Our Team</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <section className=\"hero3\">\n                    <h1 className=\"title\">Blunder Punisher</h1>\n                    <div className=\"form-container\">\n                        <input type=\"file\" onChange={handleFileSelect} />\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentName\">Opponent Name:</label>\n                            <input \n                                type=\"text\" \n                                id=\"opponentName\" \n                                value={opponentName} \n                                onChange={(e) => setOpponentName(e.target.value)} \n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"opponentColor\">Opponent Color:</label>\n                            <select \n                                id=\"opponentColor\" \n                                value={opponentColor} \n                                onChange={(e) => setOpponentColor(e.target.value)}\n                            >\n                                <option value=\"White\">White</option>\n                                <option value=\"Black\">Black</option>\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"precisionLevel\">Precision Level:</label>\n                            <select \n                                id=\"precisionLevel\" \n                                value={precisionLevel} \n                                onChange={(e) => setPrecisionLevel(e.target.value)}\n                            >\n                                <option value=\"Amateur/SemiPro\">Amateur/SemiPro (5s-1min)</option>\n                                <option value=\"Professional\">Professional (1min-10min)</option>\n                                <option value=\"GM\">GM (1min-30min)</option>\n                            </select>\n                        </div>\n                        <button onClick={handleStart}>Start</button>\n                        {processing && <p>Please wait, do not refresh or close the tab...</p>}\n                    </div>\n                    <p>Number of games in the file: {gamesCount}</p>\n                    <div className=\"common-lines\">\n                        {processing ? (\n                            <>\n                                <h2>Most Common Lines</h2>\n                                <ul>\n                                    {commonLines.map(([line, count], index) => (\n                                        <li key={index}>{line} - {count}</li>\n                                    ))}\n                                </ul>\n                            </>\n                        ) : (\n                            <>\n                                <div className=\"dropdown\">\n                                    <div className=\"dropdown-header\" onClick={() => toggleDropdown('fatalBlunders')}>\n                                        Fatal Blunders: {filteredData.filter(row => row.MistakeType === 'Fatal Blunder').length}\n                                    </div>\n                                    {activeDropdown === 'fatalBlunders' && (\n                                        <ul>\n                                            {filteredData.filter(row => row.MistakeType === 'Fatal Blunder').map((row, index) => (\n                                                <li key={index}>{row.Line.replace(/\\*/g, ' ')}</li>\n                                            ))}\n                                        </ul>\n                                    )}\n                                </div>\n                                <div className=\"dropdown\">\n                                    <div className=\"dropdown-header\" onClick={() => toggleDropdown('majorMistakes')}>\n                                        Major Mistakes: {filteredData.filter(row => row.MistakeType === 'Major Mistake').length}\n                                    </div>\n                                    {activeDropdown === 'majorMistakes' && (\n                                        <ul>\n                                            {filteredData.filter(row => row.MistakeType === 'Major Mistake').map((row, index) => (\n                                                <li key={index}>{row.Line.replace(/\\*/g, ' ')}</li>\n                                            ))}\n                                        </ul>\n                                    )}\n                                </div>\n                                <div className=\"dropdown\">\n                                    <div className=\"dropdown-header\" onClick={() => toggleDropdown('slightInaccuracies')}>\n                                        Slight Inaccuracies: {filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').length}\n                                    </div>\n                                    {activeDropdown === 'slightInaccuracies' && (\n                                        <ul>\n                                            {filteredData.filter(row => row.MistakeType === 'Slight Inaccuracy').map((row, index) => (\n                                                <li key={index}>{row.Line.replace(/\\*/g, ' ')}</li>\n                                            ))}\n                                        </ul>\n                                    )}\n                                </div>\n                            </>\n                        )}\n                        <h2>Filtered Data</h2>\n                        <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                    </div>\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}