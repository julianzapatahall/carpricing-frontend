{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [thePgnList, setThePgnList] = useState([]);\n  const [evaluation, setEvaluation] = useState(\"\");\n  const [bestLine, setBestLine] = useState(\"\");\n  const [previousOutput, setPreviousOutput] = useState(\"\");\n  const [isLogoHovered, setIsLogoHovered] = useState(false);\n  const [opponentName, setOpponentName] = useState('');\n  const [opponentColor, setOpponentColor] = useState('White');\n  const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n  const [processing, setProcessing] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState(null);\n  const [inputMethod, setInputMethod] = useState('chesscom'); // Default to pgn\n  const [filter, setFilter] = useState(''); // To track which filter button is selected\n  const [gamesLoaded, setGamesLoaded] = useState(false); // To track if games are loaded\n  const [totalGames, setTotalGames] = useState(0);\n  const [bulletCount, setBulletCount] = useState(0);\n  const [blitzCount, setBlitzCount] = useState(0);\n  const [rapidCount, setRapidCount] = useState(0);\n  const [oldestGame, setOldestGame] = useState('');\n  const [newestGame, setNewestGame] = useState('');\n  const [winLossRecord, setWinLossRecord] = useState('');\n  const [highestRatedWin, setHighestRatedWin] = useState('');\n  const [lowestRatedLoss, setLowestRatedLoss] = useState('');\n  const [gameLengthData, setGameLengthData] = useState([]);\n  let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n  stockfish.postMessage(\"uci\");\n  useEffect(() => {}, [thePgnList]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n    };\n    reader.readAsText(file);\n  };\n  const fetchLichessGames = async username => {\n    const response = await fetch(`https://lichess.org/api/games/user/${username}?max=1000&moves=true&pgnInJson=false`);\n    const data = await response.text(); // Get the response as text (PGN format)\n    return data;\n  };\n  const handleStart = async () => {\n    setProcessing(true);\n    let games = [];\n    if (inputMethod === 'lichess') {\n      const data = await fetchLichessGames(opponentName);\n      let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n      games = rawGames.map(game => '[Event' + game.trim());\n    } else if (inputMethod === 'chesscom') {\n      const data = await fetchChessComGames(opponentName);\n      games = data.map(game => game.pgn);\n    } else {\n      games = importedGames;\n    }\n    processGames(games);\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const pgnList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      chess.deleteComments();\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      pgnList.push(chess.pgn());\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      Pgn: pgnList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    console.log(\"filteredDF\");\n    console.log(filteredDF);\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n    console.log(\"filteredLongDFUnsorted\");\n    console.log(filteredLongDFUnsorted);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const sortedByLengthDF = filteredLongDFUnsorted.sort((a, b) => b.Line.length - a.Line.length);\n    console.log(\"sortedByLengthDF\");\n    console.log(sortedByLengthDF);\n\n    // Initialize a set to store lines that are not proper subsets\n    let uniqueLinesStr = \"//\";\n\n    // Filter out rows where Line is a proper subset of any other row\n    const nonSubsetLongDF = sortedByLengthDF.filter(row => {\n      if (uniqueLinesStr.includes(\"//\" + row.Line)) {\n        uniqueLinesStr += row.Line;\n        uniqueLinesStr += \"//\";\n        return false;\n      } else {\n        uniqueLinesStr += row.Line;\n        uniqueLinesStr += \"//\";\n        return true;\n      }\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameID: row.GameID,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n  };\n  const evaluatePosition = fen => {\n    return new Promise(resolve => {\n      stockfish.postMessage(`position fen ${fen}`);\n      stockfish.postMessage(\"go depth 16\");\n      stockfish.onmessage = event => {\n        const line = event.data;\n        const depthMatch = line.match(/depth (\\d+)/);\n        const evalMatch = line.match(/score cp (-?\\d+)/);\n        if (depthMatch && evalMatch) {\n          const depth = parseInt(depthMatch[1], 10);\n          if (depth === 15) {\n            const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n            resolve(evaluation);\n          }\n        }\n      };\n    });\n  };\n  const createPgnFromGameIDs = (gameIDs, pgnList) => {\n    return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n  };\n  const handleLineClick = gameIDs => {\n    const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n\n    // Store the combined PGN in localStorage\n    localStorage.setItem('combinedPgn', combinedPgn);\n\n    // Clear imported games\n    localStorage.removeItem('importedGames');\n\n    // Redirect to analysis board\n    window.location.href = '/analysis-board';\n  };\n  const fetchChessComGames = async (username, maxGames = 1000) => {\n    const fetchGamesBatch = async archiveUrl => {\n      try {\n        const response = await fetch(archiveUrl);\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n        }\n        const data = await response.json();\n        return data.games;\n      } catch (error) {\n        console.error('Error fetching games batch:', error.message);\n        return []; // Return an empty array if there's an error\n      }\n    };\n    try {\n      // Fetch the archives (list of months)\n      const archivesResponse = await fetch(`https://api.chess.com/pub/player/${username}/games/archives`);\n      if (!archivesResponse.ok) {\n        const errorText = await archivesResponse.text();\n        throw new Error(`Error fetching archives: ${archivesResponse.statusText} - ${errorText}`);\n      }\n      const archivesData = await archivesResponse.json();\n      const archives = archivesData.archives.reverse(); // Reverse to start from the most recent\n\n      const results = [];\n      for (let archiveUrl of archives) {\n        if (results.length >= maxGames) break;\n        const games = await fetchGamesBatch(archiveUrl);\n        results.push(...games);\n        if (results.length >= maxGames) {\n          results.length = maxGames; // Trim to the maxGames limit\n          break;\n        }\n      }\n      return results;\n    } catch (error) {\n      console.error('Error fetching games from Chess.com:', error.message);\n      throw error;\n    }\n  };\n  const handleStartBlunderPunisher = () => {\n    // Logic to start the BlunderPunisher process\n  };\n  const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n    const chess = new Chess();\n    const evaluatedGames = [];\n    const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n    console.log(\"maxPly\");\n    console.log(maxPly);\n    const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n    console.log(uniqueGameIDs);\n    for (let gameID = 0; gameID < pgnList.length; gameID++) {\n      if (uniqueGameIDs.includes(gameID)) {\n        const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n        chess.loadPgn(pgn);\n        const chess2 = new Chess();\n        chess2.loadPgn(pgn);\n        chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", {\n          preserveHeaders: true\n        });\n        const moves = chess.history();\n        for (let i = 0; i < maxPly && i < moves.length; i++) {\n          chess2.move(moves[i]);\n          const fen = chess2.fen();\n          const origevaluation = await evaluatePosition(fen);\n          const evaluation = i % 2 == 0 ? String(parseFloat(origevaluation) * -1) : String(parseFloat(origevaluation));\n          chess2.setComment(evaluation);\n        }\n        evaluatedGames.push(chess2.pgn());\n      } else {\n        evaluatedGames.push(pgnList[gameID]);\n      }\n    }\n    processEvaluatedGames(evaluatedGames, maxPly);\n  };\n  const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    chess.loadPgn(evaluatedPGNs[0]);\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const commentsWithFens = chess.getComments();\n      const comments = commentsWithFens.map(item => item.comment);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      valList.push(parseFloat(comments[0]));\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < maxPly && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n        valList.push(parseFloat(comments[i]));\n      }\n      fullValList.push(valList);\n    });\n    console.log(\"fullValList\");\n    console.log(fullValList);\n    for (let j = 1; j <= maxPly; j++) {\n      initialColnames.push(\"Line\" + String(j));\n      initialColnames.push(\"EVAL\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    console.log(\"dataFrame\");\n    console.log(dataFrame);\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < maxPly; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= maxPly; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= maxPly; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`],\n          Pgn: row.Pgn\n        });\n      }\n    });\n    console.log(\"longDF\");\n    console.log(longDF);\n\n    // Add #Games column\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n\n    // Calculate lower limit based on precision level\n    let minGames = 1; // Default for GM\n    if (precisionLevel === 'Amateur/SemiPro') {\n      minGames = Math.ceil(totalGames / 10);\n    } else if (precisionLevel === 'Professional') {\n      minGames = Math.ceil(totalGames / 35);\n    }\n    console.log(\"minGames\");\n    console.log(minGames);\n\n    // Filter for lines with more than minGames played\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n    console.log(\"filteredLongDFUnsorted\");\n    console.log(filteredLongDFUnsorted);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    console.log(\"filteredLongDF\");\n    console.log(filteredLongDF);\n    const groupedByLine = filteredLongDF.reduce((acc, row) => {\n      if (!acc[row.Line]) {\n        acc[row.Line] = {\n          Line: row.Line,\n          EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n          Ply: row.Ply,\n          WhiteResult: row.WhiteResult,\n          LineProbabilityB: row.LineProbabilityB,\n          LineProbabilityW: row.LineProbabilityW,\n          GameIDs: [row.GameID]\n        };\n      } else {\n        acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n        acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n        acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n        acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n        acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n        acc[row.Line].GameIDs.push(row.GameID);\n      }\n      return acc;\n    }, {});\n\n    // Replace -Infinity back with NaN if no valid EVAL was found\n    Object.values(groupedByLine).forEach(row => {\n      if (row.EVAL === -Infinity) {\n        row.EVAL = NaN;\n      }\n    });\n    console.log(\"groupedByLine\");\n    console.log(groupedByLine);\n\n    // Convert groupedByLine to an array and sort\n    const groupedLongDF = Object.values(groupedByLine);\n    const sortedLongDF = groupedLongDF.sort((a, b) => {\n      if (opponentColor === \"Black\") {\n        return b.EVAL - a.EVAL;\n      } else {\n        return a.EVAL - b.EVAL;\n      }\n    });\n\n    // Consolidate LineProbability and drop irrelevant columns\n    sortedLongDF.forEach(row => {\n      if (opponentColor === \"Black\") {\n        row.LineProbability = row.LineProbabilityB;\n        delete row.LineProbabilityW;\n        delete row.LineProbabilityB;\n      } else {\n        row.LineProbability = row.LineProbabilityW;\n        delete row.LineProbabilityB;\n        delete row.LineProbabilityW;\n      }\n    });\n    console.log(\"sortedLongDF\");\n    console.log(sortedLongDF);\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n    console.log(definedDF);\n    let fullLinesStr = \"//\";\n    let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n      const subsets = [];\n      const lineMoves = row.Line.split(\"*\").filter(Boolean);\n\n      // SUBSET CHECK\n      // Check if value already in partialLinesStr\n      if (partialLinesStr.includes(\"//\" + row.Line + \"//\")) {\n        return false;\n      }\n\n      // SUPERSET CHECK\n      // Check if any subset is already in fullLinesStr\n\n      // Generate all possible subsets of the current line\n      for (let i = 1; i <= lineMoves.length; i++) {\n        const subset = lineMoves.slice(0, i).join(\"*\") + \"*\";\n        if (fullLinesStr.includes(\"//\" + subset + \"//\")) {\n          return false;\n        }\n        partialLinesStr += subset + \"//\";\n      }\n      ;\n      fullLinesStr += row.Line + \"//\";\n      return true;\n    });\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    const categorizedLines = categorizeLines(nonSubsetLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n    setProcessing(false); // Stop processing\n  };\n  const loadAllGames = () => {\n    // Logic to load all games\n  };\n  const loadLast1000Games = () => {\n    // Logic to load last 1000 games\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = \"EVAL\";\n      const evaluation = row[evalColumn];\n      if (opponentColor === \"Black\") {\n        if (evaluation >= 2) {\n          row.MistakeType = \"Fatal Blunder\";\n        } else if (evaluation >= 1.0) {\n          row.MistakeType = \"Major Mistake\";\n        } else if (evaluation >= 0.6) {\n          row.MistakeType = \"Slight Inaccuracy\";\n        } else {\n          row.MistakeType = \"None\";\n        }\n      } else {\n        if (evaluation <= -2) {\n          row.MistakeType = \"Fatal Blunder\";\n        } else if (evaluation <= -1.0) {\n          row.MistakeType = \"Major Mistake\";\n        } else if (evaluation <= -0.6) {\n          row.MistakeType = \"Slight Inaccuracy\";\n        } else {\n          row.MistakeType = \"None\";\n        }\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const handleFilterClick = selectedFilter => {\n    setFilter(selectedFilter);\n  };\n  const handleLoadGames = () => {\n    if (filter === 'all') {\n      loadAllGames(); // Implement this function\n    } else if (filter === 'last1000') {\n      loadLast1000Games(); // Implement this function\n    }\n    setGamesLoaded(true);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  const toggleDropdown = dropdown => {\n    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n  };\n  const formatMovesWithNumbers = line => {\n    const moves = line.Line.split(\"*\").filter(Boolean);\n    return moves.map((move, index) => {\n      const moveNumber = Math.floor(index / 2) + 1;\n      return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n    }).join(\" \");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onMouseEnter: () => setIsLogoHovered(true),\n            onMouseLeave: () => setIsLogoHovered(false),\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: isLogoHovered ? logoWhite : logo,\n                alt: \"Home\",\n                style: {\n                  height: '40px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              className: \"prepare-link\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 833,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/weakness-finder\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/about-magnus\",\n              children: \"About Magnus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"hero3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Blunder Punisher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-load-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `filter-button ${filter === 'all' ? 'selected' : ''}`,\n            onClick: () => handleFilterClick('all'),\n            children: [\"All Games \", filter === 'all' && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2714\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 850,\n              columnNumber: 44\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `filter-button ${filter === 'last1000' ? 'selected' : ''}`,\n            onClick: () => handleFilterClick('last1000'),\n            children: [\"Last 1000 Games \", filter === 'last1000' && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2714\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 55\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLoadGames,\n            children: \"Load Games\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 858,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 9\n        }, this), gamesLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Games: \", totalGames]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 863,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Bullet: \", bulletCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Blitz: \", blitzCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Rapid: \", rapidCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Oldest Game: \", oldestGame]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Newest Game: \", newestGame]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 3\n        }, this), gamesLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"start-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStartBlunderPunisher,\n            children: \"Start BlunderPunisher\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-stats-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Win-Loss Record: \", winLossRecord]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Highest Rated Win: \", highestRatedWin]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 880,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Lowest Rated Loss: \", lowestRatedLoss]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 881,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(Histogram, {\n            data: gameLengthData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 SquareChess.org All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 823,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"egT6ya8Q8PKDpLTW/Fv6xeFiTMU=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","logo","logoWhite","jsxDEV","_jsxDEV","STOCKFISH","window","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","thePgnList","setThePgnList","evaluation","setEvaluation","bestLine","setBestLine","previousOutput","setPreviousOutput","isLogoHovered","setIsLogoHovered","opponentName","setOpponentName","opponentColor","setOpponentColor","precisionLevel","setPrecisionLevel","processing","setProcessing","activeDropdown","setActiveDropdown","inputMethod","setInputMethod","filter","setFilter","gamesLoaded","setGamesLoaded","totalGames","setTotalGames","bulletCount","setBulletCount","blitzCount","setBlitzCount","rapidCount","setRapidCount","oldestGame","setOldestGame","newestGame","setNewestGame","winLossRecord","setWinLossRecord","highestRatedWin","setHighestRatedWin","lowestRatedLoss","setLowestRatedLoss","gameLengthData","setGameLengthData","stockfish","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","Boolean","games","map","game","trim","length","readAsText","fetchLichessGames","username","response","fetch","data","text","handleStart","fetchChessComGames","pgn","processGames","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","pgnList","chess","forEach","index","loadPgn","deleteComments","moves","history","push","valList","triangle","String","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","Pgn","GameID","console","log","filteredDF","moveProb1","Line1","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","minGames","Math","ceil","filteredLongDFUnsorted","undefined","filteredLongDF","sort","a","b","sortedByLengthDF","uniqueLinesStr","nonSubsetLongDF","includes","groupedByLine","isNaN","Infinity","GameIDs","max","Object","values","NaN","groupedLongDF","sortedLongDF","LineProbability","categorizedLines","categorizeLines","findCommonLines","evaluateAndAnnotateGames","evaluatePosition","fen","Promise","resolve","onmessage","line","depthMatch","match","evalMatch","depth","parseInt","toFixed","createPgnFromGameIDs","gameIDs","id","join","handleLineClick","combinedPgn","localStorage","setItem","removeItem","location","href","maxGames","fetchGamesBatch","archiveUrl","ok","errorText","Error","statusText","json","error","message","archivesResponse","archivesData","archives","reverse","results","handleStartBlunderPunisher","minimalGroupedDF","evaluatedGames","maxPly","uniqueGameIDs","Set","gameID","chess2","load","preserveHeaders","move","origevaluation","parseFloat","setComment","processEvaluatedGames","evaluatedPGNs","commentsWithFens","getComments","comments","item","comment","definedDF","fullLinesStr","partialLinesStr","subsets","lineMoves","subset","slice","loadAllGames","loadLast1000Games","evalColumn","MistakeType","handleFilterClick","selectedFilter","handleLoadGames","sortedLines","entries","toggleDropdown","dropdown","formatMovesWithNumbers","moveNumber","floor","className","children","onMouseEnter","onMouseLeave","to","src","alt","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Histogram","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\n// Import both logo images\nimport logo from './squarechesslogolong.png'; // Adjust the path as needed\nimport logoWhite from './squarechesslogolongwhite.png'; // Adjust the path as needed\n\nconst STOCKFISH = window.STOCKFISH;\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [thePgnList, setThePgnList] = useState([]);\n    const [evaluation, setEvaluation] = useState(\"\");\n    const [bestLine, setBestLine] = useState(\"\");\n    const [previousOutput, setPreviousOutput] = useState(\"\");\n    const [isLogoHovered, setIsLogoHovered] = useState(false);\n    const [opponentName, setOpponentName] = useState('');\n    const [opponentColor, setOpponentColor] = useState('White');\n    const [precisionLevel, setPrecisionLevel] = useState('Amateur/SemiPro');\n    const [processing, setProcessing] = useState(false);\n    const [activeDropdown, setActiveDropdown] = useState(null);\n    const [inputMethod, setInputMethod] = useState('chesscom'); // Default to pgn\n    const [filter, setFilter] = useState(''); // To track which filter button is selected\n    const [gamesLoaded, setGamesLoaded] = useState(false); // To track if games are loaded\n    const [totalGames, setTotalGames] = useState(0);\n    const [bulletCount, setBulletCount] = useState(0);\n    const [blitzCount, setBlitzCount] = useState(0);\n    const [rapidCount, setRapidCount] = useState(0);\n    const [oldestGame, setOldestGame] = useState('');\n    const [newestGame, setNewestGame] = useState('');\n    const [winLossRecord, setWinLossRecord] = useState('');\n    const [highestRatedWin, setHighestRatedWin] = useState('');\n    const [lowestRatedLoss, setLowestRatedLoss] = useState('');\n    const [gameLengthData, setGameLengthData] = useState([]);\n\n    let stockfish = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(\"stockfish.js\");\n    stockfish.postMessage(\"uci\");\n\n    useEffect(() => {}, [thePgnList]);\n    \n    \n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n        };\n        reader.readAsText(file);\n    };\n\n    \n    \n    const fetchLichessGames = async (username) => {\n        const response = await fetch(`https://lichess.org/api/games/user/${username}?max=1000&moves=true&pgnInJson=false`);\n        const data = await response.text(); // Get the response as text (PGN format)\n        return data;\n    };\n    \n\n    const handleStart = async () => {\n        setProcessing(true);\n        let games = [];\n    \n        if (inputMethod === 'lichess') {\n            const data = await fetchLichessGames(opponentName);\n            let rawGames = data.split(/\\[Event/gi).filter(Boolean);\n            games = rawGames.map(game => '[Event' + game.trim());\n        } else if (inputMethod === 'chesscom') {\n            const data = await fetchChessComGames(opponentName);\n            games = data.map(game => game.pgn);\n        } else{\n            games = importedGames;\n        }\n    \n        processGames(games);\n    };\n\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const pgnList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            chess.deleteComments();\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            pgnList.push(chess.pgn());\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        setThePgnList(pgnList); // Set the pgnList to the state variable thePgnList\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            Pgn: pgnList[index],\n            GameID: index\n        }));\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n        console.log(\"filteredDF\");\n        console.log(filteredDF);\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n        console.log(\"minGames\");\n        console.log(minGames);\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row.Line !== undefined && row['#Games'] > minGames);\n        console.log(\"filteredLongDFUnsorted\");\n        console.log(filteredLongDFUnsorted);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const sortedByLengthDF = filteredLongDFUnsorted.sort((a, b) => b.Line.length - a.Line.length);\n        console.log(\"sortedByLengthDF\");\n        console.log(sortedByLengthDF);\n\n        // Initialize a set to store lines that are not proper subsets\n        let uniqueLinesStr = \"//\";\n\n        // Filter out rows where Line is a proper subset of any other row\n        const nonSubsetLongDF = sortedByLengthDF.filter(row => {\n            if(uniqueLinesStr.includes( \"//\"+row.Line)){\n                uniqueLinesStr += row.Line;\n                uniqueLinesStr += \"//\";\n                return false;}\n            else{\n                uniqueLinesStr += row.Line;\n                uniqueLinesStr += \"//\";\n                return true;\n            }\n        });\n\n        console.log(\"nonSubsetLongDF\");\n        console.log(nonSubsetLongDF);\n\n        const groupedByLine = nonSubsetLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameID: row.GameID,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameID = Math.max(acc[row.Line].GameID, row.GameID);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n        \n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n        \n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n        \n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n        const categorizedLines = categorizeLines(sortedLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n\n        evaluateAndAnnotateGames(sortedLongDF, pgnList); // Pass pgnList as an argument\n    };\n\n    const evaluatePosition = (fen) => {\n        return new Promise((resolve) => {\n            stockfish.postMessage(`position fen ${fen}`);\n            stockfish.postMessage(\"go depth 16\");\n\n            stockfish.onmessage = (event) => {\n                const line = event.data;\n                const depthMatch = line.match(/depth (\\d+)/);\n                const evalMatch = line.match(/score cp (-?\\d+)/);\n\n                if (depthMatch && evalMatch) {\n                    const depth = parseInt(depthMatch[1], 10);\n                    if (depth === 15) {\n                        const evaluation = (parseInt(evalMatch[1], 10) / 100).toFixed(2);\n                        resolve(evaluation);\n                    }\n                }\n            };\n        });\n    };\n    const createPgnFromGameIDs = (gameIDs, pgnList) => {\n        return gameIDs.map(id => pgnList[id]).join('\\n\\n');\n    };\n    \n    const handleLineClick = (gameIDs) => {\n        const combinedPgn = createPgnFromGameIDs(gameIDs, thePgnList);\n    \n        // Store the combined PGN in localStorage\n        localStorage.setItem('combinedPgn', combinedPgn);\n    \n        // Clear imported games\n        localStorage.removeItem('importedGames');\n    \n        // Redirect to analysis board\n        window.location.href = '/analysis-board';\n    };\n    \n    const fetchChessComGames = async (username, maxGames = 1000) => {\n        const fetchGamesBatch = async (archiveUrl) => {\n            try {\n                const response = await fetch(archiveUrl);\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`Error fetching data: ${response.statusText} - ${errorText}`);\n                }\n    \n                const data = await response.json();\n                return data.games;\n            } catch (error) {\n                console.error('Error fetching games batch:', error.message);\n                return []; // Return an empty array if there's an error\n            }\n        };\n    \n        try {\n            // Fetch the archives (list of months)\n            const archivesResponse = await fetch(`https://api.chess.com/pub/player/${username}/games/archives`);\n            if (!archivesResponse.ok) {\n                const errorText = await archivesResponse.text();\n                throw new Error(`Error fetching archives: ${archivesResponse.statusText} - ${errorText}`);\n            }\n            const archivesData = await archivesResponse.json();\n            const archives = archivesData.archives.reverse(); // Reverse to start from the most recent\n    \n            const results = [];\n            for (let archiveUrl of archives) {\n                if (results.length >= maxGames) break;\n    \n                const games = await fetchGamesBatch(archiveUrl);\n                results.push(...games);\n    \n                if (results.length >= maxGames) {\n                    results.length = maxGames; // Trim to the maxGames limit\n                    break;\n                }\n            }\n    \n            return results;\n        } catch (error) {\n            console.error('Error fetching games from Chess.com:', error.message);\n            throw error;\n        }\n    };\n    \n    \n    \n    const handleStartBlunderPunisher = () => {\n        // Logic to start the BlunderPunisher process\n      };\n      \n\n    const evaluateAndAnnotateGames = async (minimalGroupedDF, pgnList) => {\n        const chess = new Chess();\n        const evaluatedGames = [];\n        const maxPly = Math.max(...minimalGroupedDF.map(row => row.Ply));\n        console.log(\"maxPly\");\n        console.log(maxPly);\n\n        const uniqueGameIDs = [...new Set(minimalGroupedDF.map(row => row.GameID))];\n        console.log(uniqueGameIDs);\n        for (let gameID = 0; gameID < pgnList.length; gameID++) {\n            if (uniqueGameIDs.includes(gameID)) {\n                const pgn = pgnList[gameID]; // Assuming all rows for the same game have the same PGN\n                chess.loadPgn(pgn);\n                const chess2 = new Chess();\n                chess2.loadPgn(pgn);\n                chess2.load(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", { preserveHeaders: true });\n                const moves = chess.history();\n\n                for (let i = 0; i < maxPly && i < moves.length; i++) {\n                    chess2.move(moves[i]);\n                    const fen = chess2.fen();\n                    const origevaluation = await evaluatePosition(fen);\n                    const evaluation = i%2==0?String(parseFloat(origevaluation)*(-1)):String(parseFloat(origevaluation));\n\n                    chess2.setComment(evaluation);\n                }\n\n                evaluatedGames.push(chess2.pgn());\n            } else {\n                evaluatedGames.push(pgnList[gameID]);\n            }\n        }\n\n        processEvaluatedGames(evaluatedGames, maxPly);\n    };\n\n    const processEvaluatedGames = (evaluatedPGNs, maxPly) => {\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n        chess.loadPgn(evaluatedPGNs[0]);\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n            const commentsWithFens = chess.getComments();\n            const comments = commentsWithFens.map(item => item.comment);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n            valList.push(parseFloat(comments[0]));\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < maxPly && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n                valList.push(parseFloat(comments[i]));\n            }\n            fullValList.push(valList);\n        });\n        console.log(\"fullValList\");\n        console.log(fullValList);\n\n        for (let j = 1; j <= maxPly; j++) {\n            initialColnames.push(\"Line\" + String(j));\n            initialColnames.push(\"EVAL\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        console.log(\"dataFrame\");\n        console.log(dataFrame);\n\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < maxPly; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= maxPly; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= maxPly; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`],\n                    Pgn: row.Pgn\n                });\n            }\n        });\n\n        console.log(\"longDF\");\n        console.log(longDF);\n\n        // Add #Games column\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        // Calculate lower limit based on precision level\n        let minGames = 1; // Default for GM\n        if (precisionLevel === 'Amateur/SemiPro') {\n            minGames = Math.ceil(totalGames / 10);\n        } else if (precisionLevel === 'Professional') {\n            minGames = Math.ceil(totalGames / 35);\n        }\n        console.log(\"minGames\");\n        console.log(minGames);\n\n        // Filter for lines with more than minGames played\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > minGames);\n        console.log(\"filteredLongDFUnsorted\");\n        console.log(filteredLongDFUnsorted);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n        console.log(\"filteredLongDF\");\n        console.log(filteredLongDF);\n\n        const groupedByLine = filteredLongDF.reduce((acc, row) => {\n            if (!acc[row.Line]) {\n                acc[row.Line] = {\n                    Line: row.Line,\n                    EVAL: !isNaN(row.EVAL) ? row.EVAL : -Infinity,\n                    Ply: row.Ply,\n                    WhiteResult: row.WhiteResult,\n                    LineProbabilityB: row.LineProbabilityB,\n                    LineProbabilityW: row.LineProbabilityW,\n                    GameIDs: [row.GameID]\n                };\n            } else {\n                acc[row.Line].EVAL = Math.max(acc[row.Line].EVAL, !isNaN(row.EVAL) ? row.EVAL : -Infinity);\n                acc[row.Line].Ply = Math.max(acc[row.Line].Ply, row.Ply);\n                acc[row.Line].WhiteResult = Math.max(acc[row.Line].WhiteResult, row.WhiteResult);\n                acc[row.Line].LineProbabilityB = Math.max(acc[row.Line].LineProbabilityB, row.LineProbabilityB);\n                acc[row.Line].LineProbabilityW = Math.max(acc[row.Line].LineProbabilityW, row.LineProbabilityW);\n                acc[row.Line].GameIDs.push(row.GameID);\n            }\n            return acc;\n        }, {});\n        \n        // Replace -Infinity back with NaN if no valid EVAL was found\n        Object.values(groupedByLine).forEach(row => {\n            if (row.EVAL === -Infinity) {\n                row.EVAL = NaN;\n            }\n        });\n        \n        console.log(\"groupedByLine\");\n        console.log(groupedByLine);\n\n        // Convert groupedByLine to an array and sort\n        const groupedLongDF = Object.values(groupedByLine);\n        const sortedLongDF = groupedLongDF.sort((a, b) => {\n            if (opponentColor === \"Black\") {\n                return b.EVAL - a.EVAL;\n            } else {\n                return a.EVAL - b.EVAL;\n            }\n        });\n\n        // Consolidate LineProbability and drop irrelevant columns\n        sortedLongDF.forEach(row => {\n            if (opponentColor === \"Black\") {\n                row.LineProbability = row.LineProbabilityB;\n                delete row.LineProbabilityW;\n                delete row.LineProbabilityB;\n            } else {\n                row.LineProbability = row.LineProbabilityW;\n                delete row.LineProbabilityB;\n                delete row.LineProbabilityW;\n            }\n        });\n\n        console.log(\"sortedLongDF\");\n        console.log(sortedLongDF);\n        \n\n    const definedDF = sortedLongDF.filter(row => row.Line !== undefined);\n    console.log(\"definedDF\");\n        console.log(definedDF);\n \n        let fullLinesStr = \"//\";\n        let partialLinesStr = \"//\";\n    const nonSubsetLongDF = definedDF.filter(row => {\n        const subsets = [];\n        const lineMoves = row.Line.split(\"*\").filter(Boolean);\n        \n// SUBSET CHECK\n        // Check if value already in partialLinesStr\n        if (partialLinesStr.includes(\"//\" + row.Line +\"//\")) {\n                return false;\n            }\n        \n\n\n        // SUPERSET CHECK\n        // Check if any subset is already in fullLinesStr\n\n        // Generate all possible subsets of the current line\n        for (let i = 1; i <= lineMoves.length; i++) {\n            const subset = lineMoves.slice(0, i).join(\"*\") + \"*\"; \n            if (fullLinesStr.includes(\"//\" + subset+ \"//\")) {\n                return false;\n            }\n            partialLinesStr += subset + \"//\";\n    };\n        fullLinesStr += row.Line+ \"//\";\n        return true;\n    });\n\n    console.log(\"nonSubsetLongDF\");\n    console.log(nonSubsetLongDF);\n    \n        const categorizedLines = categorizeLines(nonSubsetLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n        setProcessing(false); // Stop processing\n    };\n\n    const loadAllGames = () => {\n        // Logic to load all games\n      };\n      \n      const loadLast1000Games = () => {\n        // Logic to load last 1000 games\n      };\n      \n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = \"EVAL\";\n            const evaluation = row[evalColumn];\n    \n            if (opponentColor === \"Black\") {\n                if (evaluation >= 2) {\n                    row.MistakeType = \"Fatal Blunder\";\n                } else if (evaluation >= 1.0) {\n                    row.MistakeType = \"Major Mistake\";\n                } else if (evaluation >= 0.6) {\n                    row.MistakeType = \"Slight Inaccuracy\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            } else {\n                if (evaluation <= -2) {\n                    row.MistakeType = \"Fatal Blunder\";\n                } else if (evaluation <= -1.0) {\n                    row.MistakeType = \"Major Mistake\";\n                } else if (evaluation <= -0.6) {\n                    row.MistakeType = \"Slight Inaccuracy\";\n                } else {\n                    row.MistakeType = \"None\";\n                }\n            }\n            \n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n    const handleFilterClick = (selectedFilter) => {\n        setFilter(selectedFilter);\n      };\n      \n      const handleLoadGames = () => {\n        if (filter === 'all') {\n          loadAllGames(); // Implement this function\n        } else if (filter === 'last1000') {\n          loadLast1000Games(); // Implement this function\n        }\n        setGamesLoaded(true);\n      };\n      \n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    const toggleDropdown = (dropdown) => {\n        setActiveDropdown(activeDropdown === dropdown ? null : dropdown);\n    };\n    \n\n    const formatMovesWithNumbers = (line) => {\n        const moves = line.Line.split(\"*\").filter(Boolean);\n        return moves.map((move, index) => {\n            const moveNumber = Math.floor(index / 2) + 1;\n            return index % 2 === 0 ? `${moveNumber}. ${move}` : `${moveNumber}...${move}`;\n        }).join(\" \");\n    };\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li onMouseEnter={() => setIsLogoHovered(true)}\n                            onMouseLeave={() => setIsLogoHovered(false)}>\n                            <Link to=\"/\">\n                                <img src={isLogoHovered ? logoWhite : logo} alt=\"Home\" style={{ height: '40px' }} />\n                            </Link>\n                        </li>\n                        <li><Link to=\"/blunder-punisher\" className=\"prepare-link\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/weakness-finder\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"/about-magnus\">About Magnus</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n      <section className=\"hero3\">\n        <h1 className=\"title\">Blunder Punisher</h1>\n\n        {/* Section 1: Filter and Load Games */}\n        <div className=\"filter-load-section\">\n          <button \n            className={`filter-button ${filter === 'all' ? 'selected' : ''}`}\n            onClick={() => handleFilterClick('all')}\n          >\n            All Games {filter === 'all' && <span>✔️</span>}\n          </button>\n          <button \n            className={`filter-button ${filter === 'last1000' ? 'selected' : ''}`}\n            onClick={() => handleFilterClick('last1000')}\n          >\n            Last 1000 Games {filter === 'last1000' && <span>✔️</span>}\n          </button>\n          <button onClick={handleLoadGames}>Load Games</button>\n        </div>\n        {/* Section 2: Summary Stats #1 */}\n{gamesLoaded && (\n  <div className=\"summary-stats-1\">\n    <p>Total Games: {totalGames}</p>\n    <p>Bullet: {bulletCount}</p>\n    <p>Blitz: {blitzCount}</p>\n    <p>Rapid: {rapidCount}</p>\n    <p>Oldest Game: {oldestGame}</p>\n    <p>Newest Game: {newestGame}</p>\n  </div>\n)}\n{/* Section 3: Start BlunderPunisher */}\n{gamesLoaded && (\n  <div className=\"start-section\">\n    <button onClick={handleStartBlunderPunisher}>Start BlunderPunisher</button>\n  </div>\n)}\n{/* Section 4: Summary Stats #2 */}\n<div className=\"summary-stats-2\">\n  <p>Win-Loss Record: {winLossRecord}</p>\n  <p>Highest Rated Win: {highestRatedWin}</p>\n  <p>Lowest Rated Loss: {lowestRatedLoss}</p>\n  {/* Assuming you have a Histogram component */}\n  <Histogram data={gameLengthData} />\n</div>\n\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2024 SquareChess.org All rights reserved.</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}