{"ast":null,"code":"var _jsxFileName = \"/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlunderPunisher = () => {\n  _s();\n  const [importedGames, setImportedGames] = useState([]);\n  const [gamesCount, setGamesCount] = useState(0);\n  const [commonLines, setCommonLines] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [finalLongDF, setFinalLongDF] = useState([]);\n  const [stockfish, setStockfish] = useState(null);\n  useEffect(() => {\n    const initStockfish = () => {\n      const sf = new Worker('stockfish.js');\n      sf.postMessage('uci');\n      setStockfish(sf);\n    };\n    initStockfish();\n  }, []);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      const fullPgn = e.target.result;\n      let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n      let games = rawGames.map(game => '[Event' + game.trim());\n      setImportedGames(games);\n      setGamesCount(games.length);\n      processGames(games);\n    };\n    reader.readAsText(file);\n  };\n  const evaluatePGNsWithPython = async (pgnPaths, outputPath) => {\n    try {\n      const response = await axios.post('/api/evaluate-pgns', {\n        pgnPaths,\n        outputPath\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error evaluating PGNs with Python:\", error);\n      return null;\n    }\n  };\n  const processGames = games => {\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const fullValList = [];\n    const initialColnames = [];\n    const movesList = [];\n    const chess = new Chess();\n    games.forEach((game, index) => {\n      chess.loadPgn(game);\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    const opponentColor = 'Black';\n    const opponentName = 'julian8x8';\n    const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n    const moveProb1 = filteredDF.reduce((acc, row) => {\n      acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n      return acc;\n    }, {});\n    const totalGames = filteredDF.length;\n    filteredDF.forEach(row => {\n      row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n    });\n    for (let i = 1; i < 25; i++) {\n      filteredDF.forEach(row => {\n        row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n      });\n      const moveProb = filteredDF.reduce((acc, row) => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      const lineCount = filteredDF.reduce((acc, row) => {\n        acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n        return acc;\n      }, {});\n      filteredDF.forEach(row => {\n        const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n        row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n      });\n    }\n    filteredDF.forEach(row => {\n      let pw = 1;\n      let pb = 1;\n      for (let i = 1; i <= 25; i++) {\n        if (i % 2 === 1) {\n          pw *= row[`MoveProbability${i}`] || 1;\n        } else {\n          pb *= row[`MoveProbability${i}`] || 1;\n        }\n        row[`LineProbability(W)${i}`] = pw;\n        row[`LineProbability(B)${i}`] = pb;\n      }\n    });\n    const longDF = [];\n    filteredDF.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`]\n        });\n      }\n    });\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    let uniqueLines = \"//\";\n    const nonSubsetLongDF = filteredLongDF.filter(row => {\n      if (!row.Line) return false;\n      if (uniqueLines.includes(row.Line)) {\n        return false;\n      }\n      uniqueLines += row.Line;\n      uniqueLines += \"//\";\n      return true;\n    });\n    const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) => index === self.findIndex(r => r.Line === row.Line));\n    let finalLongDF;\n    if (opponentColor === \"Black\") {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n      });\n    } else {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n      });\n    }\n    setFinalLongDF(finalLongDF);\n    const uniqueGameIDs = [...new Set(finalLongDF.map(row => row.GameID))];\n    evaluatePGNs(uniqueGameIDs);\n  };\n  const evaluatePGNs = async uniqueGameIDs => {\n    const pgnPaths = uniqueGameIDs.map(id => `path/to/your/pgns/${id}.pgn`);\n    const outputPath = 'path/to/output/evaluated_games.pgn';\n    const evaluatedPGNs = await evaluatePGNsWithPython(pgnPaths, outputPath);\n    if (evaluatedPGNs) {\n      processEvaluatedGames(evaluatedPGNs);\n    }\n  };\n  const processEvaluatedGames = evaluatedPGNs => {\n    const chess = new Chess();\n    const movesList = [];\n    const fullValList = [];\n    const eventList = [];\n    const siteList = [];\n    const whiteList = [];\n    const blackList = [];\n    const resultList = [];\n    const dateList = [];\n    const whiteEloList = [];\n    const blackEloList = [];\n    const initialColnames = [];\n    evaluatedPGNs.forEach((pgn, index) => {\n      chess.loadPgn(pgn);\n      let moves = chess.history();\n      movesList.push(moves);\n      const valList = [];\n      let triangle = String(moves[0]) + \"*\";\n      valList.push(triangle);\n      eventList.push(chess.header()[\"Event\"]);\n      siteList.push(chess.header()[\"Site\"]);\n      whiteList.push(chess.header()[\"White\"]);\n      blackList.push(chess.header()[\"Black\"]);\n      resultList.push(chess.header()[\"Result\"]);\n      dateList.push(chess.header()[\"Date\"]);\n      whiteEloList.push(chess.header()[\"WhiteElo\"]);\n      blackEloList.push(chess.header()[\"BlackElo\"]);\n      for (let i = 1; i < 25 && i < moves.length; i++) {\n        triangle += String(moves[i]) + \"*\";\n        valList.push(triangle);\n      }\n      fullValList.push(valList);\n    });\n    for (let j = 1; j <= 25; j++) {\n      initialColnames.push(\"Line\" + String(j));\n    }\n    const dataFrame = fullValList.map((row, index) => ({\n      ...row.reduce((acc, val, i) => ({\n        ...acc,\n        [initialColnames[i]]: val\n      }), {}),\n      Event: eventList[index],\n      Site: siteList[index],\n      White: whiteList[index],\n      Black: blackList[index],\n      WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n      Date: dateList[index],\n      WhiteElo: whiteEloList[index],\n      BlackElo: blackEloList[index],\n      GameID: index\n    }));\n    const longDF = [];\n    dataFrame.forEach(row => {\n      for (let i = 1; i <= 25; i++) {\n        longDF.push({\n          GameID: row.GameID,\n          Ply: i,\n          Line: row[`Line${i}`],\n          EVAL: row[`EVAL${i}`],\n          WhiteResult: row[`WhiteResult${i}`],\n          MoveProbability: row[`MoveProbability${i}`],\n          LineProbabilityW: row[`LineProbability(W)${i}`],\n          LineProbabilityB: row[`LineProbability(B)${i}`]\n        });\n      }\n    });\n    const lineCounts = longDF.reduce((acc, row) => {\n      acc[row.Line] = (acc[row.Line] || 0) + 1;\n      return acc;\n    }, {});\n    longDF.forEach(row => {\n      row['#Games'] = lineCounts[row.Line];\n    });\n    const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n    const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n    let uniqueLines = \"//\";\n    const nonSubsetLongDF = filteredLongDF.filter(row => {\n      if (!row.Line) return false;\n      if (uniqueLines.includes(row.Line)) {\n        return false;\n      }\n      uniqueLines += row.Line;\n      uniqueLines += \"//\";\n      return true;\n    });\n    const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) => index === self.findIndex(r => r.Line === row.Line));\n    let finalLongDF;\n    if (opponentColor === \"Black\") {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n      });\n    } else {\n      finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n      finalLongDF.forEach(row => {\n        row['LineProbability'] = row['LineProbabilityW'];\n        delete row['LineProbabilityB'];\n        delete row['LineProbabilityW'];\n      });\n    }\n    const categorizedLines = categorizeLines(finalLongDF, opponentColor);\n    setFilteredData(categorizedLines);\n    const commonLines = findCommonLines(movesList);\n    setCommonLines(commonLines);\n  };\n  const categorizeLines = (finalLongDF, opponentColor) => {\n    return finalLongDF.map(row => {\n      const evalColumn = opponentColor === \"Black\" ? \"LineEvaluationB\" : \"LineEvaluationW\";\n      const evaluation = row[evalColumn];\n      if (evaluation >= 2.5) {\n        row.MistakeType = \"Fatal Blunder\";\n      } else if (evaluation >= 1.0) {\n        row.MistakeType = \"Major Mistake\";\n      } else if (evaluation >= 0.6) {\n        row.MistakeType = \"Slight Inaccuracy\";\n      } else {\n        row.MistakeType = \"None\";\n      }\n      return row;\n    }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n  };\n  const findCommonLines = movesList => {\n    const lineCounts = {};\n    movesList.forEach(moves => {\n      moves.forEach((move, index) => {\n        const line = moves.slice(0, index + 1).join(' ');\n        if (!lineCounts[line]) {\n          lineCounts[line] = 0;\n        }\n        lineCounts[line]++;\n      });\n    });\n    const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n    return sortedLines.slice(0, 5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blunder-punisher\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blunder-punisher\",\n              children: \"Blunder Punisher\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Weakness Finder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analysis-board\",\n              children: \"Analysis Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"#about-us\",\n              children: \"About Us\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blunder Punisher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of games in the file: \", gamesCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"common-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Most Common Lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: commonLines.map(([line, count], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [line, \" - \", count]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filtered Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(filteredData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 9\n  }, this);\n};\n_s(BlunderPunisher, \"kXXY/iDqIWa7nfEkr0kPOAdw1Fk=\");\n_c = BlunderPunisher;\nexport default BlunderPunisher;\nvar _c;\n$RefreshReg$(_c, \"BlunderPunisher\");","map":{"version":3,"names":["React","useState","useEffect","Link","Chess","jsxDEV","_jsxDEV","BlunderPunisher","_s","importedGames","setImportedGames","gamesCount","setGamesCount","commonLines","setCommonLines","filteredData","setFilteredData","finalLongDF","setFinalLongDF","stockfish","setStockfish","initStockfish","sf","Worker","postMessage","handleFileSelect","event","file","target","files","reader","FileReader","onload","e","fullPgn","result","rawGames","split","filter","Boolean","games","map","game","trim","length","processGames","readAsText","evaluatePGNsWithPython","pgnPaths","outputPath","response","axios","post","data","error","console","eventList","siteList","whiteList","blackList","resultList","dateList","whiteEloList","blackEloList","fullValList","initialColnames","movesList","chess","forEach","index","loadPgn","moves","history","push","valList","triangle","String","header","i","j","dataFrame","row","reduce","acc","val","Event","Site","White","Black","WhiteResult1","Date","WhiteElo","BlackElo","GameID","opponentColor","opponentName","filteredDF","moveProb1","Line1","totalGames","MoveProbability1","moveProb","key","lineCount","pw","pb","longDF","Ply","Line","EVAL","WhiteResult","MoveProbability","LineProbabilityW","LineProbabilityB","lineCounts","filteredLongDFUnsorted","filteredLongDF","sort","a","b","uniqueLines","nonSubsetLongDF","includes","uniqueLongDF","self","findIndex","r","uniqueGameIDs","Set","evaluatePGNs","id","evaluatedPGNs","processEvaluatedGames","pgn","categorizedLines","categorizeLines","findCommonLines","evalColumn","evaluation","MistakeType","LineProbability","move","line","slice","join","sortedLines","Object","entries","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","count","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/julianzapata-hall/Documents/Renamed/my-react-website/client/src/BlunderPunisher.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chess } from 'chess.js';\nimport './styles.css';\n\nconst BlunderPunisher = () => {\n    const [importedGames, setImportedGames] = useState([]);\n    const [gamesCount, setGamesCount] = useState(0);\n    const [commonLines, setCommonLines] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    const [finalLongDF, setFinalLongDF] = useState([]);\n    const [stockfish, setStockfish] = useState(null);\n\n    useEffect(() => {\n        const initStockfish = () => {\n            const sf = new Worker('stockfish.js');\n            sf.postMessage('uci');\n            setStockfish(sf);\n        };\n        initStockfish();\n    }, []);\n\n    const handleFileSelect = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const fullPgn = e.target.result;\n            let rawGames = fullPgn.split(/\\[Event/gi).filter(Boolean);\n            let games = rawGames.map(game => '[Event' + game.trim());\n\n            setImportedGames(games);\n            setGamesCount(games.length);\n            processGames(games);\n        };\n        reader.readAsText(file);\n    };\n\n    const evaluatePGNsWithPython = async (pgnPaths, outputPath) => {\n        try {\n            const response = await axios.post('/api/evaluate-pgns', { pgnPaths, outputPath });\n            return response.data;\n        } catch (error) {\n            console.error(\"Error evaluating PGNs with Python:\", error);\n            return null;\n        }\n    };\n\n    const processGames = (games) => {\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const fullValList = [];\n        const initialColnames = [];\n        const movesList = [];\n        const chess = new Chess();\n\n        games.forEach((game, index) => {\n            chess.loadPgn(game);\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        const opponentColor = 'Black';\n        const opponentName = 'julian8x8';\n        const filteredDF = dataFrame.filter(row => row[opponentColor] === opponentName);\n\n        const moveProb1 = filteredDF.reduce((acc, row) => {\n            acc[row.Line1] = (acc[row.Line1] || 0) + 1;\n            return acc;\n        }, {});\n        const totalGames = filteredDF.length;\n\n        filteredDF.forEach(row => {\n            row.MoveProbability1 = moveProb1[row.Line1] / totalGames;\n        });\n\n        for (let i = 1; i < 25; i++) {\n            filteredDF.forEach(row => {\n                row[`WhiteResult${i + 1}`] = row.WhiteResult1;\n            });\n\n            const moveProb = filteredDF.reduce((acc, row) => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                acc[key] = (acc[key] || 0) + 1;\n                return acc;\n            }, {});\n\n            const lineCount = filteredDF.reduce((acc, row) => {\n                acc[row[`Line${i}`]] = (acc[row[`Line${i}`]] || 0) + 1;\n                return acc;\n            }, {});\n\n            filteredDF.forEach(row => {\n                const key = `${row[`Line${i}`]}|${row[`Line${i + 1}`]}`;\n                row[`MoveProbability${i + 1}`] = moveProb[key] / lineCount[row[`Line${i}`]];\n            });\n        }\n\n        filteredDF.forEach(row => {\n            let pw = 1;\n            let pb = 1;\n            for (let i = 1; i <= 25; i++) {\n                if (i % 2 === 1) {\n                    pw *= row[`MoveProbability${i}`] || 1;\n                } else {\n                    pb *= row[`MoveProbability${i}`] || 1;\n                }\n                row[`LineProbability(W)${i}`] = pw;\n                row[`LineProbability(B)${i}`] = pb;\n            }\n        });\n\n        const longDF = [];\n        filteredDF.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`]\n                });\n            }\n        });\n\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        let uniqueLines = \"//\";\n        const nonSubsetLongDF = filteredLongDF.filter(row => {\n            if (!row.Line) return false;\n            if (uniqueLines.includes(row.Line)){\n                return false;\n            }\n            uniqueLines += row.Line;\n            uniqueLines += \"//\";\n            return true;\n        });\n\n        const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) =>\n            index === self.findIndex(r => r.Line === row.Line)\n        );\n\n        let finalLongDF;\n        if (opponentColor === \"Black\") {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n            });\n        } else {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n            });\n        }\n\n        setFinalLongDF(finalLongDF);\n        const uniqueGameIDs = [...new Set(finalLongDF.map(row => row.GameID))];\n        evaluatePGNs(uniqueGameIDs);\n    };\n\n    const evaluatePGNs = async (uniqueGameIDs) => {\n        const pgnPaths = uniqueGameIDs.map(id => `path/to/your/pgns/${id}.pgn`);\n        const outputPath = 'path/to/output/evaluated_games.pgn';\n        const evaluatedPGNs = await evaluatePGNsWithPython(pgnPaths, outputPath);\n        \n        if (evaluatedPGNs) {\n            processEvaluatedGames(evaluatedPGNs);\n        }\n    };\n\n    const processEvaluatedGames = (evaluatedPGNs) => {\n        const chess = new Chess();\n        const movesList = [];\n        const fullValList = [];\n        const eventList = [];\n        const siteList = [];\n        const whiteList = [];\n        const blackList = [];\n        const resultList = [];\n        const dateList = [];\n        const whiteEloList = [];\n        const blackEloList = [];\n        const initialColnames = [];\n\n        evaluatedPGNs.forEach((pgn, index) => {\n            chess.loadPgn(pgn);\n            let moves = chess.history();\n            movesList.push(moves);\n\n            const valList = [];\n            let triangle = String(moves[0]) + \"*\";\n            valList.push(triangle);\n\n            eventList.push(chess.header()[\"Event\"]);\n            siteList.push(chess.header()[\"Site\"]);\n            whiteList.push(chess.header()[\"White\"]);\n            blackList.push(chess.header()[\"Black\"]);\n            resultList.push(chess.header()[\"Result\"]);\n            dateList.push(chess.header()[\"Date\"]);\n            whiteEloList.push(chess.header()[\"WhiteElo\"]);\n            blackEloList.push(chess.header()[\"BlackElo\"]);\n\n            for (let i = 1; i < 25 && i < moves.length; i++) {\n                triangle += String(moves[i]) + \"*\";\n                valList.push(triangle);\n            }\n            fullValList.push(valList);\n        });\n\n        for (let j = 1; j <= 25; j++) {\n            initialColnames.push(\"Line\" + String(j));\n        }\n\n        const dataFrame = fullValList.map((row, index) => ({\n            ...row.reduce((acc, val, i) => ({ ...acc, [initialColnames[i]]: val }), {}),\n            Event: eventList[index],\n            Site: siteList[index],\n            White: whiteList[index],\n            Black: blackList[index],\n            WhiteResult1: resultList[index] === '1-0' ? 1 : 0,\n            Date: dateList[index],\n            WhiteElo: whiteEloList[index],\n            BlackElo: blackEloList[index],\n            GameID: index\n        }));\n\n        const longDF = [];\n        dataFrame.forEach(row => {\n            for (let i = 1; i <= 25; i++) {\n                longDF.push({\n                    GameID: row.GameID,\n                    Ply: i,\n                    Line: row[`Line${i}`],\n                    EVAL: row[`EVAL${i}`],\n                    WhiteResult: row[`WhiteResult${i}`],\n                    MoveProbability: row[`MoveProbability${i}`],\n                    LineProbabilityW: row[`LineProbability(W)${i}`],\n                    LineProbabilityB: row[`LineProbability(B)${i}`]\n                });\n            }\n        });\n\n        const lineCounts = longDF.reduce((acc, row) => {\n            acc[row.Line] = (acc[row.Line] || 0) + 1;\n            return acc;\n        }, {});\n\n        longDF.forEach(row => {\n            row['#Games'] = lineCounts[row.Line];\n        });\n\n        const filteredLongDFUnsorted = longDF.filter(row => row['#Games'] > 1);\n        const filteredLongDF = filteredLongDFUnsorted.sort((a, b) => b.Ply - a.Ply);\n\n        let uniqueLines = \"//\";\n        const nonSubsetLongDF = filteredLongDF.filter(row => {\n            if (!row.Line) return false;\n            if (uniqueLines.includes(row.Line)){\n                return false;\n            }\n            uniqueLines += row.Line;\n            uniqueLines += \"//\";\n            return true;\n        });\n\n        const uniqueLongDF = nonSubsetLongDF.filter((row, index, self) =>\n            index === self.findIndex(r => r.Line === row.Line)\n        );\n\n        let finalLongDF;\n        if (opponentColor === \"Black\") {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityB - b.LineProbabilityB);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n            });\n        } else {\n            finalLongDF = uniqueLongDF.sort((a, b) => a.LineProbabilityW - b.LineProbabilityW);\n            finalLongDF.forEach(row => {\n                row['LineProbability'] = row['LineProbabilityW'];\n                delete row['LineProbabilityB'];\n                delete row['LineProbabilityW'];\n            });\n        }\n\n        const categorizedLines = categorizeLines(finalLongDF, opponentColor);\n        setFilteredData(categorizedLines);\n\n        const commonLines = findCommonLines(movesList);\n        setCommonLines(commonLines);\n    };\n\n    const categorizeLines = (finalLongDF, opponentColor) => {\n        return finalLongDF.map(row => {\n            const evalColumn = opponentColor === \"Black\" ? \"LineEvaluationB\" : \"LineEvaluationW\";\n            const evaluation = row[evalColumn];\n\n            if (evaluation >= 2.5) {\n                row.MistakeType = \"Fatal Blunder\";\n            } else if (evaluation >= 1.0) {\n                row.MistakeType = \"Major Mistake\";\n            } else if (evaluation >= 0.6) {\n                row.MistakeType = \"Slight Inaccuracy\";\n            } else {\n                row.MistakeType = \"None\";\n            }\n            return row;\n        }).filter(row => row.MistakeType !== \"None\" && row.LineProbability > 0.2);\n    };\n\n    const findCommonLines = (movesList) => {\n        const lineCounts = {};\n\n        movesList.forEach(moves => {\n            moves.forEach((move, index) => {\n                const line = moves.slice(0, index + 1).join(' ');\n                if (!lineCounts[line]) {\n                    lineCounts[line] = 0;\n                }\n                lineCounts[line]++;\n            });\n        });\n\n        const sortedLines = Object.entries(lineCounts).sort((a, b) => b[1] - a[1]);\n        return sortedLines.slice(0, 5);\n    };\n\n    return (\n        <div className=\"blunder-punisher\">\n            <header>\n                <nav>\n                    <ul>\n                        <li><Link to=\"/\">Home</Link></li>\n                        <li><Link to=\"/blunder-punisher\">Blunder Punisher</Link></li>\n                        <li><Link to=\"/\">Weakness Finder</Link></li>\n                        <li><Link to=\"/analysis-board\">Analysis Board</Link></li>\n                        <li><Link to=\"#about-us\">About Us</Link></li>\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <h1>Blunder Punisher</h1>\n                <input type=\"file\" onChange={handleFileSelect} />\n                <p>Number of games in the file: {gamesCount}</p>\n                <div className=\"common-lines\">\n                    <h2>Most Common Lines</h2>\n                    <ul>\n                        {commonLines.map(([line, count], index) => (\n                            <li key={index}>{line} - {count}</li>\n                        ))}\n                    </ul>\n                    <h2>Filtered Data</h2>\n                    <pre>{JSON.stringify(filteredData, null, 2)}</pre>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default BlunderPunisher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}